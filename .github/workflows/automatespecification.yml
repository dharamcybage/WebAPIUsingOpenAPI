# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Generate API from Swagger

on:
  push:
    branches:
      - master
    paths:
      -  WebAPIUsingOpenAPI/swagger.json  # Triggers only if swagger.json is modified
  pull_request:
    types: [closed] 
    branches:
      - master
    paths:
      -  WebAPIUsingOpenAPI/swagger.json  # Triggers only if swagger.json was modified in PR


jobs:
  generate-api:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full commit history

      - name: Install Java (Required for OpenAPI Generator)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download OpenAPI Generator CLI
        run: |
          curl -L https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.2.0/openapi-generator-cli-7.2.0.jar -o openapi-generator-cli.jar

      - name: Generate API Code
        run: |
          java -jar openapi-generator-cli.jar generate -i WebAPIUsingOpenAPI/swagger.json -g aspnetcore -o WebAPIUsingOpenAPI/VectoryPathwayAPI
          git remote -v
          git config --list
          
      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add WebAPIUsingOpenAPI/VectoryPathwayAPI/*
          git commit -m "Auto-generate API code from updated swagger.json" || echo "No changes to commit"
          git push https://github.com/dharamcybage/WebAPIUsingOpenAPI.git
          git remote -v
          git config --list

        env:
          PAT: ${{ secrets.PAT }}  # Use the stored secret token
          


