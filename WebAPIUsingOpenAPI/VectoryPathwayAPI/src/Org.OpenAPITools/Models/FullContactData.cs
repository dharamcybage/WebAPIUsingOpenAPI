/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FullContactData : IEquatable<FullContactData>
    {
        /// <summary>
        /// Gets or Sets BackgroundChecks
        /// </summary>
        [Required]
        [DataMember(Name="backgroundChecks", EmitDefaultValue=false)]
        public List<BackgroundCheckDTO> BackgroundChecks { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [Required]
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByName
        /// </summary>
        [Required]
        [DataMember(Name="createdByName", EmitDefaultValue=false)]
        public string CreatedByName { get; set; }

        /// <summary>
        /// Gets or Sets Experiences
        /// </summary>
        [Required]
        [DataMember(Name="experiences", EmitDefaultValue=false)]
        public List<ExperienceDTO> Experiences { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [Required]
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public BasicUser CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Students
        /// </summary>
        [Required]
        [DataMember(Name="students", EmitDefaultValue=false)]
        public List<BasicUser> Students { get; set; }

        /// <summary>
        /// Gets or Sets Emails
        /// </summary>
        [Required]
        [DataMember(Name="emails", EmitDefaultValue=false)]
        public List<ContactEmailDTO> Emails { get; set; }

        /// <summary>
        /// Gets or Sets ExternalCreatedByName
        /// </summary>
        [DataMember(Name="externalCreatedByName", EmitDefaultValue=true)]
        public string ExternalCreatedByName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [Required]
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByDistrict
        /// </summary>
        [Required]
        [DataMember(Name="createdByDistrict", EmitDefaultValue=false)]
        public string CreatedByDistrict { get; set; }

        /// <summary>
        /// Gets or Sets ExternalCreatedByEmail
        /// </summary>
        [DataMember(Name="externalCreatedByEmail", EmitDefaultValue=true)]
        public string ExternalCreatedByEmail { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets MainNotes
        /// </summary>
        [Required]
        [DataMember(Name="mainNotes", EmitDefaultValue=false)]
        public string MainNotes { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=true)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [Required]
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [Required]
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public OrganizationDTO Organization { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [Required]
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<FullContactNote> Notes { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImageUrl
        /// </summary>
        [DataMember(Name="profileImageUrl", EmitDefaultValue=true)]
        public string ProfileImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public FormSubmissionResponse CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [Required]
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<TagDTO> Tags { get; set; }

        /// <summary>
        /// Gets or Sets IncomingEmail
        /// </summary>
        [Required]
        [DataMember(Name="incomingEmail", EmitDefaultValue=false)]
        public string IncomingEmail { get; set; }

        /// <summary>
        /// Gets or Sets AdvisoryBoards
        /// </summary>
        [Required]
        [DataMember(Name="advisoryBoards", EmitDefaultValue=false)]
        public List<AdvisoryBoardDTO> AdvisoryBoards { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FullContactData {\n");
            sb.Append("  BackgroundChecks: ").Append(BackgroundChecks).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CreatedByName: ").Append(CreatedByName).Append("\n");
            sb.Append("  Experiences: ").Append(Experiences).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Students: ").Append(Students).Append("\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("  ExternalCreatedByName: ").Append(ExternalCreatedByName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  CreatedByDistrict: ").Append(CreatedByDistrict).Append("\n");
            sb.Append("  ExternalCreatedByEmail: ").Append(ExternalCreatedByEmail).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  MainNotes: ").Append(MainNotes).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ProfileImageUrl: ").Append(ProfileImageUrl).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  IncomingEmail: ").Append(IncomingEmail).Append("\n");
            sb.Append("  AdvisoryBoards: ").Append(AdvisoryBoards).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FullContactData)obj);
        }

        /// <summary>
        /// Returns true if FullContactData instances are equal
        /// </summary>
        /// <param name="other">Instance of FullContactData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FullContactData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BackgroundChecks == other.BackgroundChecks ||
                    BackgroundChecks != null &&
                    other.BackgroundChecks != null &&
                    BackgroundChecks.SequenceEqual(other.BackgroundChecks)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    CreatedByName == other.CreatedByName ||
                    CreatedByName != null &&
                    CreatedByName.Equals(other.CreatedByName)
                ) && 
                (
                    Experiences == other.Experiences ||
                    Experiences != null &&
                    other.Experiences != null &&
                    Experiences.SequenceEqual(other.Experiences)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    Students == other.Students ||
                    Students != null &&
                    other.Students != null &&
                    Students.SequenceEqual(other.Students)
                ) && 
                (
                    Emails == other.Emails ||
                    Emails != null &&
                    other.Emails != null &&
                    Emails.SequenceEqual(other.Emails)
                ) && 
                (
                    ExternalCreatedByName == other.ExternalCreatedByName ||
                    ExternalCreatedByName != null &&
                    ExternalCreatedByName.Equals(other.ExternalCreatedByName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    CreatedByDistrict == other.CreatedByDistrict ||
                    CreatedByDistrict != null &&
                    CreatedByDistrict.Equals(other.CreatedByDistrict)
                ) && 
                (
                    ExternalCreatedByEmail == other.ExternalCreatedByEmail ||
                    ExternalCreatedByEmail != null &&
                    ExternalCreatedByEmail.Equals(other.ExternalCreatedByEmail)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    MainNotes == other.MainNotes ||
                    MainNotes != null &&
                    MainNotes.Equals(other.MainNotes)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.Equals(other.Organization)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    other.Notes != null &&
                    Notes.SequenceEqual(other.Notes)
                ) && 
                (
                    ProfileImageUrl == other.ProfileImageUrl ||
                    ProfileImageUrl != null &&
                    ProfileImageUrl.Equals(other.ProfileImageUrl)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    IncomingEmail == other.IncomingEmail ||
                    IncomingEmail != null &&
                    IncomingEmail.Equals(other.IncomingEmail)
                ) && 
                (
                    AdvisoryBoards == other.AdvisoryBoards ||
                    AdvisoryBoards != null &&
                    other.AdvisoryBoards != null &&
                    AdvisoryBoards.SequenceEqual(other.AdvisoryBoards)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BackgroundChecks != null)
                    hashCode = hashCode * 59 + BackgroundChecks.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (CreatedByName != null)
                    hashCode = hashCode * 59 + CreatedByName.GetHashCode();
                    if (Experiences != null)
                    hashCode = hashCode * 59 + Experiences.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (Students != null)
                    hashCode = hashCode * 59 + Students.GetHashCode();
                    if (Emails != null)
                    hashCode = hashCode * 59 + Emails.GetHashCode();
                    if (ExternalCreatedByName != null)
                    hashCode = hashCode * 59 + ExternalCreatedByName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (CreatedByDistrict != null)
                    hashCode = hashCode * 59 + CreatedByDistrict.GetHashCode();
                    if (ExternalCreatedByEmail != null)
                    hashCode = hashCode * 59 + ExternalCreatedByEmail.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (MainNotes != null)
                    hashCode = hashCode * 59 + MainNotes.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    if (ProfileImageUrl != null)
                    hashCode = hashCode * 59 + ProfileImageUrl.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (IncomingEmail != null)
                    hashCode = hashCode * 59 + IncomingEmail.GetHashCode();
                    if (AdvisoryBoards != null)
                    hashCode = hashCode * 59 + AdvisoryBoards.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FullContactData left, FullContactData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FullContactData left, FullContactData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
