/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ExperienceMatchRequest : IEquatable<ExperienceMatchRequest>
    {
        /// <summary>
        /// Gets or Sets CareerClusters
        /// </summary>
        [Required]
        [DataMember(Name="careerClusters", EmitDefaultValue=false)]
        public List<long> CareerClusters { get; set; }

        /// <summary>
        /// Gets or Sets Accommodations
        /// </summary>
        [Required]
        [DataMember(Name="accommodations", EmitDefaultValue=true)]
        public bool Accommodations { get; set; }

        /// <summary>
        /// Gets or Sets PreferredTimes
        /// </summary>
        [DataMember(Name="preferredTimes", EmitDefaultValue=true)]
        public List<string> PreferredTimes { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets SeasonOptions
        /// </summary>
        [DataMember(Name="seasonOptions", EmitDefaultValue=true)]
        public List<string> SeasonOptions { get; set; }

        /// <summary>
        /// Gets or Sets SpecificSkills
        /// </summary>
        [Required]
        [DataMember(Name="specificSkills", EmitDefaultValue=false)]
        public List<long> SpecificSkills { get; set; }

        /// <summary>
        /// Gets or Sets Licenses
        /// </summary>
        [Required]
        [DataMember(Name="licenses", EmitDefaultValue=false)]
        public List<long> Licenses { get; set; }

        /// <summary>
        /// Gets or Sets GeneralSkills
        /// </summary>
        [Required]
        [DataMember(Name="generalSkills", EmitDefaultValue=false)]
        public List<long> GeneralSkills { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExperienceMatchRequest {\n");
            sb.Append("  CareerClusters: ").Append(CareerClusters).Append("\n");
            sb.Append("  Accommodations: ").Append(Accommodations).Append("\n");
            sb.Append("  PreferredTimes: ").Append(PreferredTimes).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  SeasonOptions: ").Append(SeasonOptions).Append("\n");
            sb.Append("  SpecificSkills: ").Append(SpecificSkills).Append("\n");
            sb.Append("  Licenses: ").Append(Licenses).Append("\n");
            sb.Append("  GeneralSkills: ").Append(GeneralSkills).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExperienceMatchRequest)obj);
        }

        /// <summary>
        /// Returns true if ExperienceMatchRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ExperienceMatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExperienceMatchRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CareerClusters == other.CareerClusters ||
                    CareerClusters != null &&
                    other.CareerClusters != null &&
                    CareerClusters.SequenceEqual(other.CareerClusters)
                ) && 
                (
                    Accommodations == other.Accommodations ||
                    
                    Accommodations.Equals(other.Accommodations)
                ) && 
                (
                    PreferredTimes == other.PreferredTimes ||
                    PreferredTimes != null &&
                    other.PreferredTimes != null &&
                    PreferredTimes.SequenceEqual(other.PreferredTimes)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    SeasonOptions == other.SeasonOptions ||
                    SeasonOptions != null &&
                    other.SeasonOptions != null &&
                    SeasonOptions.SequenceEqual(other.SeasonOptions)
                ) && 
                (
                    SpecificSkills == other.SpecificSkills ||
                    SpecificSkills != null &&
                    other.SpecificSkills != null &&
                    SpecificSkills.SequenceEqual(other.SpecificSkills)
                ) && 
                (
                    Licenses == other.Licenses ||
                    Licenses != null &&
                    other.Licenses != null &&
                    Licenses.SequenceEqual(other.Licenses)
                ) && 
                (
                    GeneralSkills == other.GeneralSkills ||
                    GeneralSkills != null &&
                    other.GeneralSkills != null &&
                    GeneralSkills.SequenceEqual(other.GeneralSkills)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CareerClusters != null)
                    hashCode = hashCode * 59 + CareerClusters.GetHashCode();
                    
                    hashCode = hashCode * 59 + Accommodations.GetHashCode();
                    if (PreferredTimes != null)
                    hashCode = hashCode * 59 + PreferredTimes.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (SeasonOptions != null)
                    hashCode = hashCode * 59 + SeasonOptions.GetHashCode();
                    if (SpecificSkills != null)
                    hashCode = hashCode * 59 + SpecificSkills.GetHashCode();
                    if (Licenses != null)
                    hashCode = hashCode * 59 + Licenses.GetHashCode();
                    if (GeneralSkills != null)
                    hashCode = hashCode * 59 + GeneralSkills.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExperienceMatchRequest left, ExperienceMatchRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExperienceMatchRequest left, ExperienceMatchRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
