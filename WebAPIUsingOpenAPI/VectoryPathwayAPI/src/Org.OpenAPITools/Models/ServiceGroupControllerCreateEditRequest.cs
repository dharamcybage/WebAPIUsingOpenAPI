/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ServiceGroupControllerCreateEditRequest : IEquatable<ServiceGroupControllerCreateEditRequest>
    {
        /// <summary>
        /// Gets or Sets AllowsExternalSubmissions
        /// </summary>
        [Required]
        [DataMember(Name="allowsExternalSubmissions", EmitDefaultValue=true)]
        public bool AllowsExternalSubmissions { get; set; }

        /// <summary>
        /// Gets or Sets MaxStudentsAllowed
        /// </summary>
        [DataMember(Name="maxStudentsAllowed", EmitDefaultValue=true)]
        public long? MaxStudentsAllowed { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IndividualGoal
        /// </summary>
        [DataMember(Name="individualGoal", EmitDefaultValue=true)]
        public double? IndividualGoal { get; set; }

        /// <summary>
        /// Gets or Sets GroupGoal
        /// </summary>
        [DataMember(Name="groupGoal", EmitDefaultValue=true)]
        public double? GroupGoal { get; set; }

        /// <summary>
        /// Gets or Sets RequiresVerification
        /// </summary>
        [Required]
        [DataMember(Name="requiresVerification", EmitDefaultValue=true)]
        public bool RequiresVerification { get; set; }

        /// <summary>
        /// Gets or Sets HasEngage
        /// </summary>
        [Required]
        [DataMember(Name="hasEngage", EmitDefaultValue=true)]
        public bool HasEngage { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets HasService
        /// </summary>
        [Required]
        [DataMember(Name="hasService", EmitDefaultValue=true)]
        public bool HasService { get; set; }

        /// <summary>
        /// Gets or Sets TwitterHandle
        /// </summary>
        [DataMember(Name="twitterHandle", EmitDefaultValue=true)]
        public string TwitterHandle { get; set; }

        /// <summary>
        /// Gets or Sets YoutubeLink
        /// </summary>
        [DataMember(Name="youtubeLink", EmitDefaultValue=true)]
        public string YoutubeLink { get; set; }

        /// <summary>
        /// Gets or Sets Admins
        /// </summary>
        [Required]
        [DataMember(Name="admins", EmitDefaultValue=false)]
        public List<long> Admins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceGroupControllerCreateEditRequest {\n");
            sb.Append("  AllowsExternalSubmissions: ").Append(AllowsExternalSubmissions).Append("\n");
            sb.Append("  MaxStudentsAllowed: ").Append(MaxStudentsAllowed).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IndividualGoal: ").Append(IndividualGoal).Append("\n");
            sb.Append("  GroupGoal: ").Append(GroupGoal).Append("\n");
            sb.Append("  RequiresVerification: ").Append(RequiresVerification).Append("\n");
            sb.Append("  HasEngage: ").Append(HasEngage).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HasService: ").Append(HasService).Append("\n");
            sb.Append("  TwitterHandle: ").Append(TwitterHandle).Append("\n");
            sb.Append("  YoutubeLink: ").Append(YoutubeLink).Append("\n");
            sb.Append("  Admins: ").Append(Admins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServiceGroupControllerCreateEditRequest)obj);
        }

        /// <summary>
        /// Returns true if ServiceGroupControllerCreateEditRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceGroupControllerCreateEditRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceGroupControllerCreateEditRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AllowsExternalSubmissions == other.AllowsExternalSubmissions ||
                    
                    AllowsExternalSubmissions.Equals(other.AllowsExternalSubmissions)
                ) && 
                (
                    MaxStudentsAllowed == other.MaxStudentsAllowed ||
                    MaxStudentsAllowed != null &&
                    MaxStudentsAllowed.Equals(other.MaxStudentsAllowed)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    IndividualGoal == other.IndividualGoal ||
                    IndividualGoal != null &&
                    IndividualGoal.Equals(other.IndividualGoal)
                ) && 
                (
                    GroupGoal == other.GroupGoal ||
                    GroupGoal != null &&
                    GroupGoal.Equals(other.GroupGoal)
                ) && 
                (
                    RequiresVerification == other.RequiresVerification ||
                    
                    RequiresVerification.Equals(other.RequiresVerification)
                ) && 
                (
                    HasEngage == other.HasEngage ||
                    
                    HasEngage.Equals(other.HasEngage)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HasService == other.HasService ||
                    
                    HasService.Equals(other.HasService)
                ) && 
                (
                    TwitterHandle == other.TwitterHandle ||
                    TwitterHandle != null &&
                    TwitterHandle.Equals(other.TwitterHandle)
                ) && 
                (
                    YoutubeLink == other.YoutubeLink ||
                    YoutubeLink != null &&
                    YoutubeLink.Equals(other.YoutubeLink)
                ) && 
                (
                    Admins == other.Admins ||
                    Admins != null &&
                    other.Admins != null &&
                    Admins.SequenceEqual(other.Admins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AllowsExternalSubmissions.GetHashCode();
                    if (MaxStudentsAllowed != null)
                    hashCode = hashCode * 59 + MaxStudentsAllowed.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (IndividualGoal != null)
                    hashCode = hashCode * 59 + IndividualGoal.GetHashCode();
                    if (GroupGoal != null)
                    hashCode = hashCode * 59 + GroupGoal.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequiresVerification.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasEngage.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasService.GetHashCode();
                    if (TwitterHandle != null)
                    hashCode = hashCode * 59 + TwitterHandle.GetHashCode();
                    if (YoutubeLink != null)
                    hashCode = hashCode * 59 + YoutubeLink.GetHashCode();
                    if (Admins != null)
                    hashCode = hashCode * 59 + Admins.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ServiceGroupControllerCreateEditRequest left, ServiceGroupControllerCreateEditRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServiceGroupControllerCreateEditRequest left, ServiceGroupControllerCreateEditRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
