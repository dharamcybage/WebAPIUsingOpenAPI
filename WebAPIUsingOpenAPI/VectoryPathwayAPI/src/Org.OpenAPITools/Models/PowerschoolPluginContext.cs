/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PowerschoolPluginContext : IEquatable<PowerschoolPluginContext>
    {
        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [Required]
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Schools
        /// </summary>
        [Required]
        [DataMember(Name="schools", EmitDefaultValue=false)]
        public List<PowerschoolPluginContextSchool> Schools { get; set; }

        /// <summary>
        /// Gets or Sets Variant
        /// </summary>
        [DataMember(Name="variant", EmitDefaultValue=true)]
        public string Variant { get; set; }

        /// <summary>
        /// Gets or Sets StoreCodes
        /// </summary>
        [Required]
        [DataMember(Name="storeCodes", EmitDefaultValue=false)]
        public List<string> StoreCodes { get; set; }

        /// <summary>
        /// Gets or Sets NumYearsHistory
        /// </summary>
        [Required]
        [DataMember(Name="numYearsHistory", EmitDefaultValue=true)]
        public long NumYearsHistory { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [Required]
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets CreditTypeFieldName
        /// </summary>
        [DataMember(Name="creditTypeFieldName", EmitDefaultValue=true)]
        public string CreditTypeFieldName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PowerschoolPluginContext {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Schools: ").Append(Schools).Append("\n");
            sb.Append("  Variant: ").Append(Variant).Append("\n");
            sb.Append("  StoreCodes: ").Append(StoreCodes).Append("\n");
            sb.Append("  NumYearsHistory: ").Append(NumYearsHistory).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  CreditTypeFieldName: ").Append(CreditTypeFieldName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PowerschoolPluginContext)obj);
        }

        /// <summary>
        /// Returns true if PowerschoolPluginContext instances are equal
        /// </summary>
        /// <param name="other">Instance of PowerschoolPluginContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PowerschoolPluginContext other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    Schools == other.Schools ||
                    Schools != null &&
                    other.Schools != null &&
                    Schools.SequenceEqual(other.Schools)
                ) && 
                (
                    Variant == other.Variant ||
                    Variant != null &&
                    Variant.Equals(other.Variant)
                ) && 
                (
                    StoreCodes == other.StoreCodes ||
                    StoreCodes != null &&
                    other.StoreCodes != null &&
                    StoreCodes.SequenceEqual(other.StoreCodes)
                ) && 
                (
                    NumYearsHistory == other.NumYearsHistory ||
                    
                    NumYearsHistory.Equals(other.NumYearsHistory)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                ) && 
                (
                    CreditTypeFieldName == other.CreditTypeFieldName ||
                    CreditTypeFieldName != null &&
                    CreditTypeFieldName.Equals(other.CreditTypeFieldName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (Schools != null)
                    hashCode = hashCode * 59 + Schools.GetHashCode();
                    if (Variant != null)
                    hashCode = hashCode * 59 + Variant.GetHashCode();
                    if (StoreCodes != null)
                    hashCode = hashCode * 59 + StoreCodes.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumYearsHistory.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                    if (CreditTypeFieldName != null)
                    hashCode = hashCode * 59 + CreditTypeFieldName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PowerschoolPluginContext left, PowerschoolPluginContext right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PowerschoolPluginContext left, PowerschoolPluginContext right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
