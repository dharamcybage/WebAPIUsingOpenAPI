/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AddReportToDashboardRequest : IEquatable<AddReportToDashboardRequest>
    {
        /// <summary>
        /// Gets or Sets W
        /// </summary>
        [Required]
        [DataMember(Name="w", EmitDefaultValue=true)]
        public long W { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [Required]
        [DataMember(Name="y", EmitDefaultValue=true)]
        public long Y { get; set; }

        /// <summary>
        /// Gets or Sets ReportId
        /// </summary>
        [Required]
        [DataMember(Name="report_id", EmitDefaultValue=true)]
        public long ReportId { get; set; }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [Required]
        [DataMember(Name="x", EmitDefaultValue=true)]
        public long X { get; set; }

        /// <summary>
        /// Gets or Sets H
        /// </summary>
        [Required]
        [DataMember(Name="h", EmitDefaultValue=true)]
        public long H { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddReportToDashboardRequest {\n");
            sb.Append("  W: ").Append(W).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  ReportId: ").Append(ReportId).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  H: ").Append(H).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AddReportToDashboardRequest)obj);
        }

        /// <summary>
        /// Returns true if AddReportToDashboardRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AddReportToDashboardRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddReportToDashboardRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    W == other.W ||
                    
                    W.Equals(other.W)
                ) && 
                (
                    Y == other.Y ||
                    
                    Y.Equals(other.Y)
                ) && 
                (
                    ReportId == other.ReportId ||
                    
                    ReportId.Equals(other.ReportId)
                ) && 
                (
                    X == other.X ||
                    
                    X.Equals(other.X)
                ) && 
                (
                    H == other.H ||
                    
                    H.Equals(other.H)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + W.GetHashCode();
                    
                    hashCode = hashCode * 59 + Y.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReportId.GetHashCode();
                    
                    hashCode = hashCode * 59 + X.GetHashCode();
                    
                    hashCode = hashCode * 59 + H.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AddReportToDashboardRequest left, AddReportToDashboardRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AddReportToDashboardRequest left, AddReportToDashboardRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
