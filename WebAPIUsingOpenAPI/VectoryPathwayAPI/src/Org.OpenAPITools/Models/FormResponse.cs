/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FormResponse : IEquatable<FormResponse>
    {
        /// <summary>
        /// Gets or Sets ExternalToken
        /// </summary>
        [Required]
        [DataMember(Name="externalToken", EmitDefaultValue=false)]
        public string ExternalToken { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [Required]
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<FormFileDTO> Files { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [Required]
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<FormResponseField> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets AppearsInMarketPlace
        /// </summary>
        [Required]
        [DataMember(Name="appearsInMarketPlace", EmitDefaultValue=true)]
        public bool AppearsInMarketPlace { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [Required]
        [DataMember(Name="user", EmitDefaultValue=false)]
        public BasicUser User { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalWorkflow
        /// </summary>
        [Required]
        [DataMember(Name="approvalWorkflow", EmitDefaultValue=true)]
        public long ApprovalWorkflow { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folder_id", EmitDefaultValue=true)]
        public long? FolderId { get; set; }

        /// <summary>
        /// Gets or Sets CanBeUsedInWorkflow
        /// </summary>
        [Required]
        [DataMember(Name="canBeUsedInWorkflow", EmitDefaultValue=true)]
        public bool CanBeUsedInWorkflow { get; set; }

        /// <summary>
        /// Gets or Sets Premium
        /// </summary>
        [Required]
        [DataMember(Name="premium", EmitDefaultValue=true)]
        public bool Premium { get; set; }

        /// <summary>
        /// Gets or Sets CanBeUsedByBusinessPartners
        /// </summary>
        [Required]
        [DataMember(Name="canBeUsedByBusinessPartners", EmitDefaultValue=true)]
        public bool CanBeUsedByBusinessPartners { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormResponse {\n");
            sb.Append("  ExternalToken: ").Append(ExternalToken).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AppearsInMarketPlace: ").Append(AppearsInMarketPlace).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  ApprovalWorkflow: ").Append(ApprovalWorkflow).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  CanBeUsedInWorkflow: ").Append(CanBeUsedInWorkflow).Append("\n");
            sb.Append("  Premium: ").Append(Premium).Append("\n");
            sb.Append("  CanBeUsedByBusinessPartners: ").Append(CanBeUsedByBusinessPartners).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FormResponse)obj);
        }

        /// <summary>
        /// Returns true if FormResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of FormResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExternalToken == other.ExternalToken ||
                    ExternalToken != null &&
                    ExternalToken.Equals(other.ExternalToken)
                ) && 
                (
                    Files == other.Files ||
                    Files != null &&
                    other.Files != null &&
                    Files.SequenceEqual(other.Files)
                ) && 
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    other.Fields != null &&
                    Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    AppearsInMarketPlace == other.AppearsInMarketPlace ||
                    
                    AppearsInMarketPlace.Equals(other.AppearsInMarketPlace)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    ApprovalWorkflow == other.ApprovalWorkflow ||
                    
                    ApprovalWorkflow.Equals(other.ApprovalWorkflow)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    FolderId == other.FolderId ||
                    FolderId != null &&
                    FolderId.Equals(other.FolderId)
                ) && 
                (
                    CanBeUsedInWorkflow == other.CanBeUsedInWorkflow ||
                    
                    CanBeUsedInWorkflow.Equals(other.CanBeUsedInWorkflow)
                ) && 
                (
                    Premium == other.Premium ||
                    
                    Premium.Equals(other.Premium)
                ) && 
                (
                    CanBeUsedByBusinessPartners == other.CanBeUsedByBusinessPartners ||
                    
                    CanBeUsedByBusinessPartners.Equals(other.CanBeUsedByBusinessPartners)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExternalToken != null)
                    hashCode = hashCode * 59 + ExternalToken.GetHashCode();
                    if (Files != null)
                    hashCode = hashCode * 59 + Files.GetHashCode();
                    if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + AppearsInMarketPlace.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApprovalWorkflow.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (FolderId != null)
                    hashCode = hashCode * 59 + FolderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanBeUsedInWorkflow.GetHashCode();
                    
                    hashCode = hashCode * 59 + Premium.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanBeUsedByBusinessPartners.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FormResponse left, FormResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FormResponse left, FormResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
