/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkflowFormDTO : IEquatable<WorkflowFormDTO>
    {
        /// <summary>
        /// Gets or Sets FieldIds
        /// </summary>
        [Required]
        [DataMember(Name="fieldIds", EmitDefaultValue=false)]
        public List<long> FieldIds { get; set; }

        /// <summary>
        /// Gets or Sets SendsBusinessPartnerEmails
        /// </summary>
        [Required]
        [DataMember(Name="sendsBusinessPartnerEmails", EmitDefaultValue=true)]
        public bool SendsBusinessPartnerEmails { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets StudentSigningOrder
        /// </summary>
        [DataMember(Name="studentSigningOrder", EmitDefaultValue=true)]
        public long? StudentSigningOrder { get; set; }

        /// <summary>
        /// Gets or Sets AdminNotificationUserIds
        /// </summary>
        [Required]
        [DataMember(Name="adminNotificationUserIds", EmitDefaultValue=false)]
        public List<long> AdminNotificationUserIds { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationId
        /// </summary>
        [DataMember(Name="evaluationId", EmitDefaultValue=true)]
        public long? EvaluationId { get; set; }

        /// <summary>
        /// Gets or Sets SentAfter
        /// </summary>
        [DataMember(Name="sentAfter", EmitDefaultValue=true)]
        public long? SentAfter { get; set; }

        /// <summary>
        /// Gets or Sets SendsParentEmails
        /// </summary>
        [Required]
        [DataMember(Name="sendsParentEmails", EmitDefaultValue=true)]
        public bool SendsParentEmails { get; set; }

        /// <summary>
        /// Gets or Sets BusinessPartnerSigningOrder
        /// </summary>
        [DataMember(Name="businessPartnerSigningOrder", EmitDefaultValue=true)]
        public long? BusinessPartnerSigningOrder { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceId
        /// </summary>
        [Required]
        [DataMember(Name="experienceId", EmitDefaultValue=true)]
        public long ExperienceId { get; set; }

        /// <summary>
        /// Gets or Sets SendsStudentEmail
        /// </summary>
        [Required]
        [DataMember(Name="sendsStudentEmail", EmitDefaultValue=true)]
        public bool SendsStudentEmail { get; set; }

        /// <summary>
        /// Gets or Sets ReminderDays
        /// </summary>
        [Required]
        [DataMember(Name="reminderDays", EmitDefaultValue=true)]
        public long ReminderDays { get; set; }

        /// <summary>
        /// Gets or Sets IsRejectable
        /// </summary>
        [Required]
        [DataMember(Name="isRejectable", EmitDefaultValue=true)]
        public bool IsRejectable { get; set; }

        /// <summary>
        /// Gets or Sets FormId
        /// </summary>
        [Required]
        [DataMember(Name="formId", EmitDefaultValue=true)]
        public long FormId { get; set; }

        /// <summary>
        /// Gets or Sets UsesSigningOrder
        /// </summary>
        [Required]
        [DataMember(Name="usesSigningOrder", EmitDefaultValue=true)]
        public bool UsesSigningOrder { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfRequiredParents
        /// </summary>
        [Required]
        [DataMember(Name="numberOfRequiredParents", EmitDefaultValue=true)]
        public long NumberOfRequiredParents { get; set; }

        /// <summary>
        /// Gets or Sets ParentSigningOrder
        /// </summary>
        [DataMember(Name="parentSigningOrder", EmitDefaultValue=true)]
        public long? ParentSigningOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowFormDTO {\n");
            sb.Append("  FieldIds: ").Append(FieldIds).Append("\n");
            sb.Append("  SendsBusinessPartnerEmails: ").Append(SendsBusinessPartnerEmails).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  StudentSigningOrder: ").Append(StudentSigningOrder).Append("\n");
            sb.Append("  AdminNotificationUserIds: ").Append(AdminNotificationUserIds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EvaluationId: ").Append(EvaluationId).Append("\n");
            sb.Append("  SentAfter: ").Append(SentAfter).Append("\n");
            sb.Append("  SendsParentEmails: ").Append(SendsParentEmails).Append("\n");
            sb.Append("  BusinessPartnerSigningOrder: ").Append(BusinessPartnerSigningOrder).Append("\n");
            sb.Append("  ExperienceId: ").Append(ExperienceId).Append("\n");
            sb.Append("  SendsStudentEmail: ").Append(SendsStudentEmail).Append("\n");
            sb.Append("  ReminderDays: ").Append(ReminderDays).Append("\n");
            sb.Append("  IsRejectable: ").Append(IsRejectable).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  UsesSigningOrder: ").Append(UsesSigningOrder).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberOfRequiredParents: ").Append(NumberOfRequiredParents).Append("\n");
            sb.Append("  ParentSigningOrder: ").Append(ParentSigningOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkflowFormDTO)obj);
        }

        /// <summary>
        /// Returns true if WorkflowFormDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowFormDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowFormDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FieldIds == other.FieldIds ||
                    FieldIds != null &&
                    other.FieldIds != null &&
                    FieldIds.SequenceEqual(other.FieldIds)
                ) && 
                (
                    SendsBusinessPartnerEmails == other.SendsBusinessPartnerEmails ||
                    
                    SendsBusinessPartnerEmails.Equals(other.SendsBusinessPartnerEmails)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    StudentSigningOrder == other.StudentSigningOrder ||
                    StudentSigningOrder != null &&
                    StudentSigningOrder.Equals(other.StudentSigningOrder)
                ) && 
                (
                    AdminNotificationUserIds == other.AdminNotificationUserIds ||
                    AdminNotificationUserIds != null &&
                    other.AdminNotificationUserIds != null &&
                    AdminNotificationUserIds.SequenceEqual(other.AdminNotificationUserIds)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    EvaluationId == other.EvaluationId ||
                    EvaluationId != null &&
                    EvaluationId.Equals(other.EvaluationId)
                ) && 
                (
                    SentAfter == other.SentAfter ||
                    SentAfter != null &&
                    SentAfter.Equals(other.SentAfter)
                ) && 
                (
                    SendsParentEmails == other.SendsParentEmails ||
                    
                    SendsParentEmails.Equals(other.SendsParentEmails)
                ) && 
                (
                    BusinessPartnerSigningOrder == other.BusinessPartnerSigningOrder ||
                    BusinessPartnerSigningOrder != null &&
                    BusinessPartnerSigningOrder.Equals(other.BusinessPartnerSigningOrder)
                ) && 
                (
                    ExperienceId == other.ExperienceId ||
                    
                    ExperienceId.Equals(other.ExperienceId)
                ) && 
                (
                    SendsStudentEmail == other.SendsStudentEmail ||
                    
                    SendsStudentEmail.Equals(other.SendsStudentEmail)
                ) && 
                (
                    ReminderDays == other.ReminderDays ||
                    
                    ReminderDays.Equals(other.ReminderDays)
                ) && 
                (
                    IsRejectable == other.IsRejectable ||
                    
                    IsRejectable.Equals(other.IsRejectable)
                ) && 
                (
                    FormId == other.FormId ||
                    
                    FormId.Equals(other.FormId)
                ) && 
                (
                    UsesSigningOrder == other.UsesSigningOrder ||
                    
                    UsesSigningOrder.Equals(other.UsesSigningOrder)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NumberOfRequiredParents == other.NumberOfRequiredParents ||
                    
                    NumberOfRequiredParents.Equals(other.NumberOfRequiredParents)
                ) && 
                (
                    ParentSigningOrder == other.ParentSigningOrder ||
                    ParentSigningOrder != null &&
                    ParentSigningOrder.Equals(other.ParentSigningOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FieldIds != null)
                    hashCode = hashCode * 59 + FieldIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + SendsBusinessPartnerEmails.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (StudentSigningOrder != null)
                    hashCode = hashCode * 59 + StudentSigningOrder.GetHashCode();
                    if (AdminNotificationUserIds != null)
                    hashCode = hashCode * 59 + AdminNotificationUserIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (EvaluationId != null)
                    hashCode = hashCode * 59 + EvaluationId.GetHashCode();
                    if (SentAfter != null)
                    hashCode = hashCode * 59 + SentAfter.GetHashCode();
                    
                    hashCode = hashCode * 59 + SendsParentEmails.GetHashCode();
                    if (BusinessPartnerSigningOrder != null)
                    hashCode = hashCode * 59 + BusinessPartnerSigningOrder.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExperienceId.GetHashCode();
                    
                    hashCode = hashCode * 59 + SendsStudentEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReminderDays.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsRejectable.GetHashCode();
                    
                    hashCode = hashCode * 59 + FormId.GetHashCode();
                    
                    hashCode = hashCode * 59 + UsesSigningOrder.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumberOfRequiredParents.GetHashCode();
                    if (ParentSigningOrder != null)
                    hashCode = hashCode * 59 + ParentSigningOrder.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkflowFormDTO left, WorkflowFormDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkflowFormDTO left, WorkflowFormDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
