/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FullWebhookCheckRequestChecks : IEquatable<FullWebhookCheckRequestChecks>
    {
        /// <summary>
        /// Gets or Sets SexOffender
        /// </summary>
        [Required]
        [DataMember(Name="sex_offender", EmitDefaultValue=false)]
        public List<FullWebhookCheckRequestChecksCheck> SexOffender { get; set; }

        /// <summary>
        /// Gets or Sets CountyCriminal
        /// </summary>
        [Required]
        [DataMember(Name="county_criminal", EmitDefaultValue=false)]
        public List<FullWebhookCheckRequestChecksCheck> CountyCriminal { get; set; }

        /// <summary>
        /// Gets or Sets Watchlist
        /// </summary>
        [Required]
        [DataMember(Name="watchlist", EmitDefaultValue=false)]
        public List<FullWebhookCheckRequestChecksCheck> Watchlist { get; set; }

        /// <summary>
        /// Gets or Sets Criminal
        /// </summary>
        [Required]
        [DataMember(Name="criminal", EmitDefaultValue=false)]
        public List<FullWebhookCheckRequestChecksCheck> Criminal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FullWebhookCheckRequestChecks {\n");
            sb.Append("  SexOffender: ").Append(SexOffender).Append("\n");
            sb.Append("  CountyCriminal: ").Append(CountyCriminal).Append("\n");
            sb.Append("  Watchlist: ").Append(Watchlist).Append("\n");
            sb.Append("  Criminal: ").Append(Criminal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FullWebhookCheckRequestChecks)obj);
        }

        /// <summary>
        /// Returns true if FullWebhookCheckRequestChecks instances are equal
        /// </summary>
        /// <param name="other">Instance of FullWebhookCheckRequestChecks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FullWebhookCheckRequestChecks other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SexOffender == other.SexOffender ||
                    SexOffender != null &&
                    other.SexOffender != null &&
                    SexOffender.SequenceEqual(other.SexOffender)
                ) && 
                (
                    CountyCriminal == other.CountyCriminal ||
                    CountyCriminal != null &&
                    other.CountyCriminal != null &&
                    CountyCriminal.SequenceEqual(other.CountyCriminal)
                ) && 
                (
                    Watchlist == other.Watchlist ||
                    Watchlist != null &&
                    other.Watchlist != null &&
                    Watchlist.SequenceEqual(other.Watchlist)
                ) && 
                (
                    Criminal == other.Criminal ||
                    Criminal != null &&
                    other.Criminal != null &&
                    Criminal.SequenceEqual(other.Criminal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SexOffender != null)
                    hashCode = hashCode * 59 + SexOffender.GetHashCode();
                    if (CountyCriminal != null)
                    hashCode = hashCode * 59 + CountyCriminal.GetHashCode();
                    if (Watchlist != null)
                    hashCode = hashCode * 59 + Watchlist.GetHashCode();
                    if (Criminal != null)
                    hashCode = hashCode * 59 + Criminal.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FullWebhookCheckRequestChecks left, FullWebhookCheckRequestChecks right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FullWebhookCheckRequestChecks left, FullWebhookCheckRequestChecks right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
