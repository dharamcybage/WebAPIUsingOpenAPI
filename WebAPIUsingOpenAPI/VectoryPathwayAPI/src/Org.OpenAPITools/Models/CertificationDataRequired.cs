/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CertificationDataRequired : IEquatable<CertificationDataRequired>
    {
        /// <summary>
        /// Gets or Sets FormFields
        /// </summary>
        [DataMember(Name="formFields", EmitDefaultValue=true)]
        public List<FormFieldWithData> FormFields { get; set; }

        /// <summary>
        /// Gets or Sets CompletedAdvancedCourseObjects
        /// </summary>
        [DataMember(Name="completedAdvancedCourseObjects", EmitDefaultValue=true)]
        public List<long> CompletedAdvancedCourseObjects { get; set; }

        /// <summary>
        /// Gets or Sets CompletedAdvancedCourses
        /// </summary>
        [DataMember(Name="completedAdvancedCourses", EmitDefaultValue=true)]
        public List<AdvancedCourseBadgeResponse> CompletedAdvancedCourses { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfCareerSurveys
        /// </summary>
        [Required]
        [DataMember(Name="numberOfCareerSurveys", EmitDefaultValue=true)]
        public long NumberOfCareerSurveys { get; set; }

        /// <summary>
        /// Gets or Sets Courses
        /// </summary>
        [DataMember(Name="courses", EmitDefaultValue=true)]
        public List<CourseDTO> Courses { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceHours
        /// </summary>
        [Required]
        [DataMember(Name="experienceHours", EmitDefaultValue=true)]
        public double ExperienceHours { get; set; }

        /// <summary>
        /// Gets or Sets Experiences
        /// </summary>
        [DataMember(Name="experiences", EmitDefaultValue=true)]
        public List<ExperienceDTO> Experiences { get; set; }

        /// <summary>
        /// Gets or Sets ConditionalBadgeGroups
        /// </summary>
        [DataMember(Name="conditionalBadgeGroups", EmitDefaultValue=true)]
        public List<Object> ConditionalBadgeGroups { get; set; }

        /// <summary>
        /// Gets or Sets Credentials
        /// </summary>
        [DataMember(Name="credentials", EmitDefaultValue=true)]
        public List<CredentialDTO> Credentials { get; set; }

        /// <summary>
        /// Gets or Sets JourneyPlans
        /// </summary>
        [DataMember(Name="journeyPlans", EmitDefaultValue=true)]
        public List<JourneyPlanDTO> JourneyPlans { get; set; }

        /// <summary>
        /// Gets or Sets AcademicTests
        /// </summary>
        [DataMember(Name="academicTests", EmitDefaultValue=true)]
        public List<CertificationDataRequiredUserTestScoreData> AcademicTests { get; set; }

        /// <summary>
        /// Gets or Sets Activities
        /// </summary>
        [DataMember(Name="activities", EmitDefaultValue=true)]
        public List<ActivityProgressDTO> Activities { get; set; }

        /// <summary>
        /// Gets or Sets RequiredAdvancedCourses
        /// </summary>
        [DataMember(Name="requiredAdvancedCourses", EmitDefaultValue=true)]
        public List<AdvancedCourseBadgeResponse> RequiredAdvancedCourses { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfCompletedExperiences
        /// </summary>
        [Required]
        [DataMember(Name="numberOfCompletedExperiences", EmitDefaultValue=true)]
        public long NumberOfCompletedExperiences { get; set; }

        /// <summary>
        /// Gets or Sets CourseCompletionData
        /// </summary>
        [DataMember(Name="courseCompletionData", EmitDefaultValue=true)]
        public List<StudentProfileResponseUserCourseData> CourseCompletionData { get; set; }

        /// <summary>
        /// Gets or Sets Badges
        /// </summary>
        [DataMember(Name="badges", EmitDefaultValue=true)]
        public List<BadgeDTO> Badges { get; set; }

        /// <summary>
        /// Gets or Sets AdvancedExperiences
        /// </summary>
        [DataMember(Name="advancedExperiences", EmitDefaultValue=true)]
        public List<CertificationDataRequiredAdvancedExperienceData> AdvancedExperiences { get; set; }

        /// <summary>
        /// Gets or Sets ServiceHours
        /// </summary>
        [Required]
        [DataMember(Name="serviceHours", EmitDefaultValue=true)]
        public double ServiceHours { get; set; }

        /// <summary>
        /// Gets or Sets CompletedCareerSurveys
        /// </summary>
        [DataMember(Name="completedCareerSurveys", EmitDefaultValue=true)]
        public List<CertificationDataRequiredCareerSurveyData> CompletedCareerSurveys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificationDataRequired {\n");
            sb.Append("  FormFields: ").Append(FormFields).Append("\n");
            sb.Append("  CompletedAdvancedCourseObjects: ").Append(CompletedAdvancedCourseObjects).Append("\n");
            sb.Append("  CompletedAdvancedCourses: ").Append(CompletedAdvancedCourses).Append("\n");
            sb.Append("  NumberOfCareerSurveys: ").Append(NumberOfCareerSurveys).Append("\n");
            sb.Append("  Courses: ").Append(Courses).Append("\n");
            sb.Append("  ExperienceHours: ").Append(ExperienceHours).Append("\n");
            sb.Append("  Experiences: ").Append(Experiences).Append("\n");
            sb.Append("  ConditionalBadgeGroups: ").Append(ConditionalBadgeGroups).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  JourneyPlans: ").Append(JourneyPlans).Append("\n");
            sb.Append("  AcademicTests: ").Append(AcademicTests).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  RequiredAdvancedCourses: ").Append(RequiredAdvancedCourses).Append("\n");
            sb.Append("  NumberOfCompletedExperiences: ").Append(NumberOfCompletedExperiences).Append("\n");
            sb.Append("  CourseCompletionData: ").Append(CourseCompletionData).Append("\n");
            sb.Append("  Badges: ").Append(Badges).Append("\n");
            sb.Append("  AdvancedExperiences: ").Append(AdvancedExperiences).Append("\n");
            sb.Append("  ServiceHours: ").Append(ServiceHours).Append("\n");
            sb.Append("  CompletedCareerSurveys: ").Append(CompletedCareerSurveys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CertificationDataRequired)obj);
        }

        /// <summary>
        /// Returns true if CertificationDataRequired instances are equal
        /// </summary>
        /// <param name="other">Instance of CertificationDataRequired to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificationDataRequired other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FormFields == other.FormFields ||
                    FormFields != null &&
                    other.FormFields != null &&
                    FormFields.SequenceEqual(other.FormFields)
                ) && 
                (
                    CompletedAdvancedCourseObjects == other.CompletedAdvancedCourseObjects ||
                    CompletedAdvancedCourseObjects != null &&
                    other.CompletedAdvancedCourseObjects != null &&
                    CompletedAdvancedCourseObjects.SequenceEqual(other.CompletedAdvancedCourseObjects)
                ) && 
                (
                    CompletedAdvancedCourses == other.CompletedAdvancedCourses ||
                    CompletedAdvancedCourses != null &&
                    other.CompletedAdvancedCourses != null &&
                    CompletedAdvancedCourses.SequenceEqual(other.CompletedAdvancedCourses)
                ) && 
                (
                    NumberOfCareerSurveys == other.NumberOfCareerSurveys ||
                    
                    NumberOfCareerSurveys.Equals(other.NumberOfCareerSurveys)
                ) && 
                (
                    Courses == other.Courses ||
                    Courses != null &&
                    other.Courses != null &&
                    Courses.SequenceEqual(other.Courses)
                ) && 
                (
                    ExperienceHours == other.ExperienceHours ||
                    
                    ExperienceHours.Equals(other.ExperienceHours)
                ) && 
                (
                    Experiences == other.Experiences ||
                    Experiences != null &&
                    other.Experiences != null &&
                    Experiences.SequenceEqual(other.Experiences)
                ) && 
                (
                    ConditionalBadgeGroups == other.ConditionalBadgeGroups ||
                    ConditionalBadgeGroups != null &&
                    other.ConditionalBadgeGroups != null &&
                    ConditionalBadgeGroups.SequenceEqual(other.ConditionalBadgeGroups)
                ) && 
                (
                    Credentials == other.Credentials ||
                    Credentials != null &&
                    other.Credentials != null &&
                    Credentials.SequenceEqual(other.Credentials)
                ) && 
                (
                    JourneyPlans == other.JourneyPlans ||
                    JourneyPlans != null &&
                    other.JourneyPlans != null &&
                    JourneyPlans.SequenceEqual(other.JourneyPlans)
                ) && 
                (
                    AcademicTests == other.AcademicTests ||
                    AcademicTests != null &&
                    other.AcademicTests != null &&
                    AcademicTests.SequenceEqual(other.AcademicTests)
                ) && 
                (
                    Activities == other.Activities ||
                    Activities != null &&
                    other.Activities != null &&
                    Activities.SequenceEqual(other.Activities)
                ) && 
                (
                    RequiredAdvancedCourses == other.RequiredAdvancedCourses ||
                    RequiredAdvancedCourses != null &&
                    other.RequiredAdvancedCourses != null &&
                    RequiredAdvancedCourses.SequenceEqual(other.RequiredAdvancedCourses)
                ) && 
                (
                    NumberOfCompletedExperiences == other.NumberOfCompletedExperiences ||
                    
                    NumberOfCompletedExperiences.Equals(other.NumberOfCompletedExperiences)
                ) && 
                (
                    CourseCompletionData == other.CourseCompletionData ||
                    CourseCompletionData != null &&
                    other.CourseCompletionData != null &&
                    CourseCompletionData.SequenceEqual(other.CourseCompletionData)
                ) && 
                (
                    Badges == other.Badges ||
                    Badges != null &&
                    other.Badges != null &&
                    Badges.SequenceEqual(other.Badges)
                ) && 
                (
                    AdvancedExperiences == other.AdvancedExperiences ||
                    AdvancedExperiences != null &&
                    other.AdvancedExperiences != null &&
                    AdvancedExperiences.SequenceEqual(other.AdvancedExperiences)
                ) && 
                (
                    ServiceHours == other.ServiceHours ||
                    
                    ServiceHours.Equals(other.ServiceHours)
                ) && 
                (
                    CompletedCareerSurveys == other.CompletedCareerSurveys ||
                    CompletedCareerSurveys != null &&
                    other.CompletedCareerSurveys != null &&
                    CompletedCareerSurveys.SequenceEqual(other.CompletedCareerSurveys)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FormFields != null)
                    hashCode = hashCode * 59 + FormFields.GetHashCode();
                    if (CompletedAdvancedCourseObjects != null)
                    hashCode = hashCode * 59 + CompletedAdvancedCourseObjects.GetHashCode();
                    if (CompletedAdvancedCourses != null)
                    hashCode = hashCode * 59 + CompletedAdvancedCourses.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumberOfCareerSurveys.GetHashCode();
                    if (Courses != null)
                    hashCode = hashCode * 59 + Courses.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExperienceHours.GetHashCode();
                    if (Experiences != null)
                    hashCode = hashCode * 59 + Experiences.GetHashCode();
                    if (ConditionalBadgeGroups != null)
                    hashCode = hashCode * 59 + ConditionalBadgeGroups.GetHashCode();
                    if (Credentials != null)
                    hashCode = hashCode * 59 + Credentials.GetHashCode();
                    if (JourneyPlans != null)
                    hashCode = hashCode * 59 + JourneyPlans.GetHashCode();
                    if (AcademicTests != null)
                    hashCode = hashCode * 59 + AcademicTests.GetHashCode();
                    if (Activities != null)
                    hashCode = hashCode * 59 + Activities.GetHashCode();
                    if (RequiredAdvancedCourses != null)
                    hashCode = hashCode * 59 + RequiredAdvancedCourses.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumberOfCompletedExperiences.GetHashCode();
                    if (CourseCompletionData != null)
                    hashCode = hashCode * 59 + CourseCompletionData.GetHashCode();
                    if (Badges != null)
                    hashCode = hashCode * 59 + Badges.GetHashCode();
                    if (AdvancedExperiences != null)
                    hashCode = hashCode * 59 + AdvancedExperiences.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServiceHours.GetHashCode();
                    if (CompletedCareerSurveys != null)
                    hashCode = hashCode * 59 + CompletedCareerSurveys.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CertificationDataRequired left, CertificationDataRequired right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CertificationDataRequired left, CertificationDataRequired right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
