/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AssessmentDTO : IEquatable<AssessmentDTO>
    {
        /// <summary>
        /// Gets or Sets Answers
        /// </summary>
        [Required]
        [DataMember(Name="answers", EmitDefaultValue=false)]
        public List<string> Answers { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets PercentageComplete
        /// </summary>
        [Required]
        [DataMember(Name="percentageComplete", EmitDefaultValue=true)]
        public double PercentageComplete { get; set; }

        /// <summary>
        /// Gets or Sets Questions
        /// </summary>
        [Required]
        [DataMember(Name="questions", EmitDefaultValue=false)]
        public AssessmentQuestionsDTO Questions { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets RiasecCodes
        /// </summary>
        [Required]
        [DataMember(Name="riasecCodes", EmitDefaultValue=false)]
        public List<OnetRiasecCodeResponseResult> RiasecCodes { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [Required]
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<OnetAssessmentResult> Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssessmentDTO {\n");
            sb.Append("  Answers: ").Append(Answers).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PercentageComplete: ").Append(PercentageComplete).Append("\n");
            sb.Append("  Questions: ").Append(Questions).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  RiasecCodes: ").Append(RiasecCodes).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssessmentDTO)obj);
        }

        /// <summary>
        /// Returns true if AssessmentDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of AssessmentDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssessmentDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Answers == other.Answers ||
                    Answers != null &&
                    other.Answers != null &&
                    Answers.SequenceEqual(other.Answers)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    PercentageComplete == other.PercentageComplete ||
                    
                    PercentageComplete.Equals(other.PercentageComplete)
                ) && 
                (
                    Questions == other.Questions ||
                    Questions != null &&
                    Questions.Equals(other.Questions)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    RiasecCodes == other.RiasecCodes ||
                    RiasecCodes != null &&
                    other.RiasecCodes != null &&
                    RiasecCodes.SequenceEqual(other.RiasecCodes)
                ) && 
                (
                    Results == other.Results ||
                    Results != null &&
                    other.Results != null &&
                    Results.SequenceEqual(other.Results)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Answers != null)
                    hashCode = hashCode * 59 + Answers.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + PercentageComplete.GetHashCode();
                    if (Questions != null)
                    hashCode = hashCode * 59 + Questions.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (RiasecCodes != null)
                    hashCode = hashCode * 59 + RiasecCodes.GetHashCode();
                    if (Results != null)
                    hashCode = hashCode * 59 + Results.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssessmentDTO left, AssessmentDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssessmentDTO left, AssessmentDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
