/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReflectionTimeLogResponse : IEquatable<ReflectionTimeLogResponse>
    {
        /// <summary>
        /// Gets or Sets PayPeriod
        /// </summary>
        [DataMember(Name="payPeriod", EmitDefaultValue=false)]
        public PayPeriodDTO PayPeriod { get; set; }

        /// <summary>
        /// Gets or Sets PayPeriodSubmissionId
        /// </summary>
        [DataMember(Name="payPeriodSubmissionId", EmitDefaultValue=true)]
        public long? PayPeriodSubmissionId { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [Required]
        [DataMember(Name="user", EmitDefaultValue=false)]
        public BasicUser User { get; set; }

        /// <summary>
        /// Gets or Sets TimeLog
        /// </summary>
        [Required]
        [DataMember(Name="timeLog", EmitDefaultValue=false)]
        public TimeLogDTO TimeLog { get; set; }

        /// <summary>
        /// Gets or Sets Experience
        /// </summary>
        [Required]
        [DataMember(Name="experience", EmitDefaultValue=false)]
        public ExperienceDTO Experience { get; set; }

        /// <summary>
        /// Gets or Sets SignatureUrl
        /// </summary>
        [DataMember(Name="signatureUrl", EmitDefaultValue=true)]
        public string SignatureUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReflectionTimeLogResponse {\n");
            sb.Append("  PayPeriod: ").Append(PayPeriod).Append("\n");
            sb.Append("  PayPeriodSubmissionId: ").Append(PayPeriodSubmissionId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  TimeLog: ").Append(TimeLog).Append("\n");
            sb.Append("  Experience: ").Append(Experience).Append("\n");
            sb.Append("  SignatureUrl: ").Append(SignatureUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReflectionTimeLogResponse)obj);
        }

        /// <summary>
        /// Returns true if ReflectionTimeLogResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ReflectionTimeLogResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReflectionTimeLogResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PayPeriod == other.PayPeriod ||
                    PayPeriod != null &&
                    PayPeriod.Equals(other.PayPeriod)
                ) && 
                (
                    PayPeriodSubmissionId == other.PayPeriodSubmissionId ||
                    PayPeriodSubmissionId != null &&
                    PayPeriodSubmissionId.Equals(other.PayPeriodSubmissionId)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    TimeLog == other.TimeLog ||
                    TimeLog != null &&
                    TimeLog.Equals(other.TimeLog)
                ) && 
                (
                    Experience == other.Experience ||
                    Experience != null &&
                    Experience.Equals(other.Experience)
                ) && 
                (
                    SignatureUrl == other.SignatureUrl ||
                    SignatureUrl != null &&
                    SignatureUrl.Equals(other.SignatureUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PayPeriod != null)
                    hashCode = hashCode * 59 + PayPeriod.GetHashCode();
                    if (PayPeriodSubmissionId != null)
                    hashCode = hashCode * 59 + PayPeriodSubmissionId.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (TimeLog != null)
                    hashCode = hashCode * 59 + TimeLog.GetHashCode();
                    if (Experience != null)
                    hashCode = hashCode * 59 + Experience.GetHashCode();
                    if (SignatureUrl != null)
                    hashCode = hashCode * 59 + SignatureUrl.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReflectionTimeLogResponse left, ReflectionTimeLogResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReflectionTimeLogResponse left, ReflectionTimeLogResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
