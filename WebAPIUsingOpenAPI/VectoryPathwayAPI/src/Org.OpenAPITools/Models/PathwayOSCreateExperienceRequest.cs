/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PathwayOSCreateExperienceRequest : IEquatable<PathwayOSCreateExperienceRequest>
    {
        /// <summary>
        /// Gets or Sets ReflectionFormApproval
        /// </summary>
        [DataMember(Name="reflection_form_approval", EmitDefaultValue=true)]
        public long? ReflectionFormApproval { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceText
        /// </summary>
        [DataMember(Name="experienceText", EmitDefaultValue=true)]
        public string ExperienceText { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets TagIds
        /// </summary>
        [Required]
        [DataMember(Name="tag_ids", EmitDefaultValue=false)]
        public List<long> TagIds { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfSpots
        /// </summary>
        [DataMember(Name="numberOfSpots", EmitDefaultValue=true)]
        public long? NumberOfSpots { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name="location_id", EmitDefaultValue=true)]
        public long? LocationId { get; set; }

        /// <summary>
        /// Gets or Sets ShowsOnExternalJobBoard
        /// </summary>
        [Required]
        [DataMember(Name="showsOnExternalJobBoard", EmitDefaultValue=true)]
        public bool ShowsOnExternalJobBoard { get; set; }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [Required]
        [DataMember(Name="contact_id", EmitDefaultValue=true)]
        public long ContactId { get; set; }

        /// <summary>
        /// Gets or Sets ClusterIds
        /// </summary>
        [Required]
        [DataMember(Name="cluster_ids", EmitDefaultValue=false)]
        public List<long> ClusterIds { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationFormId
        /// </summary>
        [DataMember(Name="application_form_id", EmitDefaultValue=true)]
        public long? ApplicationFormId { get; set; }

        /// <summary>
        /// Gets or Sets Licenses
        /// </summary>
        [DataMember(Name="licenses", EmitDefaultValue=true)]
        public List<long> Licenses { get; set; }

        /// <summary>
        /// Gets or Sets CanGeoLog
        /// </summary>
        [Required]
        [DataMember(Name="canGeoLog", EmitDefaultValue=true)]
        public bool CanGeoLog { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets AvailableSchoolIds
        /// </summary>
        [DataMember(Name="availableSchoolIds", EmitDefaultValue=true)]
        public List<long> AvailableSchoolIds { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets HasPayPeriods
        /// </summary>
        [Required]
        [DataMember(Name="hasPayPeriods", EmitDefaultValue=true)]
        public bool HasPayPeriods { get; set; }

        /// <summary>
        /// Gets or Sets AllowStudentsToAddPayPeriods
        /// </summary>
        [Required]
        [DataMember(Name="allowStudentsToAddPayPeriods", EmitDefaultValue=true)]
        public bool AllowStudentsToAddPayPeriods { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [Required]
        [DataMember(Name="organization_id", EmitDefaultValue=true)]
        public long OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets FormSubmissionId
        /// </summary>
        [DataMember(Name="form_submission_id", EmitDefaultValue=true)]
        public long? FormSubmissionId { get; set; }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folder_id", EmitDefaultValue=true)]
        public long? FolderId { get; set; }

        /// <summary>
        /// Gets or Sets AccommodationsAvailable
        /// </summary>
        [DataMember(Name="accommodationsAvailable", EmitDefaultValue=true)]
        public bool? AccommodationsAvailable { get; set; }

        /// <summary>
        /// Gets or Sets MaxNumberOfHours
        /// </summary>
        [DataMember(Name="maxNumberOfHours", EmitDefaultValue=true)]
        public double? MaxNumberOfHours { get; set; }

        /// <summary>
        /// Gets or Sets SpecificSkills
        /// </summary>
        [DataMember(Name="specificSkills", EmitDefaultValue=true)]
        public List<long> SpecificSkills { get; set; }

        /// <summary>
        /// Gets or Sets ExternalExperienceId
        /// </summary>
        [DataMember(Name="external_experience_id", EmitDefaultValue=true)]
        public long? ExternalExperienceId { get; set; }

        /// <summary>
        /// Gets or Sets AvailableDistrictIds
        /// </summary>
        [DataMember(Name="availableDistrictIds", EmitDefaultValue=true)]
        public List<long> AvailableDistrictIds { get; set; }

        /// <summary>
        /// Gets or Sets OpportunityGroups
        /// </summary>
        [Required]
        [DataMember(Name="opportunityGroups", EmitDefaultValue=false)]
        public List<long> OpportunityGroups { get; set; }

        /// <summary>
        /// Gets or Sets ReflectionFormId
        /// </summary>
        [DataMember(Name="reflection_form_id", EmitDefaultValue=true)]
        public long? ReflectionFormId { get; set; }

        /// <summary>
        /// Gets or Sets LearningTargetId
        /// </summary>
        [DataMember(Name="learning_target_id", EmitDefaultValue=true)]
        public long? LearningTargetId { get; set; }

        /// <summary>
        /// Gets or Sets GeneralSkills
        /// </summary>
        [DataMember(Name="generalSkills", EmitDefaultValue=true)]
        public List<long> GeneralSkills { get; set; }

        /// <summary>
        /// Gets or Sets AllowsTotalTimelogHoursSubmission
        /// </summary>
        [Required]
        [DataMember(Name="allowsTotalTimelogHoursSubmission", EmitDefaultValue=true)]
        public bool AllowsTotalTimelogHoursSubmission { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PathwayOSCreateExperienceRequest {\n");
            sb.Append("  ReflectionFormApproval: ").Append(ReflectionFormApproval).Append("\n");
            sb.Append("  ExperienceText: ").Append(ExperienceText).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  NumberOfSpots: ").Append(NumberOfSpots).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  ShowsOnExternalJobBoard: ").Append(ShowsOnExternalJobBoard).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  ClusterIds: ").Append(ClusterIds).Append("\n");
            sb.Append("  ApplicationFormId: ").Append(ApplicationFormId).Append("\n");
            sb.Append("  Licenses: ").Append(Licenses).Append("\n");
            sb.Append("  CanGeoLog: ").Append(CanGeoLog).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  AvailableSchoolIds: ").Append(AvailableSchoolIds).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  HasPayPeriods: ").Append(HasPayPeriods).Append("\n");
            sb.Append("  AllowStudentsToAddPayPeriods: ").Append(AllowStudentsToAddPayPeriods).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  FormSubmissionId: ").Append(FormSubmissionId).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  AccommodationsAvailable: ").Append(AccommodationsAvailable).Append("\n");
            sb.Append("  MaxNumberOfHours: ").Append(MaxNumberOfHours).Append("\n");
            sb.Append("  SpecificSkills: ").Append(SpecificSkills).Append("\n");
            sb.Append("  ExternalExperienceId: ").Append(ExternalExperienceId).Append("\n");
            sb.Append("  AvailableDistrictIds: ").Append(AvailableDistrictIds).Append("\n");
            sb.Append("  OpportunityGroups: ").Append(OpportunityGroups).Append("\n");
            sb.Append("  ReflectionFormId: ").Append(ReflectionFormId).Append("\n");
            sb.Append("  LearningTargetId: ").Append(LearningTargetId).Append("\n");
            sb.Append("  GeneralSkills: ").Append(GeneralSkills).Append("\n");
            sb.Append("  AllowsTotalTimelogHoursSubmission: ").Append(AllowsTotalTimelogHoursSubmission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PathwayOSCreateExperienceRequest)obj);
        }

        /// <summary>
        /// Returns true if PathwayOSCreateExperienceRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PathwayOSCreateExperienceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PathwayOSCreateExperienceRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReflectionFormApproval == other.ReflectionFormApproval ||
                    ReflectionFormApproval != null &&
                    ReflectionFormApproval.Equals(other.ReflectionFormApproval)
                ) && 
                (
                    ExperienceText == other.ExperienceText ||
                    ExperienceText != null &&
                    ExperienceText.Equals(other.ExperienceText)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    TagIds == other.TagIds ||
                    TagIds != null &&
                    other.TagIds != null &&
                    TagIds.SequenceEqual(other.TagIds)
                ) && 
                (
                    NumberOfSpots == other.NumberOfSpots ||
                    NumberOfSpots != null &&
                    NumberOfSpots.Equals(other.NumberOfSpots)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    LocationId == other.LocationId ||
                    LocationId != null &&
                    LocationId.Equals(other.LocationId)
                ) && 
                (
                    ShowsOnExternalJobBoard == other.ShowsOnExternalJobBoard ||
                    
                    ShowsOnExternalJobBoard.Equals(other.ShowsOnExternalJobBoard)
                ) && 
                (
                    ContactId == other.ContactId ||
                    
                    ContactId.Equals(other.ContactId)
                ) && 
                (
                    ClusterIds == other.ClusterIds ||
                    ClusterIds != null &&
                    other.ClusterIds != null &&
                    ClusterIds.SequenceEqual(other.ClusterIds)
                ) && 
                (
                    ApplicationFormId == other.ApplicationFormId ||
                    ApplicationFormId != null &&
                    ApplicationFormId.Equals(other.ApplicationFormId)
                ) && 
                (
                    Licenses == other.Licenses ||
                    Licenses != null &&
                    other.Licenses != null &&
                    Licenses.SequenceEqual(other.Licenses)
                ) && 
                (
                    CanGeoLog == other.CanGeoLog ||
                    
                    CanGeoLog.Equals(other.CanGeoLog)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    AvailableSchoolIds == other.AvailableSchoolIds ||
                    AvailableSchoolIds != null &&
                    other.AvailableSchoolIds != null &&
                    AvailableSchoolIds.SequenceEqual(other.AvailableSchoolIds)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    HasPayPeriods == other.HasPayPeriods ||
                    
                    HasPayPeriods.Equals(other.HasPayPeriods)
                ) && 
                (
                    AllowStudentsToAddPayPeriods == other.AllowStudentsToAddPayPeriods ||
                    
                    AllowStudentsToAddPayPeriods.Equals(other.AllowStudentsToAddPayPeriods)
                ) && 
                (
                    OrganizationId == other.OrganizationId ||
                    
                    OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    FormSubmissionId == other.FormSubmissionId ||
                    FormSubmissionId != null &&
                    FormSubmissionId.Equals(other.FormSubmissionId)
                ) && 
                (
                    FolderId == other.FolderId ||
                    FolderId != null &&
                    FolderId.Equals(other.FolderId)
                ) && 
                (
                    AccommodationsAvailable == other.AccommodationsAvailable ||
                    AccommodationsAvailable != null &&
                    AccommodationsAvailable.Equals(other.AccommodationsAvailable)
                ) && 
                (
                    MaxNumberOfHours == other.MaxNumberOfHours ||
                    MaxNumberOfHours != null &&
                    MaxNumberOfHours.Equals(other.MaxNumberOfHours)
                ) && 
                (
                    SpecificSkills == other.SpecificSkills ||
                    SpecificSkills != null &&
                    other.SpecificSkills != null &&
                    SpecificSkills.SequenceEqual(other.SpecificSkills)
                ) && 
                (
                    ExternalExperienceId == other.ExternalExperienceId ||
                    ExternalExperienceId != null &&
                    ExternalExperienceId.Equals(other.ExternalExperienceId)
                ) && 
                (
                    AvailableDistrictIds == other.AvailableDistrictIds ||
                    AvailableDistrictIds != null &&
                    other.AvailableDistrictIds != null &&
                    AvailableDistrictIds.SequenceEqual(other.AvailableDistrictIds)
                ) && 
                (
                    OpportunityGroups == other.OpportunityGroups ||
                    OpportunityGroups != null &&
                    other.OpportunityGroups != null &&
                    OpportunityGroups.SequenceEqual(other.OpportunityGroups)
                ) && 
                (
                    ReflectionFormId == other.ReflectionFormId ||
                    ReflectionFormId != null &&
                    ReflectionFormId.Equals(other.ReflectionFormId)
                ) && 
                (
                    LearningTargetId == other.LearningTargetId ||
                    LearningTargetId != null &&
                    LearningTargetId.Equals(other.LearningTargetId)
                ) && 
                (
                    GeneralSkills == other.GeneralSkills ||
                    GeneralSkills != null &&
                    other.GeneralSkills != null &&
                    GeneralSkills.SequenceEqual(other.GeneralSkills)
                ) && 
                (
                    AllowsTotalTimelogHoursSubmission == other.AllowsTotalTimelogHoursSubmission ||
                    
                    AllowsTotalTimelogHoursSubmission.Equals(other.AllowsTotalTimelogHoursSubmission)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReflectionFormApproval != null)
                    hashCode = hashCode * 59 + ReflectionFormApproval.GetHashCode();
                    if (ExperienceText != null)
                    hashCode = hashCode * 59 + ExperienceText.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (TagIds != null)
                    hashCode = hashCode * 59 + TagIds.GetHashCode();
                    if (NumberOfSpots != null)
                    hashCode = hashCode * 59 + NumberOfSpots.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (LocationId != null)
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowsOnExternalJobBoard.GetHashCode();
                    
                    hashCode = hashCode * 59 + ContactId.GetHashCode();
                    if (ClusterIds != null)
                    hashCode = hashCode * 59 + ClusterIds.GetHashCode();
                    if (ApplicationFormId != null)
                    hashCode = hashCode * 59 + ApplicationFormId.GetHashCode();
                    if (Licenses != null)
                    hashCode = hashCode * 59 + Licenses.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanGeoLog.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (AvailableSchoolIds != null)
                    hashCode = hashCode * 59 + AvailableSchoolIds.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasPayPeriods.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowStudentsToAddPayPeriods.GetHashCode();
                    
                    hashCode = hashCode * 59 + OrganizationId.GetHashCode();
                    if (FormSubmissionId != null)
                    hashCode = hashCode * 59 + FormSubmissionId.GetHashCode();
                    if (FolderId != null)
                    hashCode = hashCode * 59 + FolderId.GetHashCode();
                    if (AccommodationsAvailable != null)
                    hashCode = hashCode * 59 + AccommodationsAvailable.GetHashCode();
                    if (MaxNumberOfHours != null)
                    hashCode = hashCode * 59 + MaxNumberOfHours.GetHashCode();
                    if (SpecificSkills != null)
                    hashCode = hashCode * 59 + SpecificSkills.GetHashCode();
                    if (ExternalExperienceId != null)
                    hashCode = hashCode * 59 + ExternalExperienceId.GetHashCode();
                    if (AvailableDistrictIds != null)
                    hashCode = hashCode * 59 + AvailableDistrictIds.GetHashCode();
                    if (OpportunityGroups != null)
                    hashCode = hashCode * 59 + OpportunityGroups.GetHashCode();
                    if (ReflectionFormId != null)
                    hashCode = hashCode * 59 + ReflectionFormId.GetHashCode();
                    if (LearningTargetId != null)
                    hashCode = hashCode * 59 + LearningTargetId.GetHashCode();
                    if (GeneralSkills != null)
                    hashCode = hashCode * 59 + GeneralSkills.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowsTotalTimelogHoursSubmission.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PathwayOSCreateExperienceRequest left, PathwayOSCreateExperienceRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PathwayOSCreateExperienceRequest left, PathwayOSCreateExperienceRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
