/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CaseloadFilterRequest : IEquatable<CaseloadFilterRequest>
    {
        /// <summary>
        /// Gets or Sets GradeIds
        /// </summary>
        [Required]
        [DataMember(Name="gradeIds", EmitDefaultValue=false)]
        public List<long> GradeIds { get; set; }

        /// <summary>
        /// Gets or Sets SchoolIds
        /// </summary>
        [Required]
        [DataMember(Name="schoolIds", EmitDefaultValue=false)]
        public List<long> SchoolIds { get; set; }

        /// <summary>
        /// Gets or Sets DistrictIds
        /// </summary>
        [Required]
        [DataMember(Name="districtIds", EmitDefaultValue=false)]
        public List<long> DistrictIds { get; set; }

        /// <summary>
        /// Gets or Sets SubjectIds
        /// </summary>
        [Required]
        [DataMember(Name="subjectIds", EmitDefaultValue=false)]
        public List<long> SubjectIds { get; set; }

        /// <summary>
        /// Gets or Sets CourseIds
        /// </summary>
        [Required]
        [DataMember(Name="courseIds", EmitDefaultValue=false)]
        public List<long> CourseIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CaseloadFilterRequest {\n");
            sb.Append("  GradeIds: ").Append(GradeIds).Append("\n");
            sb.Append("  SchoolIds: ").Append(SchoolIds).Append("\n");
            sb.Append("  DistrictIds: ").Append(DistrictIds).Append("\n");
            sb.Append("  SubjectIds: ").Append(SubjectIds).Append("\n");
            sb.Append("  CourseIds: ").Append(CourseIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CaseloadFilterRequest)obj);
        }

        /// <summary>
        /// Returns true if CaseloadFilterRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CaseloadFilterRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CaseloadFilterRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GradeIds == other.GradeIds ||
                    GradeIds != null &&
                    other.GradeIds != null &&
                    GradeIds.SequenceEqual(other.GradeIds)
                ) && 
                (
                    SchoolIds == other.SchoolIds ||
                    SchoolIds != null &&
                    other.SchoolIds != null &&
                    SchoolIds.SequenceEqual(other.SchoolIds)
                ) && 
                (
                    DistrictIds == other.DistrictIds ||
                    DistrictIds != null &&
                    other.DistrictIds != null &&
                    DistrictIds.SequenceEqual(other.DistrictIds)
                ) && 
                (
                    SubjectIds == other.SubjectIds ||
                    SubjectIds != null &&
                    other.SubjectIds != null &&
                    SubjectIds.SequenceEqual(other.SubjectIds)
                ) && 
                (
                    CourseIds == other.CourseIds ||
                    CourseIds != null &&
                    other.CourseIds != null &&
                    CourseIds.SequenceEqual(other.CourseIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (GradeIds != null)
                    hashCode = hashCode * 59 + GradeIds.GetHashCode();
                    if (SchoolIds != null)
                    hashCode = hashCode * 59 + SchoolIds.GetHashCode();
                    if (DistrictIds != null)
                    hashCode = hashCode * 59 + DistrictIds.GetHashCode();
                    if (SubjectIds != null)
                    hashCode = hashCode * 59 + SubjectIds.GetHashCode();
                    if (CourseIds != null)
                    hashCode = hashCode * 59 + CourseIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CaseloadFilterRequest left, CaseloadFilterRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CaseloadFilterRequest left, CaseloadFilterRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
