/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdvancedCourseBadgeResponse : IEquatable<AdvancedCourseBadgeResponse>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets BadgeId
        /// </summary>
        [Required]
        [DataMember(Name="badge_id", EmitDefaultValue=true)]
        public long BadgeId { get; set; }

        /// <summary>
        /// Gets or Sets ConditionalGroupId
        /// </summary>
        [DataMember(Name="conditional_group_id", EmitDefaultValue=true)]
        public long? ConditionalGroupId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Criteria
        /// </summary>
        [Required]
        [DataMember(Name="criteria", EmitDefaultValue=false)]
        public AdvancedCourseBadgeCriteriaInformation Criteria { get; set; }

        /// <summary>
        /// Gets or Sets CustomFieldName
        /// </summary>
        [DataMember(Name="customFieldName", EmitDefaultValue=true)]
        public string CustomFieldName { get; set; }

        /// <summary>
        /// Gets or Sets Courses
        /// </summary>
        [Required]
        [DataMember(Name="courses", EmitDefaultValue=false)]
        public List<CourseDTO> Courses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdvancedCourseBadgeResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BadgeId: ").Append(BadgeId).Append("\n");
            sb.Append("  ConditionalGroupId: ").Append(ConditionalGroupId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Criteria: ").Append(Criteria).Append("\n");
            sb.Append("  CustomFieldName: ").Append(CustomFieldName).Append("\n");
            sb.Append("  Courses: ").Append(Courses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdvancedCourseBadgeResponse)obj);
        }

        /// <summary>
        /// Returns true if AdvancedCourseBadgeResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AdvancedCourseBadgeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdvancedCourseBadgeResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    BadgeId == other.BadgeId ||
                    
                    BadgeId.Equals(other.BadgeId)
                ) && 
                (
                    ConditionalGroupId == other.ConditionalGroupId ||
                    ConditionalGroupId != null &&
                    ConditionalGroupId.Equals(other.ConditionalGroupId)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Criteria == other.Criteria ||
                    Criteria != null &&
                    Criteria.Equals(other.Criteria)
                ) && 
                (
                    CustomFieldName == other.CustomFieldName ||
                    CustomFieldName != null &&
                    CustomFieldName.Equals(other.CustomFieldName)
                ) && 
                (
                    Courses == other.Courses ||
                    Courses != null &&
                    other.Courses != null &&
                    Courses.SequenceEqual(other.Courses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + BadgeId.GetHashCode();
                    if (ConditionalGroupId != null)
                    hashCode = hashCode * 59 + ConditionalGroupId.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Criteria != null)
                    hashCode = hashCode * 59 + Criteria.GetHashCode();
                    if (CustomFieldName != null)
                    hashCode = hashCode * 59 + CustomFieldName.GetHashCode();
                    if (Courses != null)
                    hashCode = hashCode * 59 + Courses.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdvancedCourseBadgeResponse left, AdvancedCourseBadgeResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdvancedCourseBadgeResponse left, AdvancedCourseBadgeResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
