/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DeleteFormResponse : IEquatable<DeleteFormResponse>
    {
        /// <summary>
        /// Gets or Sets AttachedToSettings
        /// </summary>
        [Required]
        [DataMember(Name="attachedToSettings", EmitDefaultValue=true)]
        public bool AttachedToSettings { get; set; }

        /// <summary>
        /// Gets or Sets HasBeenFilledOut
        /// </summary>
        [Required]
        [DataMember(Name="hasBeenFilledOut", EmitDefaultValue=true)]
        public bool HasBeenFilledOut { get; set; }

        /// <summary>
        /// Gets or Sets AttachedToDistrict
        /// </summary>
        [Required]
        [DataMember(Name="attachedToDistrict", EmitDefaultValue=true)]
        public bool AttachedToDistrict { get; set; }

        /// <summary>
        /// Gets or Sets AttachedToExperiences
        /// </summary>
        [Required]
        [DataMember(Name="attachedToExperiences", EmitDefaultValue=true)]
        public bool AttachedToExperiences { get; set; }

        /// <summary>
        /// Gets or Sets AttachedToActivities
        /// </summary>
        [Required]
        [DataMember(Name="attachedToActivities", EmitDefaultValue=true)]
        public bool AttachedToActivities { get; set; }

        /// <summary>
        /// Gets or Sets CanDeleteForm
        /// </summary>
        [Required]
        [DataMember(Name="canDeleteForm", EmitDefaultValue=true)]
        public bool CanDeleteForm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeleteFormResponse {\n");
            sb.Append("  AttachedToSettings: ").Append(AttachedToSettings).Append("\n");
            sb.Append("  HasBeenFilledOut: ").Append(HasBeenFilledOut).Append("\n");
            sb.Append("  AttachedToDistrict: ").Append(AttachedToDistrict).Append("\n");
            sb.Append("  AttachedToExperiences: ").Append(AttachedToExperiences).Append("\n");
            sb.Append("  AttachedToActivities: ").Append(AttachedToActivities).Append("\n");
            sb.Append("  CanDeleteForm: ").Append(CanDeleteForm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DeleteFormResponse)obj);
        }

        /// <summary>
        /// Returns true if DeleteFormResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of DeleteFormResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeleteFormResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AttachedToSettings == other.AttachedToSettings ||
                    
                    AttachedToSettings.Equals(other.AttachedToSettings)
                ) && 
                (
                    HasBeenFilledOut == other.HasBeenFilledOut ||
                    
                    HasBeenFilledOut.Equals(other.HasBeenFilledOut)
                ) && 
                (
                    AttachedToDistrict == other.AttachedToDistrict ||
                    
                    AttachedToDistrict.Equals(other.AttachedToDistrict)
                ) && 
                (
                    AttachedToExperiences == other.AttachedToExperiences ||
                    
                    AttachedToExperiences.Equals(other.AttachedToExperiences)
                ) && 
                (
                    AttachedToActivities == other.AttachedToActivities ||
                    
                    AttachedToActivities.Equals(other.AttachedToActivities)
                ) && 
                (
                    CanDeleteForm == other.CanDeleteForm ||
                    
                    CanDeleteForm.Equals(other.CanDeleteForm)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AttachedToSettings.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasBeenFilledOut.GetHashCode();
                    
                    hashCode = hashCode * 59 + AttachedToDistrict.GetHashCode();
                    
                    hashCode = hashCode * 59 + AttachedToExperiences.GetHashCode();
                    
                    hashCode = hashCode * 59 + AttachedToActivities.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanDeleteForm.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DeleteFormResponse left, DeleteFormResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DeleteFormResponse left, DeleteFormResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
