/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UpdateDistrictSuperUserAuthRequest : IEquatable<UpdateDistrictSuperUserAuthRequest>
    {
        /// <summary>
        /// Gets or Sets SamlMetadata
        /// </summary>
        [DataMember(Name="samlMetadata", EmitDefaultValue=true)]
        public string SamlMetadata { get; set; }

        /// <summary>
        /// Gets or Sets ClasslinkTenantId
        /// </summary>
        [DataMember(Name="classlinkTenantId", EmitDefaultValue=true)]
        public string ClasslinkTenantId { get; set; }

        /// <summary>
        /// Gets or Sets MicrosoftDomain
        /// </summary>
        [DataMember(Name="microsoftDomain", EmitDefaultValue=true)]
        public string MicrosoftDomain { get; set; }

        /// <summary>
        /// Gets or Sets GoogleDomain
        /// </summary>
        [DataMember(Name="googleDomain", EmitDefaultValue=true)]
        public string GoogleDomain { get; set; }

        /// <summary>
        /// Gets or Sets CleverDistrictId
        /// </summary>
        [DataMember(Name="cleverDistrictId", EmitDefaultValue=true)]
        public string CleverDistrictId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateDistrictSuperUserAuthRequest {\n");
            sb.Append("  SamlMetadata: ").Append(SamlMetadata).Append("\n");
            sb.Append("  ClasslinkTenantId: ").Append(ClasslinkTenantId).Append("\n");
            sb.Append("  MicrosoftDomain: ").Append(MicrosoftDomain).Append("\n");
            sb.Append("  GoogleDomain: ").Append(GoogleDomain).Append("\n");
            sb.Append("  CleverDistrictId: ").Append(CleverDistrictId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdateDistrictSuperUserAuthRequest)obj);
        }

        /// <summary>
        /// Returns true if UpdateDistrictSuperUserAuthRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateDistrictSuperUserAuthRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateDistrictSuperUserAuthRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SamlMetadata == other.SamlMetadata ||
                    SamlMetadata != null &&
                    SamlMetadata.Equals(other.SamlMetadata)
                ) && 
                (
                    ClasslinkTenantId == other.ClasslinkTenantId ||
                    ClasslinkTenantId != null &&
                    ClasslinkTenantId.Equals(other.ClasslinkTenantId)
                ) && 
                (
                    MicrosoftDomain == other.MicrosoftDomain ||
                    MicrosoftDomain != null &&
                    MicrosoftDomain.Equals(other.MicrosoftDomain)
                ) && 
                (
                    GoogleDomain == other.GoogleDomain ||
                    GoogleDomain != null &&
                    GoogleDomain.Equals(other.GoogleDomain)
                ) && 
                (
                    CleverDistrictId == other.CleverDistrictId ||
                    CleverDistrictId != null &&
                    CleverDistrictId.Equals(other.CleverDistrictId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SamlMetadata != null)
                    hashCode = hashCode * 59 + SamlMetadata.GetHashCode();
                    if (ClasslinkTenantId != null)
                    hashCode = hashCode * 59 + ClasslinkTenantId.GetHashCode();
                    if (MicrosoftDomain != null)
                    hashCode = hashCode * 59 + MicrosoftDomain.GetHashCode();
                    if (GoogleDomain != null)
                    hashCode = hashCode * 59 + GoogleDomain.GetHashCode();
                    if (CleverDistrictId != null)
                    hashCode = hashCode * 59 + CleverDistrictId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UpdateDistrictSuperUserAuthRequest left, UpdateDistrictSuperUserAuthRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpdateDistrictSuperUserAuthRequest left, UpdateDistrictSuperUserAuthRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
