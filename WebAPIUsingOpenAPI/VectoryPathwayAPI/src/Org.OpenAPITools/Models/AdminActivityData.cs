/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdminActivityData : IEquatable<AdminActivityData>
    {
        /// <summary>
        /// Gets or Sets ActivityTypeId
        /// </summary>
        [DataMember(Name="activity_type_id", EmitDefaultValue=true)]
        public long? ActivityTypeId { get; set; }

        /// <summary>
        /// Gets or Sets StudentReminderDays
        /// </summary>
        [DataMember(Name="studentReminderDays", EmitDefaultValue=true)]
        public long? StudentReminderDays { get; set; }

        /// <summary>
        /// Gets or Sets Owners
        /// </summary>
        [Required]
        [DataMember(Name="owners", EmitDefaultValue=false)]
        public List<long> Owners { get; set; }

        /// <summary>
        /// Gets or Sets AllowsResubmission
        /// </summary>
        [Required]
        [DataMember(Name="allowsResubmission", EmitDefaultValue=true)]
        public bool AllowsResubmission { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public ActivityActivityType Type { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationFormId
        /// </summary>
        [DataMember(Name="registration_form_id", EmitDefaultValue=true)]
        public long? RegistrationFormId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets FormId
        /// </summary>
        [DataMember(Name="form_id", EmitDefaultValue=true)]
        public long? FormId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationIds
        /// </summary>
        [Required]
        [DataMember(Name="organizationIds", EmitDefaultValue=false)]
        public List<long> OrganizationIds { get; set; }

        /// <summary>
        /// Gets or Sets AvailableUntil
        /// </summary>
        [DataMember(Name="availableUntil", EmitDefaultValue=true)]
        public DateTime? AvailableUntil { get; set; }

        /// <summary>
        /// Gets or Sets IsEvent
        /// </summary>
        [Required]
        [DataMember(Name="isEvent", EmitDefaultValue=true)]
        public bool IsEvent { get; set; }

        /// <summary>
        /// Gets or Sets VisibleForEveryone
        /// </summary>
        [Required]
        [DataMember(Name="visibleForEveryone", EmitDefaultValue=true)]
        public bool VisibleForEveryone { get; set; }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folder_id", EmitDefaultValue=true)]
        public long? FolderId { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalProcess
        /// </summary>
        [Required]
        [DataMember(Name="approvalProcess", EmitDefaultValue=true)]
        public long ApprovalProcess { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [Required]
        [DataMember(Name="visibility", EmitDefaultValue=false)]
        public string Visibility { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [Required]
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<Object> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets AppearsInMarketPlace
        /// </summary>
        [Required]
        [DataMember(Name="appearsInMarketPlace", EmitDefaultValue=true)]
        public bool AppearsInMarketPlace { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ContactIds
        /// </summary>
        [Required]
        [DataMember(Name="contactIds", EmitDefaultValue=false)]
        public List<long> ContactIds { get; set; }

        /// <summary>
        /// Gets or Sets Completions
        /// </summary>
        [Required]
        [DataMember(Name="completions", EmitDefaultValue=true)]
        public long Completions { get; set; }

        /// <summary>
        /// Gets or Sets MaxNumberRegistrations
        /// </summary>
        [DataMember(Name="maxNumberRegistrations", EmitDefaultValue=true)]
        public long? MaxNumberRegistrations { get; set; }

        /// <summary>
        /// Gets or Sets SponsorReminderDays
        /// </summary>
        [DataMember(Name="sponsorReminderDays", EmitDefaultValue=true)]
        public long? SponsorReminderDays { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IframeUrl
        /// </summary>
        [DataMember(Name="iframeUrl", EmitDefaultValue=true)]
        public string IframeUrl { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="dueDate", EmitDefaultValue=true)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets ExternalSponsorFormId
        /// </summary>
        [DataMember(Name="external_sponsor_form_id", EmitDefaultValue=true)]
        public long? ExternalSponsorFormId { get; set; }

        /// <summary>
        /// Gets or Sets CanRegister
        /// </summary>
        [Required]
        [DataMember(Name="canRegister", EmitDefaultValue=true)]
        public bool CanRegister { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminActivityData {\n");
            sb.Append("  ActivityTypeId: ").Append(ActivityTypeId).Append("\n");
            sb.Append("  StudentReminderDays: ").Append(StudentReminderDays).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  AllowsResubmission: ").Append(AllowsResubmission).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RegistrationFormId: ").Append(RegistrationFormId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  OrganizationIds: ").Append(OrganizationIds).Append("\n");
            sb.Append("  AvailableUntil: ").Append(AvailableUntil).Append("\n");
            sb.Append("  IsEvent: ").Append(IsEvent).Append("\n");
            sb.Append("  VisibleForEveryone: ").Append(VisibleForEveryone).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  ApprovalProcess: ").Append(ApprovalProcess).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  AppearsInMarketPlace: ").Append(AppearsInMarketPlace).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContactIds: ").Append(ContactIds).Append("\n");
            sb.Append("  Completions: ").Append(Completions).Append("\n");
            sb.Append("  MaxNumberRegistrations: ").Append(MaxNumberRegistrations).Append("\n");
            sb.Append("  SponsorReminderDays: ").Append(SponsorReminderDays).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IframeUrl: ").Append(IframeUrl).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  ExternalSponsorFormId: ").Append(ExternalSponsorFormId).Append("\n");
            sb.Append("  CanRegister: ").Append(CanRegister).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdminActivityData)obj);
        }

        /// <summary>
        /// Returns true if AdminActivityData instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminActivityData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminActivityData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ActivityTypeId == other.ActivityTypeId ||
                    ActivityTypeId != null &&
                    ActivityTypeId.Equals(other.ActivityTypeId)
                ) && 
                (
                    StudentReminderDays == other.StudentReminderDays ||
                    StudentReminderDays != null &&
                    StudentReminderDays.Equals(other.StudentReminderDays)
                ) && 
                (
                    Owners == other.Owners ||
                    Owners != null &&
                    other.Owners != null &&
                    Owners.SequenceEqual(other.Owners)
                ) && 
                (
                    AllowsResubmission == other.AllowsResubmission ||
                    
                    AllowsResubmission.Equals(other.AllowsResubmission)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    RegistrationFormId == other.RegistrationFormId ||
                    RegistrationFormId != null &&
                    RegistrationFormId.Equals(other.RegistrationFormId)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    FormId == other.FormId ||
                    FormId != null &&
                    FormId.Equals(other.FormId)
                ) && 
                (
                    OrganizationIds == other.OrganizationIds ||
                    OrganizationIds != null &&
                    other.OrganizationIds != null &&
                    OrganizationIds.SequenceEqual(other.OrganizationIds)
                ) && 
                (
                    AvailableUntil == other.AvailableUntil ||
                    AvailableUntil != null &&
                    AvailableUntil.Equals(other.AvailableUntil)
                ) && 
                (
                    IsEvent == other.IsEvent ||
                    
                    IsEvent.Equals(other.IsEvent)
                ) && 
                (
                    VisibleForEveryone == other.VisibleForEveryone ||
                    
                    VisibleForEveryone.Equals(other.VisibleForEveryone)
                ) && 
                (
                    FolderId == other.FolderId ||
                    FolderId != null &&
                    FolderId.Equals(other.FolderId)
                ) && 
                (
                    ApprovalProcess == other.ApprovalProcess ||
                    
                    ApprovalProcess.Equals(other.ApprovalProcess)
                ) && 
                (
                    Visibility == other.Visibility ||
                    Visibility != null &&
                    Visibility.Equals(other.Visibility)
                ) && 
                (
                    Attachments == other.Attachments ||
                    Attachments != null &&
                    other.Attachments != null &&
                    Attachments.SequenceEqual(other.Attachments)
                ) && 
                (
                    AppearsInMarketPlace == other.AppearsInMarketPlace ||
                    
                    AppearsInMarketPlace.Equals(other.AppearsInMarketPlace)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ContactIds == other.ContactIds ||
                    ContactIds != null &&
                    other.ContactIds != null &&
                    ContactIds.SequenceEqual(other.ContactIds)
                ) && 
                (
                    Completions == other.Completions ||
                    
                    Completions.Equals(other.Completions)
                ) && 
                (
                    MaxNumberRegistrations == other.MaxNumberRegistrations ||
                    MaxNumberRegistrations != null &&
                    MaxNumberRegistrations.Equals(other.MaxNumberRegistrations)
                ) && 
                (
                    SponsorReminderDays == other.SponsorReminderDays ||
                    SponsorReminderDays != null &&
                    SponsorReminderDays.Equals(other.SponsorReminderDays)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    IframeUrl == other.IframeUrl ||
                    IframeUrl != null &&
                    IframeUrl.Equals(other.IframeUrl)
                ) && 
                (
                    DueDate == other.DueDate ||
                    DueDate != null &&
                    DueDate.Equals(other.DueDate)
                ) && 
                (
                    ExternalSponsorFormId == other.ExternalSponsorFormId ||
                    ExternalSponsorFormId != null &&
                    ExternalSponsorFormId.Equals(other.ExternalSponsorFormId)
                ) && 
                (
                    CanRegister == other.CanRegister ||
                    
                    CanRegister.Equals(other.CanRegister)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ActivityTypeId != null)
                    hashCode = hashCode * 59 + ActivityTypeId.GetHashCode();
                    if (StudentReminderDays != null)
                    hashCode = hashCode * 59 + StudentReminderDays.GetHashCode();
                    if (Owners != null)
                    hashCode = hashCode * 59 + Owners.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowsResubmission.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (RegistrationFormId != null)
                    hashCode = hashCode * 59 + RegistrationFormId.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (FormId != null)
                    hashCode = hashCode * 59 + FormId.GetHashCode();
                    if (OrganizationIds != null)
                    hashCode = hashCode * 59 + OrganizationIds.GetHashCode();
                    if (AvailableUntil != null)
                    hashCode = hashCode * 59 + AvailableUntil.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsEvent.GetHashCode();
                    
                    hashCode = hashCode * 59 + VisibleForEveryone.GetHashCode();
                    if (FolderId != null)
                    hashCode = hashCode * 59 + FolderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApprovalProcess.GetHashCode();
                    if (Visibility != null)
                    hashCode = hashCode * 59 + Visibility.GetHashCode();
                    if (Attachments != null)
                    hashCode = hashCode * 59 + Attachments.GetHashCode();
                    
                    hashCode = hashCode * 59 + AppearsInMarketPlace.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ContactIds != null)
                    hashCode = hashCode * 59 + ContactIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + Completions.GetHashCode();
                    if (MaxNumberRegistrations != null)
                    hashCode = hashCode * 59 + MaxNumberRegistrations.GetHashCode();
                    if (SponsorReminderDays != null)
                    hashCode = hashCode * 59 + SponsorReminderDays.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (IframeUrl != null)
                    hashCode = hashCode * 59 + IframeUrl.GetHashCode();
                    if (DueDate != null)
                    hashCode = hashCode * 59 + DueDate.GetHashCode();
                    if (ExternalSponsorFormId != null)
                    hashCode = hashCode * 59 + ExternalSponsorFormId.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanRegister.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdminActivityData left, AdminActivityData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdminActivityData left, AdminActivityData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
