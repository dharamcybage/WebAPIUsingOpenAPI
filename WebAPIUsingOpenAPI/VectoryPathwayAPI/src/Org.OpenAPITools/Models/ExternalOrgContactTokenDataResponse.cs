/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ExternalOrgContactTokenDataResponse : IEquatable<ExternalOrgContactTokenDataResponse>
    {
        /// <summary>
        /// Gets or Sets ContactFields
        /// </summary>
        [DataMember(Name="contactFields", EmitDefaultValue=false)]
        public FormResponse ContactFields { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceFields
        /// </summary>
        [DataMember(Name="experienceFields", EmitDefaultValue=false)]
        public FormResponse ExperienceFields { get; set; }

        /// <summary>
        /// Gets or Sets OrgFields
        /// </summary>
        [DataMember(Name="orgFields", EmitDefaultValue=false)]
        public FormResponse OrgFields { get; set; }

        /// <summary>
        /// Gets or Sets LinkData
        /// </summary>
        [Required]
        [DataMember(Name="linkData", EmitDefaultValue=false)]
        public ExternalSubmissionLinkTokenDTO LinkData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalOrgContactTokenDataResponse {\n");
            sb.Append("  ContactFields: ").Append(ContactFields).Append("\n");
            sb.Append("  ExperienceFields: ").Append(ExperienceFields).Append("\n");
            sb.Append("  OrgFields: ").Append(OrgFields).Append("\n");
            sb.Append("  LinkData: ").Append(LinkData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExternalOrgContactTokenDataResponse)obj);
        }

        /// <summary>
        /// Returns true if ExternalOrgContactTokenDataResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ExternalOrgContactTokenDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalOrgContactTokenDataResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ContactFields == other.ContactFields ||
                    ContactFields != null &&
                    ContactFields.Equals(other.ContactFields)
                ) && 
                (
                    ExperienceFields == other.ExperienceFields ||
                    ExperienceFields != null &&
                    ExperienceFields.Equals(other.ExperienceFields)
                ) && 
                (
                    OrgFields == other.OrgFields ||
                    OrgFields != null &&
                    OrgFields.Equals(other.OrgFields)
                ) && 
                (
                    LinkData == other.LinkData ||
                    LinkData != null &&
                    LinkData.Equals(other.LinkData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ContactFields != null)
                    hashCode = hashCode * 59 + ContactFields.GetHashCode();
                    if (ExperienceFields != null)
                    hashCode = hashCode * 59 + ExperienceFields.GetHashCode();
                    if (OrgFields != null)
                    hashCode = hashCode * 59 + OrgFields.GetHashCode();
                    if (LinkData != null)
                    hashCode = hashCode * 59 + LinkData.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExternalOrgContactTokenDataResponse left, ExternalOrgContactTokenDataResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExternalOrgContactTokenDataResponse left, ExternalOrgContactTokenDataResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
