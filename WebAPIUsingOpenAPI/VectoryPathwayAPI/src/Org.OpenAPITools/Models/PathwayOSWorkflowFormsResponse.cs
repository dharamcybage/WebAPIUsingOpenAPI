/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PathwayOSWorkflowFormsResponse : IEquatable<PathwayOSWorkflowFormsResponse>
    {
        /// <summary>
        /// Gets or Sets Experience
        /// </summary>
        [Required]
        [DataMember(Name="experience", EmitDefaultValue=false)]
        public WorkflowExperience Experience { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowForm
        /// </summary>
        [Required]
        [DataMember(Name="workflowForm", EmitDefaultValue=false)]
        public WorkflowFormDTO WorkflowForm { get; set; }

        /// <summary>
        /// Gets or Sets HasStarted
        /// </summary>
        [Required]
        [DataMember(Name="hasStarted", EmitDefaultValue=true)]
        public bool HasStarted { get; set; }

        /// <summary>
        /// Gets or Sets FieldPermissions
        /// </summary>
        [Required]
        [DataMember(Name="fieldPermissions", EmitDefaultValue=false)]
        public List<WorkflowFormFieldPermissionDTO> FieldPermissions { get; set; }

        /// <summary>
        /// Gets or Sets SchoolApproverSigningOrders
        /// </summary>
        [Required]
        [DataMember(Name="schoolApproverSigningOrders", EmitDefaultValue=false)]
        public List<SchoolApproverSigningOrderDTO> SchoolApproverSigningOrders { get; set; }

        /// <summary>
        /// Gets or Sets ManuallyAddedWorkflowFormRecipients
        /// </summary>
        [Required]
        [DataMember(Name="manuallyAddedWorkflowFormRecipients", EmitDefaultValue=false)]
        public List<ManuallyAddedWorkflowFormRecipientDTO> ManuallyAddedWorkflowFormRecipients { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PathwayOSWorkflowFormsResponse {\n");
            sb.Append("  Experience: ").Append(Experience).Append("\n");
            sb.Append("  WorkflowForm: ").Append(WorkflowForm).Append("\n");
            sb.Append("  HasStarted: ").Append(HasStarted).Append("\n");
            sb.Append("  FieldPermissions: ").Append(FieldPermissions).Append("\n");
            sb.Append("  SchoolApproverSigningOrders: ").Append(SchoolApproverSigningOrders).Append("\n");
            sb.Append("  ManuallyAddedWorkflowFormRecipients: ").Append(ManuallyAddedWorkflowFormRecipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PathwayOSWorkflowFormsResponse)obj);
        }

        /// <summary>
        /// Returns true if PathwayOSWorkflowFormsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of PathwayOSWorkflowFormsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PathwayOSWorkflowFormsResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Experience == other.Experience ||
                    Experience != null &&
                    Experience.Equals(other.Experience)
                ) && 
                (
                    WorkflowForm == other.WorkflowForm ||
                    WorkflowForm != null &&
                    WorkflowForm.Equals(other.WorkflowForm)
                ) && 
                (
                    HasStarted == other.HasStarted ||
                    
                    HasStarted.Equals(other.HasStarted)
                ) && 
                (
                    FieldPermissions == other.FieldPermissions ||
                    FieldPermissions != null &&
                    other.FieldPermissions != null &&
                    FieldPermissions.SequenceEqual(other.FieldPermissions)
                ) && 
                (
                    SchoolApproverSigningOrders == other.SchoolApproverSigningOrders ||
                    SchoolApproverSigningOrders != null &&
                    other.SchoolApproverSigningOrders != null &&
                    SchoolApproverSigningOrders.SequenceEqual(other.SchoolApproverSigningOrders)
                ) && 
                (
                    ManuallyAddedWorkflowFormRecipients == other.ManuallyAddedWorkflowFormRecipients ||
                    ManuallyAddedWorkflowFormRecipients != null &&
                    other.ManuallyAddedWorkflowFormRecipients != null &&
                    ManuallyAddedWorkflowFormRecipients.SequenceEqual(other.ManuallyAddedWorkflowFormRecipients)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Experience != null)
                    hashCode = hashCode * 59 + Experience.GetHashCode();
                    if (WorkflowForm != null)
                    hashCode = hashCode * 59 + WorkflowForm.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasStarted.GetHashCode();
                    if (FieldPermissions != null)
                    hashCode = hashCode * 59 + FieldPermissions.GetHashCode();
                    if (SchoolApproverSigningOrders != null)
                    hashCode = hashCode * 59 + SchoolApproverSigningOrders.GetHashCode();
                    if (ManuallyAddedWorkflowFormRecipients != null)
                    hashCode = hashCode * 59 + ManuallyAddedWorkflowFormRecipients.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PathwayOSWorkflowFormsResponse left, PathwayOSWorkflowFormsResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PathwayOSWorkflowFormsResponse left, PathwayOSWorkflowFormsResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
