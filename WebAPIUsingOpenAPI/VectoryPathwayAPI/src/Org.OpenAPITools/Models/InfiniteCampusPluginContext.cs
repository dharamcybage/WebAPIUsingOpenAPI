/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InfiniteCampusPluginContext : IEquatable<InfiniteCampusPluginContext>
    {
        /// <summary>
        /// Gets or Sets NationalTestCodes
        /// </summary>
        [Required]
        [DataMember(Name="nationalTestCodes", EmitDefaultValue=false)]
        public List<InfiniteCampusPluginContextNationalTestCode> NationalTestCodes { get; set; }

        /// <summary>
        /// Gets or Sets SchoolIds
        /// </summary>
        [Required]
        [DataMember(Name="schoolIds", EmitDefaultValue=false)]
        public List<string> SchoolIds { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [Required]
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets CreditName
        /// </summary>
        [DataMember(Name="creditName", EmitDefaultValue=true)]
        public string CreditName { get; set; }

        /// <summary>
        /// Gets or Sets TestSubjectAreas
        /// </summary>
        [Required]
        [DataMember(Name="testSubjectAreas", EmitDefaultValue=false)]
        public List<InfiniteCampusPluginContextTestSubjectArea> TestSubjectAreas { get; set; }

        /// <summary>
        /// Gets or Sets NumYearsHistory
        /// </summary>
        [Required]
        [DataMember(Name="numYearsHistory", EmitDefaultValue=true)]
        public long NumYearsHistory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InfiniteCampusPluginContext {\n");
            sb.Append("  NationalTestCodes: ").Append(NationalTestCodes).Append("\n");
            sb.Append("  SchoolIds: ").Append(SchoolIds).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  CreditName: ").Append(CreditName).Append("\n");
            sb.Append("  TestSubjectAreas: ").Append(TestSubjectAreas).Append("\n");
            sb.Append("  NumYearsHistory: ").Append(NumYearsHistory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InfiniteCampusPluginContext)obj);
        }

        /// <summary>
        /// Returns true if InfiniteCampusPluginContext instances are equal
        /// </summary>
        /// <param name="other">Instance of InfiniteCampusPluginContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InfiniteCampusPluginContext other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NationalTestCodes == other.NationalTestCodes ||
                    NationalTestCodes != null &&
                    other.NationalTestCodes != null &&
                    NationalTestCodes.SequenceEqual(other.NationalTestCodes)
                ) && 
                (
                    SchoolIds == other.SchoolIds ||
                    SchoolIds != null &&
                    other.SchoolIds != null &&
                    SchoolIds.SequenceEqual(other.SchoolIds)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                ) && 
                (
                    CreditName == other.CreditName ||
                    CreditName != null &&
                    CreditName.Equals(other.CreditName)
                ) && 
                (
                    TestSubjectAreas == other.TestSubjectAreas ||
                    TestSubjectAreas != null &&
                    other.TestSubjectAreas != null &&
                    TestSubjectAreas.SequenceEqual(other.TestSubjectAreas)
                ) && 
                (
                    NumYearsHistory == other.NumYearsHistory ||
                    
                    NumYearsHistory.Equals(other.NumYearsHistory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NationalTestCodes != null)
                    hashCode = hashCode * 59 + NationalTestCodes.GetHashCode();
                    if (SchoolIds != null)
                    hashCode = hashCode * 59 + SchoolIds.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                    if (CreditName != null)
                    hashCode = hashCode * 59 + CreditName.GetHashCode();
                    if (TestSubjectAreas != null)
                    hashCode = hashCode * 59 + TestSubjectAreas.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumYearsHistory.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InfiniteCampusPluginContext left, InfiniteCampusPluginContext right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InfiniteCampusPluginContext left, InfiniteCampusPluginContext right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
