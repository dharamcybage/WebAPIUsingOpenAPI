/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OverduePayPeriodDashboardResponse : IEquatable<OverduePayPeriodDashboardResponse>
    {
        /// <summary>
        /// Gets or Sets ExperienceId
        /// </summary>
        [Required]
        [DataMember(Name="experienceId", EmitDefaultValue=true)]
        public long ExperienceId { get; set; }

        /// <summary>
        /// Gets or Sets StudentFirstName
        /// </summary>
        [Required]
        [DataMember(Name="studentFirstName", EmitDefaultValue=false)]
        public string StudentFirstName { get; set; }

        /// <summary>
        /// Gets or Sets StudentEmail
        /// </summary>
        [Required]
        [DataMember(Name="studentEmail", EmitDefaultValue=false)]
        public string StudentEmail { get; set; }

        /// <summary>
        /// Gets or Sets StudentId
        /// </summary>
        [DataMember(Name="studentId", EmitDefaultValue=true)]
        public string StudentId { get; set; }

        /// <summary>
        /// Gets or Sets StudentSchool
        /// </summary>
        [DataMember(Name="studentSchool", EmitDefaultValue=true)]
        public string StudentSchool { get; set; }

        /// <summary>
        /// Gets or Sets ShiftStart
        /// </summary>
        [Required]
        [DataMember(Name="shiftStart", EmitDefaultValue=false)]
        public DateTime ShiftStart { get; set; }

        /// <summary>
        /// Gets or Sets StudentLastName
        /// </summary>
        [Required]
        [DataMember(Name="studentLastName", EmitDefaultValue=false)]
        public string StudentLastName { get; set; }

        /// <summary>
        /// Gets or Sets ShiftEnd
        /// </summary>
        [Required]
        [DataMember(Name="shiftEnd", EmitDefaultValue=false)]
        public DateTime ShiftEnd { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceName
        /// </summary>
        [Required]
        [DataMember(Name="experienceName", EmitDefaultValue=false)]
        public string ExperienceName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OverduePayPeriodDashboardResponse {\n");
            sb.Append("  ExperienceId: ").Append(ExperienceId).Append("\n");
            sb.Append("  StudentFirstName: ").Append(StudentFirstName).Append("\n");
            sb.Append("  StudentEmail: ").Append(StudentEmail).Append("\n");
            sb.Append("  StudentId: ").Append(StudentId).Append("\n");
            sb.Append("  StudentSchool: ").Append(StudentSchool).Append("\n");
            sb.Append("  ShiftStart: ").Append(ShiftStart).Append("\n");
            sb.Append("  StudentLastName: ").Append(StudentLastName).Append("\n");
            sb.Append("  ShiftEnd: ").Append(ShiftEnd).Append("\n");
            sb.Append("  ExperienceName: ").Append(ExperienceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OverduePayPeriodDashboardResponse)obj);
        }

        /// <summary>
        /// Returns true if OverduePayPeriodDashboardResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of OverduePayPeriodDashboardResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OverduePayPeriodDashboardResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExperienceId == other.ExperienceId ||
                    
                    ExperienceId.Equals(other.ExperienceId)
                ) && 
                (
                    StudentFirstName == other.StudentFirstName ||
                    StudentFirstName != null &&
                    StudentFirstName.Equals(other.StudentFirstName)
                ) && 
                (
                    StudentEmail == other.StudentEmail ||
                    StudentEmail != null &&
                    StudentEmail.Equals(other.StudentEmail)
                ) && 
                (
                    StudentId == other.StudentId ||
                    StudentId != null &&
                    StudentId.Equals(other.StudentId)
                ) && 
                (
                    StudentSchool == other.StudentSchool ||
                    StudentSchool != null &&
                    StudentSchool.Equals(other.StudentSchool)
                ) && 
                (
                    ShiftStart == other.ShiftStart ||
                    ShiftStart != null &&
                    ShiftStart.Equals(other.ShiftStart)
                ) && 
                (
                    StudentLastName == other.StudentLastName ||
                    StudentLastName != null &&
                    StudentLastName.Equals(other.StudentLastName)
                ) && 
                (
                    ShiftEnd == other.ShiftEnd ||
                    ShiftEnd != null &&
                    ShiftEnd.Equals(other.ShiftEnd)
                ) && 
                (
                    ExperienceName == other.ExperienceName ||
                    ExperienceName != null &&
                    ExperienceName.Equals(other.ExperienceName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ExperienceId.GetHashCode();
                    if (StudentFirstName != null)
                    hashCode = hashCode * 59 + StudentFirstName.GetHashCode();
                    if (StudentEmail != null)
                    hashCode = hashCode * 59 + StudentEmail.GetHashCode();
                    if (StudentId != null)
                    hashCode = hashCode * 59 + StudentId.GetHashCode();
                    if (StudentSchool != null)
                    hashCode = hashCode * 59 + StudentSchool.GetHashCode();
                    if (ShiftStart != null)
                    hashCode = hashCode * 59 + ShiftStart.GetHashCode();
                    if (StudentLastName != null)
                    hashCode = hashCode * 59 + StudentLastName.GetHashCode();
                    if (ShiftEnd != null)
                    hashCode = hashCode * 59 + ShiftEnd.GetHashCode();
                    if (ExperienceName != null)
                    hashCode = hashCode * 59 + ExperienceName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OverduePayPeriodDashboardResponse left, OverduePayPeriodDashboardResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OverduePayPeriodDashboardResponse left, OverduePayPeriodDashboardResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
