/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ParchmentRequestDTO : IEquatable<ParchmentRequestDTO>
    {
        /// <summary>
        /// Gets or Sets StandaloneDistrictId
        /// </summary>
        [DataMember(Name="standalone_district_id", EmitDefaultValue=true)]
        public long? StandaloneDistrictId { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deletedAt", EmitDefaultValue=true)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [Required]
        [DataMember(Name="user_id", EmitDefaultValue=true)]
        public long UserId { get; set; }

        /// <summary>
        /// Gets or Sets ConclusionText
        /// </summary>
        [Required]
        [DataMember(Name="conclusionText", EmitDefaultValue=false)]
        public string ConclusionText { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets RequestTrackingId
        /// </summary>
        [Required]
        [DataMember(Name="requestTrackingId", EmitDefaultValue=false)]
        public string RequestTrackingId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TotalTokensRequired
        /// </summary>
        [Required]
        [DataMember(Name="totalTokensRequired", EmitDefaultValue=true)]
        public long TotalTokensRequired { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public long Status { get; set; }

        /// <summary>
        /// Gets or Sets IntroText
        /// </summary>
        [Required]
        [DataMember(Name="introText", EmitDefaultValue=false)]
        public string IntroText { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfStandaloneTokensAssigned
        /// </summary>
        [DataMember(Name="numberOfStandaloneTokensAssigned", EmitDefaultValue=true)]
        public long? NumberOfStandaloneTokensAssigned { get; set; }

        /// <summary>
        /// Gets or Sets BatchTokenSetId
        /// </summary>
        [DataMember(Name="batch_token_set_id", EmitDefaultValue=true)]
        public long? BatchTokenSetId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentUrl
        /// </summary>
        [Required]
        [DataMember(Name="documentUrl", EmitDefaultValue=false)]
        public string DocumentUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParchmentRequestDTO {\n");
            sb.Append("  StandaloneDistrictId: ").Append(StandaloneDistrictId).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ConclusionText: ").Append(ConclusionText).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RequestTrackingId: ").Append(RequestTrackingId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TotalTokensRequired: ").Append(TotalTokensRequired).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IntroText: ").Append(IntroText).Append("\n");
            sb.Append("  NumberOfStandaloneTokensAssigned: ").Append(NumberOfStandaloneTokensAssigned).Append("\n");
            sb.Append("  BatchTokenSetId: ").Append(BatchTokenSetId).Append("\n");
            sb.Append("  DocumentUrl: ").Append(DocumentUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ParchmentRequestDTO)obj);
        }

        /// <summary>
        /// Returns true if ParchmentRequestDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ParchmentRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParchmentRequestDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StandaloneDistrictId == other.StandaloneDistrictId ||
                    StandaloneDistrictId != null &&
                    StandaloneDistrictId.Equals(other.StandaloneDistrictId)
                ) && 
                (
                    DeletedAt == other.DeletedAt ||
                    DeletedAt != null &&
                    DeletedAt.Equals(other.DeletedAt)
                ) && 
                (
                    UserId == other.UserId ||
                    
                    UserId.Equals(other.UserId)
                ) && 
                (
                    ConclusionText == other.ConclusionText ||
                    ConclusionText != null &&
                    ConclusionText.Equals(other.ConclusionText)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    RequestTrackingId == other.RequestTrackingId ||
                    RequestTrackingId != null &&
                    RequestTrackingId.Equals(other.RequestTrackingId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    TotalTokensRequired == other.TotalTokensRequired ||
                    
                    TotalTokensRequired.Equals(other.TotalTokensRequired)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    IntroText == other.IntroText ||
                    IntroText != null &&
                    IntroText.Equals(other.IntroText)
                ) && 
                (
                    NumberOfStandaloneTokensAssigned == other.NumberOfStandaloneTokensAssigned ||
                    NumberOfStandaloneTokensAssigned != null &&
                    NumberOfStandaloneTokensAssigned.Equals(other.NumberOfStandaloneTokensAssigned)
                ) && 
                (
                    BatchTokenSetId == other.BatchTokenSetId ||
                    BatchTokenSetId != null &&
                    BatchTokenSetId.Equals(other.BatchTokenSetId)
                ) && 
                (
                    DocumentUrl == other.DocumentUrl ||
                    DocumentUrl != null &&
                    DocumentUrl.Equals(other.DocumentUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StandaloneDistrictId != null)
                    hashCode = hashCode * 59 + StandaloneDistrictId.GetHashCode();
                    if (DeletedAt != null)
                    hashCode = hashCode * 59 + DeletedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (ConclusionText != null)
                    hashCode = hashCode * 59 + ConclusionText.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (RequestTrackingId != null)
                    hashCode = hashCode * 59 + RequestTrackingId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalTokensRequired.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (IntroText != null)
                    hashCode = hashCode * 59 + IntroText.GetHashCode();
                    if (NumberOfStandaloneTokensAssigned != null)
                    hashCode = hashCode * 59 + NumberOfStandaloneTokensAssigned.GetHashCode();
                    if (BatchTokenSetId != null)
                    hashCode = hashCode * 59 + BatchTokenSetId.GetHashCode();
                    if (DocumentUrl != null)
                    hashCode = hashCode * 59 + DocumentUrl.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ParchmentRequestDTO left, ParchmentRequestDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ParchmentRequestDTO left, ParchmentRequestDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
