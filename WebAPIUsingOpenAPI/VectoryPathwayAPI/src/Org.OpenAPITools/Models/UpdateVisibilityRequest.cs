/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UpdateVisibilityRequest : IEquatable<UpdateVisibilityRequest>
    {
        /// <summary>
        /// Gets or Sets VisibleActivities
        /// </summary>
        [Required]
        [DataMember(Name="visibleActivities", EmitDefaultValue=false)]
        public List<long> VisibleActivities { get; set; }

        /// <summary>
        /// Gets or Sets VisibleForms
        /// </summary>
        [Required]
        [DataMember(Name="visibleForms", EmitDefaultValue=false)]
        public List<long> VisibleForms { get; set; }

        /// <summary>
        /// Gets or Sets HiddenForms
        /// </summary>
        [Required]
        [DataMember(Name="hiddenForms", EmitDefaultValue=false)]
        public List<long> HiddenForms { get; set; }

        /// <summary>
        /// Gets or Sets HiddenActivities
        /// </summary>
        [Required]
        [DataMember(Name="hiddenActivities", EmitDefaultValue=false)]
        public List<long> HiddenActivities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateVisibilityRequest {\n");
            sb.Append("  VisibleActivities: ").Append(VisibleActivities).Append("\n");
            sb.Append("  VisibleForms: ").Append(VisibleForms).Append("\n");
            sb.Append("  HiddenForms: ").Append(HiddenForms).Append("\n");
            sb.Append("  HiddenActivities: ").Append(HiddenActivities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdateVisibilityRequest)obj);
        }

        /// <summary>
        /// Returns true if UpdateVisibilityRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateVisibilityRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateVisibilityRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VisibleActivities == other.VisibleActivities ||
                    VisibleActivities != null &&
                    other.VisibleActivities != null &&
                    VisibleActivities.SequenceEqual(other.VisibleActivities)
                ) && 
                (
                    VisibleForms == other.VisibleForms ||
                    VisibleForms != null &&
                    other.VisibleForms != null &&
                    VisibleForms.SequenceEqual(other.VisibleForms)
                ) && 
                (
                    HiddenForms == other.HiddenForms ||
                    HiddenForms != null &&
                    other.HiddenForms != null &&
                    HiddenForms.SequenceEqual(other.HiddenForms)
                ) && 
                (
                    HiddenActivities == other.HiddenActivities ||
                    HiddenActivities != null &&
                    other.HiddenActivities != null &&
                    HiddenActivities.SequenceEqual(other.HiddenActivities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VisibleActivities != null)
                    hashCode = hashCode * 59 + VisibleActivities.GetHashCode();
                    if (VisibleForms != null)
                    hashCode = hashCode * 59 + VisibleForms.GetHashCode();
                    if (HiddenForms != null)
                    hashCode = hashCode * 59 + HiddenForms.GetHashCode();
                    if (HiddenActivities != null)
                    hashCode = hashCode * 59 + HiddenActivities.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UpdateVisibilityRequest left, UpdateVisibilityRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpdateVisibilityRequest left, UpdateVisibilityRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
