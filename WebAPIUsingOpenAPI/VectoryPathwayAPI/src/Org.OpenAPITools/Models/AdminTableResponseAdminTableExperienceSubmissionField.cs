/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdminTableResponseAdminTableExperienceSubmissionField : IEquatable<AdminTableResponseAdminTableExperienceSubmissionField>
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public long Type { get; set; }

        /// <summary>
        /// Gets or Sets AttachedValue
        /// </summary>
        [DataMember(Name="attachedValue", EmitDefaultValue=true)]
        public string AttachedValue { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="values", EmitDefaultValue=true)]
        public List<string> Values { get; set; }

        /// <summary>
        /// Gets or Sets FormFieldId
        /// </summary>
        [Required]
        [DataMember(Name="formFieldId", EmitDefaultValue=true)]
        public long FormFieldId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminTableResponseAdminTableExperienceSubmissionField {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AttachedValue: ").Append(AttachedValue).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  FormFieldId: ").Append(FormFieldId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdminTableResponseAdminTableExperienceSubmissionField)obj);
        }

        /// <summary>
        /// Returns true if AdminTableResponseAdminTableExperienceSubmissionField instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminTableResponseAdminTableExperienceSubmissionField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminTableResponseAdminTableExperienceSubmissionField other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    AttachedValue == other.AttachedValue ||
                    AttachedValue != null &&
                    AttachedValue.Equals(other.AttachedValue)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    Values == other.Values ||
                    Values != null &&
                    other.Values != null &&
                    Values.SequenceEqual(other.Values)
                ) && 
                (
                    FormFieldId == other.FormFieldId ||
                    
                    FormFieldId.Equals(other.FormFieldId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (AttachedValue != null)
                    hashCode = hashCode * 59 + AttachedValue.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (Values != null)
                    hashCode = hashCode * 59 + Values.GetHashCode();
                    
                    hashCode = hashCode * 59 + FormFieldId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdminTableResponseAdminTableExperienceSubmissionField left, AdminTableResponseAdminTableExperienceSubmissionField right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdminTableResponseAdminTableExperienceSubmissionField left, AdminTableResponseAdminTableExperienceSubmissionField right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
