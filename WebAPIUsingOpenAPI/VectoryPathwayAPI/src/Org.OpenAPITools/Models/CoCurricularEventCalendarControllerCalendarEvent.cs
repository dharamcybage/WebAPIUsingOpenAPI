/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CoCurricularEventCalendarControllerCalendarEvent : IEquatable<CoCurricularEventCalendarControllerCalendarEvent>
    {
        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [Required]
        [DataMember(Name="start", EmitDefaultValue=false)]
        public DateTime Start { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [Required]
        [DataMember(Name="end", EmitDefaultValue=false)]
        public DateTime End { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public long Type { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [Required]
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets AllDay
        /// </summary>
        [Required]
        [DataMember(Name="allDay", EmitDefaultValue=true)]
        public bool AllDay { get; set; }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [DataMember(Name="eventId", EmitDefaultValue=true)]
        public long? EventId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoCurricularEventCalendarControllerCalendarEvent {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  AllDay: ").Append(AllDay).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CoCurricularEventCalendarControllerCalendarEvent)obj);
        }

        /// <summary>
        /// Returns true if CoCurricularEventCalendarControllerCalendarEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of CoCurricularEventCalendarControllerCalendarEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoCurricularEventCalendarControllerCalendarEvent other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Start == other.Start ||
                    Start != null &&
                    Start.Equals(other.Start)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    End == other.End ||
                    End != null &&
                    End.Equals(other.End)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    AllDay == other.AllDay ||
                    
                    AllDay.Equals(other.AllDay)
                ) && 
                (
                    EventId == other.EventId ||
                    EventId != null &&
                    EventId.Equals(other.EventId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Start != null)
                    hashCode = hashCode * 59 + Start.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (End != null)
                    hashCode = hashCode * 59 + End.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllDay.GetHashCode();
                    if (EventId != null)
                    hashCode = hashCode * 59 + EventId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CoCurricularEventCalendarControllerCalendarEvent left, CoCurricularEventCalendarControllerCalendarEvent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CoCurricularEventCalendarControllerCalendarEvent left, CoCurricularEventCalendarControllerCalendarEvent right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
