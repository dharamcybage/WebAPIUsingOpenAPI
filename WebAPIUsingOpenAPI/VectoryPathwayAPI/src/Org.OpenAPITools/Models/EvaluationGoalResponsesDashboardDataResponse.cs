/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EvaluationGoalResponsesDashboardDataResponse : IEquatable<EvaluationGoalResponsesDashboardDataResponse>
    {
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [Required]
        [DataMember(Name="userId", EmitDefaultValue=true)]
        public long UserId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationContactEmail
        /// </summary>
        [DataMember(Name="organizationContactEmail", EmitDefaultValue=true)]
        public string OrganizationContactEmail { get; set; }

        /// <summary>
        /// Gets or Sets EvaluatorContact
        /// </summary>
        [DataMember(Name="evaluatorContact", EmitDefaultValue=true)]
        public string EvaluatorContact { get; set; }

        /// <summary>
        /// Gets or Sets SchoolName
        /// </summary>
        [DataMember(Name="schoolName", EmitDefaultValue=true)]
        public string SchoolName { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationEventDate
        /// </summary>
        [DataMember(Name="evaluationEventDate", EmitDefaultValue=true)]
        public DateTime? EvaluationEventDate { get; set; }

        /// <summary>
        /// Gets or Sets StudentId
        /// </summary>
        [DataMember(Name="studentId", EmitDefaultValue=true)]
        public string StudentId { get; set; }

        /// <summary>
        /// Gets or Sets Submissions
        /// </summary>
        [Required]
        [DataMember(Name="submissions", EmitDefaultValue=false)]
        public List<EvaluationGoalResponsesDashboardDataResponseEvaluationSubmissionDTO> Submissions { get; set; }

        /// <summary>
        /// Gets or Sets EventNumber
        /// </summary>
        [DataMember(Name="eventNumber", EmitDefaultValue=true)]
        public long? EventNumber { get; set; }

        /// <summary>
        /// Gets or Sets OverallComments
        /// </summary>
        [DataMember(Name="overallComments", EmitDefaultValue=true)]
        public string OverallComments { get; set; }

        /// <summary>
        /// Gets or Sets StudentLastName
        /// </summary>
        [Required]
        [DataMember(Name="studentLastName", EmitDefaultValue=false)]
        public string StudentLastName { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationName
        /// </summary>
        [Required]
        [DataMember(Name="organizationName", EmitDefaultValue=false)]
        public string OrganizationName { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceName
        /// </summary>
        [Required]
        [DataMember(Name="experienceName", EmitDefaultValue=false)]
        public string ExperienceName { get; set; }

        /// <summary>
        /// Gets or Sets StudentFirstName
        /// </summary>
        [Required]
        [DataMember(Name="studentFirstName", EmitDefaultValue=false)]
        public string StudentFirstName { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationContactPhone
        /// </summary>
        [DataMember(Name="organizationContactPhone", EmitDefaultValue=true)]
        public string OrganizationContactPhone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvaluationGoalResponsesDashboardDataResponse {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  OrganizationContactEmail: ").Append(OrganizationContactEmail).Append("\n");
            sb.Append("  EvaluatorContact: ").Append(EvaluatorContact).Append("\n");
            sb.Append("  SchoolName: ").Append(SchoolName).Append("\n");
            sb.Append("  EvaluationEventDate: ").Append(EvaluationEventDate).Append("\n");
            sb.Append("  StudentId: ").Append(StudentId).Append("\n");
            sb.Append("  Submissions: ").Append(Submissions).Append("\n");
            sb.Append("  EventNumber: ").Append(EventNumber).Append("\n");
            sb.Append("  OverallComments: ").Append(OverallComments).Append("\n");
            sb.Append("  StudentLastName: ").Append(StudentLastName).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  ExperienceName: ").Append(ExperienceName).Append("\n");
            sb.Append("  StudentFirstName: ").Append(StudentFirstName).Append("\n");
            sb.Append("  OrganizationContactPhone: ").Append(OrganizationContactPhone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EvaluationGoalResponsesDashboardDataResponse)obj);
        }

        /// <summary>
        /// Returns true if EvaluationGoalResponsesDashboardDataResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of EvaluationGoalResponsesDashboardDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvaluationGoalResponsesDashboardDataResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserId == other.UserId ||
                    
                    UserId.Equals(other.UserId)
                ) && 
                (
                    OrganizationContactEmail == other.OrganizationContactEmail ||
                    OrganizationContactEmail != null &&
                    OrganizationContactEmail.Equals(other.OrganizationContactEmail)
                ) && 
                (
                    EvaluatorContact == other.EvaluatorContact ||
                    EvaluatorContact != null &&
                    EvaluatorContact.Equals(other.EvaluatorContact)
                ) && 
                (
                    SchoolName == other.SchoolName ||
                    SchoolName != null &&
                    SchoolName.Equals(other.SchoolName)
                ) && 
                (
                    EvaluationEventDate == other.EvaluationEventDate ||
                    EvaluationEventDate != null &&
                    EvaluationEventDate.Equals(other.EvaluationEventDate)
                ) && 
                (
                    StudentId == other.StudentId ||
                    StudentId != null &&
                    StudentId.Equals(other.StudentId)
                ) && 
                (
                    Submissions == other.Submissions ||
                    Submissions != null &&
                    other.Submissions != null &&
                    Submissions.SequenceEqual(other.Submissions)
                ) && 
                (
                    EventNumber == other.EventNumber ||
                    EventNumber != null &&
                    EventNumber.Equals(other.EventNumber)
                ) && 
                (
                    OverallComments == other.OverallComments ||
                    OverallComments != null &&
                    OverallComments.Equals(other.OverallComments)
                ) && 
                (
                    StudentLastName == other.StudentLastName ||
                    StudentLastName != null &&
                    StudentLastName.Equals(other.StudentLastName)
                ) && 
                (
                    OrganizationName == other.OrganizationName ||
                    OrganizationName != null &&
                    OrganizationName.Equals(other.OrganizationName)
                ) && 
                (
                    ExperienceName == other.ExperienceName ||
                    ExperienceName != null &&
                    ExperienceName.Equals(other.ExperienceName)
                ) && 
                (
                    StudentFirstName == other.StudentFirstName ||
                    StudentFirstName != null &&
                    StudentFirstName.Equals(other.StudentFirstName)
                ) && 
                (
                    OrganizationContactPhone == other.OrganizationContactPhone ||
                    OrganizationContactPhone != null &&
                    OrganizationContactPhone.Equals(other.OrganizationContactPhone)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (OrganizationContactEmail != null)
                    hashCode = hashCode * 59 + OrganizationContactEmail.GetHashCode();
                    if (EvaluatorContact != null)
                    hashCode = hashCode * 59 + EvaluatorContact.GetHashCode();
                    if (SchoolName != null)
                    hashCode = hashCode * 59 + SchoolName.GetHashCode();
                    if (EvaluationEventDate != null)
                    hashCode = hashCode * 59 + EvaluationEventDate.GetHashCode();
                    if (StudentId != null)
                    hashCode = hashCode * 59 + StudentId.GetHashCode();
                    if (Submissions != null)
                    hashCode = hashCode * 59 + Submissions.GetHashCode();
                    if (EventNumber != null)
                    hashCode = hashCode * 59 + EventNumber.GetHashCode();
                    if (OverallComments != null)
                    hashCode = hashCode * 59 + OverallComments.GetHashCode();
                    if (StudentLastName != null)
                    hashCode = hashCode * 59 + StudentLastName.GetHashCode();
                    if (OrganizationName != null)
                    hashCode = hashCode * 59 + OrganizationName.GetHashCode();
                    if (ExperienceName != null)
                    hashCode = hashCode * 59 + ExperienceName.GetHashCode();
                    if (StudentFirstName != null)
                    hashCode = hashCode * 59 + StudentFirstName.GetHashCode();
                    if (OrganizationContactPhone != null)
                    hashCode = hashCode * 59 + OrganizationContactPhone.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EvaluationGoalResponsesDashboardDataResponse left, EvaluationGoalResponsesDashboardDataResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EvaluationGoalResponsesDashboardDataResponse left, EvaluationGoalResponsesDashboardDataResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
