/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdminExperienceDataUserDataAdditionalData : IEquatable<AdminExperienceDataUserDataAdditionalData>
    {
        /// <summary>
        /// Gets or Sets CompletedEvaluationCount
        /// </summary>
        [Required]
        [DataMember(Name="completedEvaluationCount", EmitDefaultValue=true)]
        public long CompletedEvaluationCount { get; set; }

        /// <summary>
        /// Gets or Sets PendingWorkflowsCount
        /// </summary>
        [Required]
        [DataMember(Name="pendingWorkflowsCount", EmitDefaultValue=true)]
        public long PendingWorkflowsCount { get; set; }

        /// <summary>
        /// Gets or Sets CompletedWorkflowsCount
        /// </summary>
        [Required]
        [DataMember(Name="completedWorkflowsCount", EmitDefaultValue=true)]
        public long CompletedWorkflowsCount { get; set; }

        /// <summary>
        /// Gets or Sets TotalWorkflowsCount
        /// </summary>
        [Required]
        [DataMember(Name="totalWorkflowsCount", EmitDefaultValue=true)]
        public long TotalWorkflowsCount { get; set; }

        /// <summary>
        /// Gets or Sets TotalEvaluationCount
        /// </summary>
        [Required]
        [DataMember(Name="totalEvaluationCount", EmitDefaultValue=true)]
        public long TotalEvaluationCount { get; set; }

        /// <summary>
        /// Gets or Sets WblHours
        /// </summary>
        [Required]
        [DataMember(Name="wblHours", EmitDefaultValue=true)]
        public double WblHours { get; set; }

        /// <summary>
        /// Gets or Sets SiteVisitCount
        /// </summary>
        [Required]
        [DataMember(Name="siteVisitCount", EmitDefaultValue=true)]
        public long SiteVisitCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminExperienceDataUserDataAdditionalData {\n");
            sb.Append("  CompletedEvaluationCount: ").Append(CompletedEvaluationCount).Append("\n");
            sb.Append("  PendingWorkflowsCount: ").Append(PendingWorkflowsCount).Append("\n");
            sb.Append("  CompletedWorkflowsCount: ").Append(CompletedWorkflowsCount).Append("\n");
            sb.Append("  TotalWorkflowsCount: ").Append(TotalWorkflowsCount).Append("\n");
            sb.Append("  TotalEvaluationCount: ").Append(TotalEvaluationCount).Append("\n");
            sb.Append("  WblHours: ").Append(WblHours).Append("\n");
            sb.Append("  SiteVisitCount: ").Append(SiteVisitCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdminExperienceDataUserDataAdditionalData)obj);
        }

        /// <summary>
        /// Returns true if AdminExperienceDataUserDataAdditionalData instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminExperienceDataUserDataAdditionalData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminExperienceDataUserDataAdditionalData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CompletedEvaluationCount == other.CompletedEvaluationCount ||
                    
                    CompletedEvaluationCount.Equals(other.CompletedEvaluationCount)
                ) && 
                (
                    PendingWorkflowsCount == other.PendingWorkflowsCount ||
                    
                    PendingWorkflowsCount.Equals(other.PendingWorkflowsCount)
                ) && 
                (
                    CompletedWorkflowsCount == other.CompletedWorkflowsCount ||
                    
                    CompletedWorkflowsCount.Equals(other.CompletedWorkflowsCount)
                ) && 
                (
                    TotalWorkflowsCount == other.TotalWorkflowsCount ||
                    
                    TotalWorkflowsCount.Equals(other.TotalWorkflowsCount)
                ) && 
                (
                    TotalEvaluationCount == other.TotalEvaluationCount ||
                    
                    TotalEvaluationCount.Equals(other.TotalEvaluationCount)
                ) && 
                (
                    WblHours == other.WblHours ||
                    
                    WblHours.Equals(other.WblHours)
                ) && 
                (
                    SiteVisitCount == other.SiteVisitCount ||
                    
                    SiteVisitCount.Equals(other.SiteVisitCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + CompletedEvaluationCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + PendingWorkflowsCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + CompletedWorkflowsCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalWorkflowsCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalEvaluationCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + WblHours.GetHashCode();
                    
                    hashCode = hashCode * 59 + SiteVisitCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdminExperienceDataUserDataAdditionalData left, AdminExperienceDataUserDataAdditionalData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdminExperienceDataUserDataAdditionalData left, AdminExperienceDataUserDataAdditionalData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
