/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StudentEndorsementProgress : IEquatable<StudentEndorsementProgress>
    {
        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [Required]
        [DataMember(Name="required", EmitDefaultValue=false)]
        public CertificationDataRequired Required { get; set; }

        /// <summary>
        /// Gets or Sets SkillId
        /// </summary>
        [DataMember(Name="skillId", EmitDefaultValue=true)]
        public long? SkillId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Percent
        /// </summary>
        [Required]
        [DataMember(Name="percent", EmitDefaultValue=true)]
        public double Percent { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [Required]
        [DataMember(Name="completed", EmitDefaultValue=false)]
        public CertificationDataRequired Completed { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [Required]
        [DataMember(Name="userId", EmitDefaultValue=true)]
        public long UserId { get; set; }

        /// <summary>
        /// Gets or Sets EndorsementId
        /// </summary>
        [DataMember(Name="endorsementId", EmitDefaultValue=true)]
        public long? EndorsementId { get; set; }

        /// <summary>
        /// Gets or Sets BadgeId
        /// </summary>
        [DataMember(Name="badgeId", EmitDefaultValue=true)]
        public long? BadgeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentEndorsementProgress {\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  SkillId: ").Append(SkillId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Percent: ").Append(Percent).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  EndorsementId: ").Append(EndorsementId).Append("\n");
            sb.Append("  BadgeId: ").Append(BadgeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StudentEndorsementProgress)obj);
        }

        /// <summary>
        /// Returns true if StudentEndorsementProgress instances are equal
        /// </summary>
        /// <param name="other">Instance of StudentEndorsementProgress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentEndorsementProgress other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Required == other.Required ||
                    Required != null &&
                    Required.Equals(other.Required)
                ) && 
                (
                    SkillId == other.SkillId ||
                    SkillId != null &&
                    SkillId.Equals(other.SkillId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Percent == other.Percent ||
                    
                    Percent.Equals(other.Percent)
                ) && 
                (
                    Completed == other.Completed ||
                    Completed != null &&
                    Completed.Equals(other.Completed)
                ) && 
                (
                    UserId == other.UserId ||
                    
                    UserId.Equals(other.UserId)
                ) && 
                (
                    EndorsementId == other.EndorsementId ||
                    EndorsementId != null &&
                    EndorsementId.Equals(other.EndorsementId)
                ) && 
                (
                    BadgeId == other.BadgeId ||
                    BadgeId != null &&
                    BadgeId.Equals(other.BadgeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Required != null)
                    hashCode = hashCode * 59 + Required.GetHashCode();
                    if (SkillId != null)
                    hashCode = hashCode * 59 + SkillId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Percent.GetHashCode();
                    if (Completed != null)
                    hashCode = hashCode * 59 + Completed.GetHashCode();
                    
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (EndorsementId != null)
                    hashCode = hashCode * 59 + EndorsementId.GetHashCode();
                    if (BadgeId != null)
                    hashCode = hashCode * 59 + BadgeId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StudentEndorsementProgress left, StudentEndorsementProgress right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StudentEndorsementProgress left, StudentEndorsementProgress right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
