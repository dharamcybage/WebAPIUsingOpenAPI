/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ActivityVisibilityResponse : IEquatable<ActivityVisibilityResponse>
    {
        /// <summary>
        /// Gets or Sets Segments
        /// </summary>
        [Required]
        [DataMember(Name="segments", EmitDefaultValue=false)]
        public List<ActivityVisibilityResponseObject> Segments { get; set; }

        /// <summary>
        /// Gets or Sets Clusters
        /// </summary>
        [Required]
        [DataMember(Name="clusters", EmitDefaultValue=false)]
        public List<ActivityVisibilityResponseObject> Clusters { get; set; }

        /// <summary>
        /// Gets or Sets AllUsers
        /// </summary>
        [Required]
        [DataMember(Name="allUsers", EmitDefaultValue=false)]
        public List<BasicUser> AllUsers { get; set; }

        /// <summary>
        /// Gets or Sets ExplicitUsers
        /// </summary>
        [Required]
        [DataMember(Name="explicitUsers", EmitDefaultValue=false)]
        public List<BasicUser> ExplicitUsers { get; set; }

        /// <summary>
        /// Gets or Sets Grades
        /// </summary>
        [Required]
        [DataMember(Name="grades", EmitDefaultValue=false)]
        public List<long> Grades { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityVisibilityResponse {\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  Clusters: ").Append(Clusters).Append("\n");
            sb.Append("  AllUsers: ").Append(AllUsers).Append("\n");
            sb.Append("  ExplicitUsers: ").Append(ExplicitUsers).Append("\n");
            sb.Append("  Grades: ").Append(Grades).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ActivityVisibilityResponse)obj);
        }

        /// <summary>
        /// Returns true if ActivityVisibilityResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ActivityVisibilityResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityVisibilityResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Segments == other.Segments ||
                    Segments != null &&
                    other.Segments != null &&
                    Segments.SequenceEqual(other.Segments)
                ) && 
                (
                    Clusters == other.Clusters ||
                    Clusters != null &&
                    other.Clusters != null &&
                    Clusters.SequenceEqual(other.Clusters)
                ) && 
                (
                    AllUsers == other.AllUsers ||
                    AllUsers != null &&
                    other.AllUsers != null &&
                    AllUsers.SequenceEqual(other.AllUsers)
                ) && 
                (
                    ExplicitUsers == other.ExplicitUsers ||
                    ExplicitUsers != null &&
                    other.ExplicitUsers != null &&
                    ExplicitUsers.SequenceEqual(other.ExplicitUsers)
                ) && 
                (
                    Grades == other.Grades ||
                    Grades != null &&
                    other.Grades != null &&
                    Grades.SequenceEqual(other.Grades)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Segments != null)
                    hashCode = hashCode * 59 + Segments.GetHashCode();
                    if (Clusters != null)
                    hashCode = hashCode * 59 + Clusters.GetHashCode();
                    if (AllUsers != null)
                    hashCode = hashCode * 59 + AllUsers.GetHashCode();
                    if (ExplicitUsers != null)
                    hashCode = hashCode * 59 + ExplicitUsers.GetHashCode();
                    if (Grades != null)
                    hashCode = hashCode * 59 + Grades.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ActivityVisibilityResponse left, ActivityVisibilityResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ActivityVisibilityResponse left, ActivityVisibilityResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
