/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateServiceEventRequest : IEquatable<CreateServiceEventRequest>
    {
        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=true)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=true)]
        public string EndDate { get; set; }

        /// <summary>
        /// Gets or Sets SeparateEvents
        /// </summary>
        [Required]
        [DataMember(Name="separateEvents", EmitDefaultValue=true)]
        public bool SeparateEvents { get; set; }

        /// <summary>
        /// Gets or Sets RequireSignup
        /// </summary>
        [Required]
        [DataMember(Name="requireSignup", EmitDefaultValue=true)]
        public bool RequireSignup { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TagIds
        /// </summary>
        [Required]
        [DataMember(Name="tagIds", EmitDefaultValue=false)]
        public List<long> TagIds { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=true)]
        public string Time { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [Required]
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [Required]
        [DataMember(Name="organization", EmitDefaultValue=true)]
        public long Organization { get; set; }

        /// <summary>
        /// Gets or Sets ExternalEventId
        /// </summary>
        [DataMember(Name="externalEventId", EmitDefaultValue=true)]
        public long? ExternalEventId { get; set; }

        /// <summary>
        /// Gets or Sets MaximumRegisteredStudents
        /// </summary>
        [DataMember(Name="maximumRegisteredStudents", EmitDefaultValue=true)]
        public long? MaximumRegisteredStudents { get; set; }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name="days", EmitDefaultValue=true)]
        public List<CreateServiceEventRequestDay> Days { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateServiceEventRequest {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  SeparateEvents: ").Append(SeparateEvents).Append("\n");
            sb.Append("  RequireSignup: ").Append(RequireSignup).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  ExternalEventId: ").Append(ExternalEventId).Append("\n");
            sb.Append("  MaximumRegisteredStudents: ").Append(MaximumRegisteredStudents).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateServiceEventRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateServiceEventRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateServiceEventRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateServiceEventRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    SeparateEvents == other.SeparateEvents ||
                    
                    SeparateEvents.Equals(other.SeparateEvents)
                ) && 
                (
                    RequireSignup == other.RequireSignup ||
                    
                    RequireSignup.Equals(other.RequireSignup)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    TagIds == other.TagIds ||
                    TagIds != null &&
                    other.TagIds != null &&
                    TagIds.SequenceEqual(other.TagIds)
                ) && 
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.Equals(other.Time)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    Organization == other.Organization ||
                    
                    Organization.Equals(other.Organization)
                ) && 
                (
                    ExternalEventId == other.ExternalEventId ||
                    ExternalEventId != null &&
                    ExternalEventId.Equals(other.ExternalEventId)
                ) && 
                (
                    MaximumRegisteredStudents == other.MaximumRegisteredStudents ||
                    MaximumRegisteredStudents != null &&
                    MaximumRegisteredStudents.Equals(other.MaximumRegisteredStudents)
                ) && 
                (
                    Days == other.Days ||
                    Days != null &&
                    other.Days != null &&
                    Days.SequenceEqual(other.Days)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + SeparateEvents.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequireSignup.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (TagIds != null)
                    hashCode = hashCode * 59 + TagIds.GetHashCode();
                    if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (ExternalEventId != null)
                    hashCode = hashCode * 59 + ExternalEventId.GetHashCode();
                    if (MaximumRegisteredStudents != null)
                    hashCode = hashCode * 59 + MaximumRegisteredStudents.GetHashCode();
                    if (Days != null)
                    hashCode = hashCode * 59 + Days.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateServiceEventRequest left, CreateServiceEventRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateServiceEventRequest left, CreateServiceEventRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
