/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DataLogFullDataResponse : IEquatable<DataLogFullDataResponse>
    {
        /// <summary>
        /// Gets or Sets Schools
        /// </summary>
        [Required]
        [DataMember(Name="schools", EmitDefaultValue=false)]
        public List<BasicSchool> Schools { get; set; }

        /// <summary>
        /// Gets or Sets Experiences
        /// </summary>
        [Required]
        [DataMember(Name="experiences", EmitDefaultValue=false)]
        public List<ExperienceDTO> Experiences { get; set; }

        /// <summary>
        /// Gets or Sets Staff
        /// </summary>
        [Required]
        [DataMember(Name="staff", EmitDefaultValue=false)]
        public List<BasicUser> Staff { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [Required]
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets Audiences
        /// </summary>
        [Required]
        [DataMember(Name="audiences", EmitDefaultValue=false)]
        public List<long> Audiences { get; set; }

        /// <summary>
        /// Gets or Sets Types
        /// </summary>
        [Required]
        [DataMember(Name="types", EmitDefaultValue=false)]
        public List<long> Types { get; set; }

        /// <summary>
        /// Gets or Sets NumberStudents
        /// </summary>
        [DataMember(Name="numberStudents", EmitDefaultValue=true)]
        public long? NumberStudents { get; set; }

        /// <summary>
        /// Gets or Sets Activities
        /// </summary>
        [Required]
        [DataMember(Name="activities", EmitDefaultValue=false)]
        public List<ActivityDTO> Activities { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [Required]
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets NumberTeachers
        /// </summary>
        [DataMember(Name="numberTeachers", EmitDefaultValue=true)]
        public long? NumberTeachers { get; set; }

        /// <summary>
        /// Gets or Sets Clusters
        /// </summary>
        [Required]
        [DataMember(Name="clusters", EmitDefaultValue=false)]
        public List<CareerClusterDTO> Clusters { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [Required]
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<ContactDTO> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets Organizations
        /// </summary>
        [Required]
        [DataMember(Name="organizations", EmitDefaultValue=false)]
        public List<OrganizationDTO> Organizations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataLogFullDataResponse {\n");
            sb.Append("  Schools: ").Append(Schools).Append("\n");
            sb.Append("  Experiences: ").Append(Experiences).Append("\n");
            sb.Append("  Staff: ").Append(Staff).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Audiences: ").Append(Audiences).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  NumberStudents: ").Append(NumberStudents).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NumberTeachers: ").Append(NumberTeachers).Append("\n");
            sb.Append("  Clusters: ").Append(Clusters).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Organizations: ").Append(Organizations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DataLogFullDataResponse)obj);
        }

        /// <summary>
        /// Returns true if DataLogFullDataResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of DataLogFullDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataLogFullDataResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Schools == other.Schools ||
                    Schools != null &&
                    other.Schools != null &&
                    Schools.SequenceEqual(other.Schools)
                ) && 
                (
                    Experiences == other.Experiences ||
                    Experiences != null &&
                    other.Experiences != null &&
                    Experiences.SequenceEqual(other.Experiences)
                ) && 
                (
                    Staff == other.Staff ||
                    Staff != null &&
                    other.Staff != null &&
                    Staff.SequenceEqual(other.Staff)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Audiences == other.Audiences ||
                    Audiences != null &&
                    other.Audiences != null &&
                    Audiences.SequenceEqual(other.Audiences)
                ) && 
                (
                    Types == other.Types ||
                    Types != null &&
                    other.Types != null &&
                    Types.SequenceEqual(other.Types)
                ) && 
                (
                    NumberStudents == other.NumberStudents ||
                    NumberStudents != null &&
                    NumberStudents.Equals(other.NumberStudents)
                ) && 
                (
                    Activities == other.Activities ||
                    Activities != null &&
                    other.Activities != null &&
                    Activities.SequenceEqual(other.Activities)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    NumberTeachers == other.NumberTeachers ||
                    NumberTeachers != null &&
                    NumberTeachers.Equals(other.NumberTeachers)
                ) && 
                (
                    Clusters == other.Clusters ||
                    Clusters != null &&
                    other.Clusters != null &&
                    Clusters.SequenceEqual(other.Clusters)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Contacts == other.Contacts ||
                    Contacts != null &&
                    other.Contacts != null &&
                    Contacts.SequenceEqual(other.Contacts)
                ) && 
                (
                    Organizations == other.Organizations ||
                    Organizations != null &&
                    other.Organizations != null &&
                    Organizations.SequenceEqual(other.Organizations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Schools != null)
                    hashCode = hashCode * 59 + Schools.GetHashCode();
                    if (Experiences != null)
                    hashCode = hashCode * 59 + Experiences.GetHashCode();
                    if (Staff != null)
                    hashCode = hashCode * 59 + Staff.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Audiences != null)
                    hashCode = hashCode * 59 + Audiences.GetHashCode();
                    if (Types != null)
                    hashCode = hashCode * 59 + Types.GetHashCode();
                    if (NumberStudents != null)
                    hashCode = hashCode * 59 + NumberStudents.GetHashCode();
                    if (Activities != null)
                    hashCode = hashCode * 59 + Activities.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (NumberTeachers != null)
                    hashCode = hashCode * 59 + NumberTeachers.GetHashCode();
                    if (Clusters != null)
                    hashCode = hashCode * 59 + Clusters.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Contacts != null)
                    hashCode = hashCode * 59 + Contacts.GetHashCode();
                    if (Organizations != null)
                    hashCode = hashCode * 59 + Organizations.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DataLogFullDataResponse left, DataLogFullDataResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DataLogFullDataResponse left, DataLogFullDataResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
