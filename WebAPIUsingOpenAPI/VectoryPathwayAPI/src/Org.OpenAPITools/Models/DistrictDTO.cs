/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DistrictDTO : IEquatable<DistrictDTO>
    {
        /// <summary>
        /// Gets or Sets RequiresVerificationForStudents
        /// </summary>
        [Required]
        [DataMember(Name="requiresVerificationForStudents", EmitDefaultValue=true)]
        public bool RequiresVerificationForStudents { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets GoogleDomain
        /// </summary>
        [DataMember(Name="googleDomain", EmitDefaultValue=true)]
        public string GoogleDomain { get; set; }

        /// <summary>
        /// Gets or Sets RequiredProfileForm
        /// </summary>
        [DataMember(Name="requiredProfileForm", EmitDefaultValue=true)]
        public long? RequiredProfileForm { get; set; }

        /// <summary>
        /// Gets or Sets IsShutDown
        /// </summary>
        [Required]
        [DataMember(Name="isShutDown", EmitDefaultValue=true)]
        public bool IsShutDown { get; set; }

        /// <summary>
        /// Gets or Sets SamlMetadata
        /// </summary>
        [DataMember(Name="samlMetadata", EmitDefaultValue=true)]
        public string SamlMetadata { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [Required]
        [DataMember(Name="shortName", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets FullBackgroundCheckTokens
        /// </summary>
        [Required]
        [DataMember(Name="fullBackgroundCheckTokens", EmitDefaultValue=true)]
        public long FullBackgroundCheckTokens { get; set; }

        /// <summary>
        /// Gets or Sets BasicBackgroundCheckTokens
        /// </summary>
        [Required]
        [DataMember(Name="basicBackgroundCheckTokens", EmitDefaultValue=true)]
        public long BasicBackgroundCheckTokens { get; set; }

        /// <summary>
        /// Gets or Sets ClasslinkTenantId
        /// </summary>
        [DataMember(Name="classlinkTenantId", EmitDefaultValue=true)]
        public string ClasslinkTenantId { get; set; }

        /// <summary>
        /// Gets or Sets NcesID
        /// </summary>
        [Required]
        [DataMember(Name="ncesID", EmitDefaultValue=false)]
        public string NcesID { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name="logoUrl", EmitDefaultValue=true)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets DailyPendingStudentEmailCount
        /// </summary>
        [Required]
        [DataMember(Name="dailyPendingStudentEmailCount", EmitDefaultValue=true)]
        public long DailyPendingStudentEmailCount { get; set; }

        /// <summary>
        /// Gets or Sets StudentsCanUpdateCluster
        /// </summary>
        [Required]
        [DataMember(Name="studentsCanUpdateCluster", EmitDefaultValue=true)]
        public bool StudentsCanUpdateCluster { get; set; }

        /// <summary>
        /// Gets or Sets CounselorOneRosterField
        /// </summary>
        [DataMember(Name="counselorOneRosterField", EmitDefaultValue=true)]
        public string CounselorOneRosterField { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IncomingEmail
        /// </summary>
        [Required]
        [DataMember(Name="incomingEmail", EmitDefaultValue=false)]
        public string IncomingEmail { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deletedAt", EmitDefaultValue=true)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets OptionalProfileForm
        /// </summary>
        [DataMember(Name="optionalProfileForm", EmitDefaultValue=true)]
        public long? OptionalProfileForm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DistrictDTO {\n");
            sb.Append("  RequiresVerificationForStudents: ").Append(RequiresVerificationForStudents).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  GoogleDomain: ").Append(GoogleDomain).Append("\n");
            sb.Append("  RequiredProfileForm: ").Append(RequiredProfileForm).Append("\n");
            sb.Append("  IsShutDown: ").Append(IsShutDown).Append("\n");
            sb.Append("  SamlMetadata: ").Append(SamlMetadata).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  FullBackgroundCheckTokens: ").Append(FullBackgroundCheckTokens).Append("\n");
            sb.Append("  BasicBackgroundCheckTokens: ").Append(BasicBackgroundCheckTokens).Append("\n");
            sb.Append("  ClasslinkTenantId: ").Append(ClasslinkTenantId).Append("\n");
            sb.Append("  NcesID: ").Append(NcesID).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  DailyPendingStudentEmailCount: ").Append(DailyPendingStudentEmailCount).Append("\n");
            sb.Append("  StudentsCanUpdateCluster: ").Append(StudentsCanUpdateCluster).Append("\n");
            sb.Append("  CounselorOneRosterField: ").Append(CounselorOneRosterField).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IncomingEmail: ").Append(IncomingEmail).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OptionalProfileForm: ").Append(OptionalProfileForm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DistrictDTO)obj);
        }

        /// <summary>
        /// Returns true if DistrictDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of DistrictDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DistrictDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RequiresVerificationForStudents == other.RequiresVerificationForStudents ||
                    
                    RequiresVerificationForStudents.Equals(other.RequiresVerificationForStudents)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    GoogleDomain == other.GoogleDomain ||
                    GoogleDomain != null &&
                    GoogleDomain.Equals(other.GoogleDomain)
                ) && 
                (
                    RequiredProfileForm == other.RequiredProfileForm ||
                    RequiredProfileForm != null &&
                    RequiredProfileForm.Equals(other.RequiredProfileForm)
                ) && 
                (
                    IsShutDown == other.IsShutDown ||
                    
                    IsShutDown.Equals(other.IsShutDown)
                ) && 
                (
                    SamlMetadata == other.SamlMetadata ||
                    SamlMetadata != null &&
                    SamlMetadata.Equals(other.SamlMetadata)
                ) && 
                (
                    ShortName == other.ShortName ||
                    ShortName != null &&
                    ShortName.Equals(other.ShortName)
                ) && 
                (
                    FullBackgroundCheckTokens == other.FullBackgroundCheckTokens ||
                    
                    FullBackgroundCheckTokens.Equals(other.FullBackgroundCheckTokens)
                ) && 
                (
                    BasicBackgroundCheckTokens == other.BasicBackgroundCheckTokens ||
                    
                    BasicBackgroundCheckTokens.Equals(other.BasicBackgroundCheckTokens)
                ) && 
                (
                    ClasslinkTenantId == other.ClasslinkTenantId ||
                    ClasslinkTenantId != null &&
                    ClasslinkTenantId.Equals(other.ClasslinkTenantId)
                ) && 
                (
                    NcesID == other.NcesID ||
                    NcesID != null &&
                    NcesID.Equals(other.NcesID)
                ) && 
                (
                    LogoUrl == other.LogoUrl ||
                    LogoUrl != null &&
                    LogoUrl.Equals(other.LogoUrl)
                ) && 
                (
                    DailyPendingStudentEmailCount == other.DailyPendingStudentEmailCount ||
                    
                    DailyPendingStudentEmailCount.Equals(other.DailyPendingStudentEmailCount)
                ) && 
                (
                    StudentsCanUpdateCluster == other.StudentsCanUpdateCluster ||
                    
                    StudentsCanUpdateCluster.Equals(other.StudentsCanUpdateCluster)
                ) && 
                (
                    CounselorOneRosterField == other.CounselorOneRosterField ||
                    CounselorOneRosterField != null &&
                    CounselorOneRosterField.Equals(other.CounselorOneRosterField)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    IncomingEmail == other.IncomingEmail ||
                    IncomingEmail != null &&
                    IncomingEmail.Equals(other.IncomingEmail)
                ) && 
                (
                    DeletedAt == other.DeletedAt ||
                    DeletedAt != null &&
                    DeletedAt.Equals(other.DeletedAt)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    OptionalProfileForm == other.OptionalProfileForm ||
                    OptionalProfileForm != null &&
                    OptionalProfileForm.Equals(other.OptionalProfileForm)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + RequiresVerificationForStudents.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (GoogleDomain != null)
                    hashCode = hashCode * 59 + GoogleDomain.GetHashCode();
                    if (RequiredProfileForm != null)
                    hashCode = hashCode * 59 + RequiredProfileForm.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsShutDown.GetHashCode();
                    if (SamlMetadata != null)
                    hashCode = hashCode * 59 + SamlMetadata.GetHashCode();
                    if (ShortName != null)
                    hashCode = hashCode * 59 + ShortName.GetHashCode();
                    
                    hashCode = hashCode * 59 + FullBackgroundCheckTokens.GetHashCode();
                    
                    hashCode = hashCode * 59 + BasicBackgroundCheckTokens.GetHashCode();
                    if (ClasslinkTenantId != null)
                    hashCode = hashCode * 59 + ClasslinkTenantId.GetHashCode();
                    if (NcesID != null)
                    hashCode = hashCode * 59 + NcesID.GetHashCode();
                    if (LogoUrl != null)
                    hashCode = hashCode * 59 + LogoUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + DailyPendingStudentEmailCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + StudentsCanUpdateCluster.GetHashCode();
                    if (CounselorOneRosterField != null)
                    hashCode = hashCode * 59 + CounselorOneRosterField.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (IncomingEmail != null)
                    hashCode = hashCode * 59 + IncomingEmail.GetHashCode();
                    if (DeletedAt != null)
                    hashCode = hashCode * 59 + DeletedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (OptionalProfileForm != null)
                    hashCode = hashCode * 59 + OptionalProfileForm.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DistrictDTO left, DistrictDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DistrictDTO left, DistrictDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
