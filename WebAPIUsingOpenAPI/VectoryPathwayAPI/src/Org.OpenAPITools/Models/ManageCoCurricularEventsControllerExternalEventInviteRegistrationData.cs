/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ManageCoCurricularEventsControllerExternalEventInviteRegistrationData : IEquatable<ManageCoCurricularEventsControllerExternalEventInviteRegistrationData>
    {
        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [Required]
        [DataMember(Name="eventName", EmitDefaultValue=false)]
        public string EventName { get; set; }

        /// <summary>
        /// Gets or Sets EventDescription
        /// </summary>
        [DataMember(Name="eventDescription", EmitDefaultValue=true)]
        public string EventDescription { get; set; }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [Required]
        [DataMember(Name="eventId", EmitDefaultValue=true)]
        public long EventId { get; set; }

        /// <summary>
        /// Gets or Sets ShiftId
        /// </summary>
        [DataMember(Name="shiftId", EmitDefaultValue=true)]
        public long? ShiftId { get; set; }

        /// <summary>
        /// Gets or Sets EventDateId
        /// </summary>
        [Required]
        [DataMember(Name="eventDateId", EmitDefaultValue=true)]
        public long EventDateId { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [Required]
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationType
        /// </summary>
        [Required]
        [DataMember(Name="registrationType", EmitDefaultValue=true)]
        public long RegistrationType { get; set; }

        /// <summary>
        /// Gets or Sets Shifts
        /// </summary>
        [Required]
        [DataMember(Name="shifts", EmitDefaultValue=false)]
        public List<Object> Shifts { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [Required]
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets AllDay
        /// </summary>
        [Required]
        [DataMember(Name="allDay", EmitDefaultValue=true)]
        public bool AllDay { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [Required]
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or Sets RequiresCode
        /// </summary>
        [Required]
        [DataMember(Name="requiresCode", EmitDefaultValue=true)]
        public bool RequiresCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManageCoCurricularEventsControllerExternalEventInviteRegistrationData {\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  EventDescription: ").Append(EventDescription).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  ShiftId: ").Append(ShiftId).Append("\n");
            sb.Append("  EventDateId: ").Append(EventDateId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  RegistrationType: ").Append(RegistrationType).Append("\n");
            sb.Append("  Shifts: ").Append(Shifts).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  AllDay: ").Append(AllDay).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  RequiresCode: ").Append(RequiresCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ManageCoCurricularEventsControllerExternalEventInviteRegistrationData)obj);
        }

        /// <summary>
        /// Returns true if ManageCoCurricularEventsControllerExternalEventInviteRegistrationData instances are equal
        /// </summary>
        /// <param name="other">Instance of ManageCoCurricularEventsControllerExternalEventInviteRegistrationData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManageCoCurricularEventsControllerExternalEventInviteRegistrationData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EventName == other.EventName ||
                    EventName != null &&
                    EventName.Equals(other.EventName)
                ) && 
                (
                    EventDescription == other.EventDescription ||
                    EventDescription != null &&
                    EventDescription.Equals(other.EventDescription)
                ) && 
                (
                    EventId == other.EventId ||
                    
                    EventId.Equals(other.EventId)
                ) && 
                (
                    ShiftId == other.ShiftId ||
                    ShiftId != null &&
                    ShiftId.Equals(other.ShiftId)
                ) && 
                (
                    EventDateId == other.EventDateId ||
                    
                    EventDateId.Equals(other.EventDateId)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    RegistrationType == other.RegistrationType ||
                    
                    RegistrationType.Equals(other.RegistrationType)
                ) && 
                (
                    Shifts == other.Shifts ||
                    Shifts != null &&
                    other.Shifts != null &&
                    Shifts.SequenceEqual(other.Shifts)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    AllDay == other.AllDay ||
                    
                    AllDay.Equals(other.AllDay)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    RequiresCode == other.RequiresCode ||
                    
                    RequiresCode.Equals(other.RequiresCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EventName != null)
                    hashCode = hashCode * 59 + EventName.GetHashCode();
                    if (EventDescription != null)
                    hashCode = hashCode * 59 + EventDescription.GetHashCode();
                    
                    hashCode = hashCode * 59 + EventId.GetHashCode();
                    if (ShiftId != null)
                    hashCode = hashCode * 59 + ShiftId.GetHashCode();
                    
                    hashCode = hashCode * 59 + EventDateId.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    
                    hashCode = hashCode * 59 + RegistrationType.GetHashCode();
                    if (Shifts != null)
                    hashCode = hashCode * 59 + Shifts.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllDay.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequiresCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ManageCoCurricularEventsControllerExternalEventInviteRegistrationData left, ManageCoCurricularEventsControllerExternalEventInviteRegistrationData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ManageCoCurricularEventsControllerExternalEventInviteRegistrationData left, ManageCoCurricularEventsControllerExternalEventInviteRegistrationData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
