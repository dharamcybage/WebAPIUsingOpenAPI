/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CourseDataResponse : IEquatable<CourseDataResponse>
    {
        /// <summary>
        /// Gets or Sets Course
        /// </summary>
        [Required]
        [DataMember(Name="course", EmitDefaultValue=false)]
        public CourseDTO Course { get; set; }

        /// <summary>
        /// Gets or Sets Sections
        /// </summary>
        [Required]
        [DataMember(Name="sections", EmitDefaultValue=false)]
        public List<FullCourseSection> Sections { get; set; }

        /// <summary>
        /// Gets or Sets Students
        /// </summary>
        [Required]
        [DataMember(Name="students", EmitDefaultValue=false)]
        public List<CourseDataResponseBasicUserWithCourseData> Students { get; set; }

        /// <summary>
        /// Gets or Sets Assignments
        /// </summary>
        [Required]
        [DataMember(Name="assignments", EmitDefaultValue=false)]
        public List<Object> Assignments { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [Required]
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<Object> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Submission
        /// </summary>
        [DataMember(Name="submission", EmitDefaultValue=false)]
        public FormSubmissionResponse Submission { get; set; }

        /// <summary>
        /// Gets or Sets FormResponse
        /// </summary>
        [DataMember(Name="formResponse", EmitDefaultValue=false)]
        public FormResponse FormResponse { get; set; }

        /// <summary>
        /// Gets or Sets Subjects
        /// </summary>
        [Required]
        [DataMember(Name="subjects", EmitDefaultValue=false)]
        public List<CourseSubjectResponse> Subjects { get; set; }

        /// <summary>
        /// Gets or Sets Teachers
        /// </summary>
        [Required]
        [DataMember(Name="teachers", EmitDefaultValue=false)]
        public List<BasicUser> Teachers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CourseDataResponse {\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("  Students: ").Append(Students).Append("\n");
            sb.Append("  Assignments: ").Append(Assignments).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Submission: ").Append(Submission).Append("\n");
            sb.Append("  FormResponse: ").Append(FormResponse).Append("\n");
            sb.Append("  Subjects: ").Append(Subjects).Append("\n");
            sb.Append("  Teachers: ").Append(Teachers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CourseDataResponse)obj);
        }

        /// <summary>
        /// Returns true if CourseDataResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of CourseDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CourseDataResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Course == other.Course ||
                    Course != null &&
                    Course.Equals(other.Course)
                ) && 
                (
                    Sections == other.Sections ||
                    Sections != null &&
                    other.Sections != null &&
                    Sections.SequenceEqual(other.Sections)
                ) && 
                (
                    Students == other.Students ||
                    Students != null &&
                    other.Students != null &&
                    Students.SequenceEqual(other.Students)
                ) && 
                (
                    Assignments == other.Assignments ||
                    Assignments != null &&
                    other.Assignments != null &&
                    Assignments.SequenceEqual(other.Assignments)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Submission == other.Submission ||
                    Submission != null &&
                    Submission.Equals(other.Submission)
                ) && 
                (
                    FormResponse == other.FormResponse ||
                    FormResponse != null &&
                    FormResponse.Equals(other.FormResponse)
                ) && 
                (
                    Subjects == other.Subjects ||
                    Subjects != null &&
                    other.Subjects != null &&
                    Subjects.SequenceEqual(other.Subjects)
                ) && 
                (
                    Teachers == other.Teachers ||
                    Teachers != null &&
                    other.Teachers != null &&
                    Teachers.SequenceEqual(other.Teachers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Course != null)
                    hashCode = hashCode * 59 + Course.GetHashCode();
                    if (Sections != null)
                    hashCode = hashCode * 59 + Sections.GetHashCode();
                    if (Students != null)
                    hashCode = hashCode * 59 + Students.GetHashCode();
                    if (Assignments != null)
                    hashCode = hashCode * 59 + Assignments.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (Submission != null)
                    hashCode = hashCode * 59 + Submission.GetHashCode();
                    if (FormResponse != null)
                    hashCode = hashCode * 59 + FormResponse.GetHashCode();
                    if (Subjects != null)
                    hashCode = hashCode * 59 + Subjects.GetHashCode();
                    if (Teachers != null)
                    hashCode = hashCode * 59 + Teachers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CourseDataResponse left, CourseDataResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CourseDataResponse left, CourseDataResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
