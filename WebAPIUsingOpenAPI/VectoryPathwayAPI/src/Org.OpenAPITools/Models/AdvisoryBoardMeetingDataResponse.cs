/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdvisoryBoardMeetingDataResponse : IEquatable<AdvisoryBoardMeetingDataResponse>
    {
        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [Required]
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<AdvisoryBoardMeetingDataResponseMessage> Messages { get; set; }

        /// <summary>
        /// Gets or Sets Meeting
        /// </summary>
        [Required]
        [DataMember(Name="meeting", EmitDefaultValue=false)]
        public AdvisoryBoardMeetingDTO Meeting { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [Required]
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<Object> Files { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [Required]
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<AdvisoryBoardMeetingDataResponseMember> Members { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdvisoryBoardMeetingDataResponse {\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Meeting: ").Append(Meeting).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdvisoryBoardMeetingDataResponse)obj);
        }

        /// <summary>
        /// Returns true if AdvisoryBoardMeetingDataResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AdvisoryBoardMeetingDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdvisoryBoardMeetingDataResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Messages == other.Messages ||
                    Messages != null &&
                    other.Messages != null &&
                    Messages.SequenceEqual(other.Messages)
                ) && 
                (
                    Meeting == other.Meeting ||
                    Meeting != null &&
                    Meeting.Equals(other.Meeting)
                ) && 
                (
                    Files == other.Files ||
                    Files != null &&
                    other.Files != null &&
                    Files.SequenceEqual(other.Files)
                ) && 
                (
                    Members == other.Members ||
                    Members != null &&
                    other.Members != null &&
                    Members.SequenceEqual(other.Members)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Messages != null)
                    hashCode = hashCode * 59 + Messages.GetHashCode();
                    if (Meeting != null)
                    hashCode = hashCode * 59 + Meeting.GetHashCode();
                    if (Files != null)
                    hashCode = hashCode * 59 + Files.GetHashCode();
                    if (Members != null)
                    hashCode = hashCode * 59 + Members.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdvisoryBoardMeetingDataResponse left, AdvisoryBoardMeetingDataResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdvisoryBoardMeetingDataResponse left, AdvisoryBoardMeetingDataResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
