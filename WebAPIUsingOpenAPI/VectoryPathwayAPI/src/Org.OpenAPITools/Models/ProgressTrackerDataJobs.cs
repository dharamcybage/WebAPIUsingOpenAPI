/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProgressTrackerDataJobs : IEquatable<ProgressTrackerDataJobs>
    {
        /// <summary>
        /// Gets or Sets RequiredPayPeriodCount
        /// </summary>
        [Required]
        [DataMember(Name="requiredPayPeriodCount", EmitDefaultValue=true)]
        public long RequiredPayPeriodCount { get; set; }

        /// <summary>
        /// Gets or Sets SiteVistsCount
        /// </summary>
        [Required]
        [DataMember(Name="siteVistsCount", EmitDefaultValue=true)]
        public long SiteVistsCount { get; set; }

        /// <summary>
        /// Gets or Sets ShiftsCount
        /// </summary>
        [Required]
        [DataMember(Name="shiftsCount", EmitDefaultValue=true)]
        public long ShiftsCount { get; set; }

        /// <summary>
        /// Gets or Sets CompletedWorkflowForms
        /// </summary>
        [Required]
        [DataMember(Name="completedWorkflowForms", EmitDefaultValue=true)]
        public long CompletedWorkflowForms { get; set; }

        /// <summary>
        /// Gets or Sets ExperiencesCount
        /// </summary>
        [Required]
        [DataMember(Name="experiencesCount", EmitDefaultValue=true)]
        public long ExperiencesCount { get; set; }

        /// <summary>
        /// Gets or Sets LastCareerSurveyDate
        /// </summary>
        [DataMember(Name="lastCareerSurveyDate", EmitDefaultValue=true)]
        public DateTime? LastCareerSurveyDate { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceApplicationsCount
        /// </summary>
        [Required]
        [DataMember(Name="experienceApplicationsCount", EmitDefaultValue=true)]
        public long ExperienceApplicationsCount { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationEventsRequired
        /// </summary>
        [Required]
        [DataMember(Name="evaluationEventsRequired", EmitDefaultValue=true)]
        public long EvaluationEventsRequired { get; set; }

        /// <summary>
        /// Gets or Sets AssignedWorkflowForms
        /// </summary>
        [Required]
        [DataMember(Name="assignedWorkflowForms", EmitDefaultValue=true)]
        public long AssignedWorkflowForms { get; set; }

        /// <summary>
        /// Gets or Sets SubmittedPayPeriodCount
        /// </summary>
        [Required]
        [DataMember(Name="submittedPayPeriodCount", EmitDefaultValue=true)]
        public long SubmittedPayPeriodCount { get; set; }

        /// <summary>
        /// Gets or Sets TimeLogHours
        /// </summary>
        [Required]
        [DataMember(Name="timeLogHours", EmitDefaultValue=true)]
        public double TimeLogHours { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationEventsCompleted
        /// </summary>
        [Required]
        [DataMember(Name="evaluationEventsCompleted", EmitDefaultValue=true)]
        public long EvaluationEventsCompleted { get; set; }

        /// <summary>
        /// Gets or Sets CareerCluster
        /// </summary>
        [DataMember(Name="careerCluster", EmitDefaultValue=true)]
        public string CareerCluster { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProgressTrackerDataJobs {\n");
            sb.Append("  RequiredPayPeriodCount: ").Append(RequiredPayPeriodCount).Append("\n");
            sb.Append("  SiteVistsCount: ").Append(SiteVistsCount).Append("\n");
            sb.Append("  ShiftsCount: ").Append(ShiftsCount).Append("\n");
            sb.Append("  CompletedWorkflowForms: ").Append(CompletedWorkflowForms).Append("\n");
            sb.Append("  ExperiencesCount: ").Append(ExperiencesCount).Append("\n");
            sb.Append("  LastCareerSurveyDate: ").Append(LastCareerSurveyDate).Append("\n");
            sb.Append("  ExperienceApplicationsCount: ").Append(ExperienceApplicationsCount).Append("\n");
            sb.Append("  EvaluationEventsRequired: ").Append(EvaluationEventsRequired).Append("\n");
            sb.Append("  AssignedWorkflowForms: ").Append(AssignedWorkflowForms).Append("\n");
            sb.Append("  SubmittedPayPeriodCount: ").Append(SubmittedPayPeriodCount).Append("\n");
            sb.Append("  TimeLogHours: ").Append(TimeLogHours).Append("\n");
            sb.Append("  EvaluationEventsCompleted: ").Append(EvaluationEventsCompleted).Append("\n");
            sb.Append("  CareerCluster: ").Append(CareerCluster).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProgressTrackerDataJobs)obj);
        }

        /// <summary>
        /// Returns true if ProgressTrackerDataJobs instances are equal
        /// </summary>
        /// <param name="other">Instance of ProgressTrackerDataJobs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProgressTrackerDataJobs other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RequiredPayPeriodCount == other.RequiredPayPeriodCount ||
                    
                    RequiredPayPeriodCount.Equals(other.RequiredPayPeriodCount)
                ) && 
                (
                    SiteVistsCount == other.SiteVistsCount ||
                    
                    SiteVistsCount.Equals(other.SiteVistsCount)
                ) && 
                (
                    ShiftsCount == other.ShiftsCount ||
                    
                    ShiftsCount.Equals(other.ShiftsCount)
                ) && 
                (
                    CompletedWorkflowForms == other.CompletedWorkflowForms ||
                    
                    CompletedWorkflowForms.Equals(other.CompletedWorkflowForms)
                ) && 
                (
                    ExperiencesCount == other.ExperiencesCount ||
                    
                    ExperiencesCount.Equals(other.ExperiencesCount)
                ) && 
                (
                    LastCareerSurveyDate == other.LastCareerSurveyDate ||
                    LastCareerSurveyDate != null &&
                    LastCareerSurveyDate.Equals(other.LastCareerSurveyDate)
                ) && 
                (
                    ExperienceApplicationsCount == other.ExperienceApplicationsCount ||
                    
                    ExperienceApplicationsCount.Equals(other.ExperienceApplicationsCount)
                ) && 
                (
                    EvaluationEventsRequired == other.EvaluationEventsRequired ||
                    
                    EvaluationEventsRequired.Equals(other.EvaluationEventsRequired)
                ) && 
                (
                    AssignedWorkflowForms == other.AssignedWorkflowForms ||
                    
                    AssignedWorkflowForms.Equals(other.AssignedWorkflowForms)
                ) && 
                (
                    SubmittedPayPeriodCount == other.SubmittedPayPeriodCount ||
                    
                    SubmittedPayPeriodCount.Equals(other.SubmittedPayPeriodCount)
                ) && 
                (
                    TimeLogHours == other.TimeLogHours ||
                    
                    TimeLogHours.Equals(other.TimeLogHours)
                ) && 
                (
                    EvaluationEventsCompleted == other.EvaluationEventsCompleted ||
                    
                    EvaluationEventsCompleted.Equals(other.EvaluationEventsCompleted)
                ) && 
                (
                    CareerCluster == other.CareerCluster ||
                    CareerCluster != null &&
                    CareerCluster.Equals(other.CareerCluster)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + RequiredPayPeriodCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + SiteVistsCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShiftsCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + CompletedWorkflowForms.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExperiencesCount.GetHashCode();
                    if (LastCareerSurveyDate != null)
                    hashCode = hashCode * 59 + LastCareerSurveyDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExperienceApplicationsCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + EvaluationEventsRequired.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssignedWorkflowForms.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubmittedPayPeriodCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + TimeLogHours.GetHashCode();
                    
                    hashCode = hashCode * 59 + EvaluationEventsCompleted.GetHashCode();
                    if (CareerCluster != null)
                    hashCode = hashCode * 59 + CareerCluster.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProgressTrackerDataJobs left, ProgressTrackerDataJobs right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProgressTrackerDataJobs left, ProgressTrackerDataJobs right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
