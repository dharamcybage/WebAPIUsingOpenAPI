/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UpdateGeoTimeLogRequest : IEquatable<UpdateGeoTimeLogRequest>
    {
        /// <summary>
        /// Gets or Sets Hours
        /// </summary>
        [Required]
        [DataMember(Name="hours", EmitDefaultValue=true)]
        public double Hours { get; set; }

        /// <summary>
        /// Gets or Sets VarLong
        /// </summary>
        [DataMember(Name="long", EmitDefaultValue=true)]
        public string VarLong { get; set; }

        /// <summary>
        /// Gets or Sets Lat
        /// </summary>
        [DataMember(Name="lat", EmitDefaultValue=true)]
        public string Lat { get; set; }

        /// <summary>
        /// Gets or Sets SubmissionId
        /// </summary>
        [DataMember(Name="submission_id", EmitDefaultValue=true)]
        public long? SubmissionId { get; set; }

        /// <summary>
        /// Gets or Sets ReflectionText
        /// </summary>
        [DataMember(Name="reflectionText", EmitDefaultValue=true)]
        public string ReflectionText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateGeoTimeLogRequest {\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  VarLong: ").Append(VarLong).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  SubmissionId: ").Append(SubmissionId).Append("\n");
            sb.Append("  ReflectionText: ").Append(ReflectionText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdateGeoTimeLogRequest)obj);
        }

        /// <summary>
        /// Returns true if UpdateGeoTimeLogRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateGeoTimeLogRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateGeoTimeLogRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Hours == other.Hours ||
                    
                    Hours.Equals(other.Hours)
                ) && 
                (
                    VarLong == other.VarLong ||
                    VarLong != null &&
                    VarLong.Equals(other.VarLong)
                ) && 
                (
                    Lat == other.Lat ||
                    Lat != null &&
                    Lat.Equals(other.Lat)
                ) && 
                (
                    SubmissionId == other.SubmissionId ||
                    SubmissionId != null &&
                    SubmissionId.Equals(other.SubmissionId)
                ) && 
                (
                    ReflectionText == other.ReflectionText ||
                    ReflectionText != null &&
                    ReflectionText.Equals(other.ReflectionText)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Hours.GetHashCode();
                    if (VarLong != null)
                    hashCode = hashCode * 59 + VarLong.GetHashCode();
                    if (Lat != null)
                    hashCode = hashCode * 59 + Lat.GetHashCode();
                    if (SubmissionId != null)
                    hashCode = hashCode * 59 + SubmissionId.GetHashCode();
                    if (ReflectionText != null)
                    hashCode = hashCode * 59 + ReflectionText.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UpdateGeoTimeLogRequest left, UpdateGeoTimeLogRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpdateGeoTimeLogRequest left, UpdateGeoTimeLogRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
