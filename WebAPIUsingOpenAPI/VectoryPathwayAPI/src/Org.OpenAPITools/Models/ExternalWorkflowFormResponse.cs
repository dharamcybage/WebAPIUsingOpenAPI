/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ExternalWorkflowFormResponse : IEquatable<ExternalWorkflowFormResponse>
    {
        /// <summary>
        /// Gets or Sets SubmissionResponse
        /// </summary>
        [DataMember(Name="submissionResponse", EmitDefaultValue=false)]
        public FormSubmissionResponse SubmissionResponse { get; set; }

        /// <summary>
        /// Gets or Sets FormResponse
        /// </summary>
        [Required]
        [DataMember(Name="formResponse", EmitDefaultValue=false)]
        public FormResponse FormResponse { get; set; }

        /// <summary>
        /// Gets or Sets Signers
        /// </summary>
        [Required]
        [DataMember(Name="signers", EmitDefaultValue=false)]
        public List<Object> Signers { get; set; }

        /// <summary>
        /// Gets or Sets IsCompleted
        /// </summary>
        [Required]
        [DataMember(Name="isCompleted", EmitDefaultValue=true)]
        public bool IsCompleted { get; set; }

        /// <summary>
        /// Gets or Sets IsRejectable
        /// </summary>
        [DataMember(Name="isRejectable", EmitDefaultValue=true)]
        public bool? IsRejectable { get; set; }

        /// <summary>
        /// Gets or Sets AllPotentialSigners
        /// </summary>
        [Required]
        [DataMember(Name="allPotentialSigners", EmitDefaultValue=false)]
        public List<UserWorkflowStatusPotentialSignerDetails> AllPotentialSigners { get; set; }

        /// <summary>
        /// Gets or Sets EditableFieldIds
        /// </summary>
        [Required]
        [DataMember(Name="editableFieldIds", EmitDefaultValue=false)]
        public List<long> EditableFieldIds { get; set; }

        /// <summary>
        /// Gets or Sets Goals
        /// </summary>
        [DataMember(Name="goals", EmitDefaultValue=true)]
        public List<string> Goals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalWorkflowFormResponse {\n");
            sb.Append("  SubmissionResponse: ").Append(SubmissionResponse).Append("\n");
            sb.Append("  FormResponse: ").Append(FormResponse).Append("\n");
            sb.Append("  Signers: ").Append(Signers).Append("\n");
            sb.Append("  IsCompleted: ").Append(IsCompleted).Append("\n");
            sb.Append("  IsRejectable: ").Append(IsRejectable).Append("\n");
            sb.Append("  AllPotentialSigners: ").Append(AllPotentialSigners).Append("\n");
            sb.Append("  EditableFieldIds: ").Append(EditableFieldIds).Append("\n");
            sb.Append("  Goals: ").Append(Goals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExternalWorkflowFormResponse)obj);
        }

        /// <summary>
        /// Returns true if ExternalWorkflowFormResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ExternalWorkflowFormResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalWorkflowFormResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SubmissionResponse == other.SubmissionResponse ||
                    SubmissionResponse != null &&
                    SubmissionResponse.Equals(other.SubmissionResponse)
                ) && 
                (
                    FormResponse == other.FormResponse ||
                    FormResponse != null &&
                    FormResponse.Equals(other.FormResponse)
                ) && 
                (
                    Signers == other.Signers ||
                    Signers != null &&
                    other.Signers != null &&
                    Signers.SequenceEqual(other.Signers)
                ) && 
                (
                    IsCompleted == other.IsCompleted ||
                    
                    IsCompleted.Equals(other.IsCompleted)
                ) && 
                (
                    IsRejectable == other.IsRejectable ||
                    IsRejectable != null &&
                    IsRejectable.Equals(other.IsRejectable)
                ) && 
                (
                    AllPotentialSigners == other.AllPotentialSigners ||
                    AllPotentialSigners != null &&
                    other.AllPotentialSigners != null &&
                    AllPotentialSigners.SequenceEqual(other.AllPotentialSigners)
                ) && 
                (
                    EditableFieldIds == other.EditableFieldIds ||
                    EditableFieldIds != null &&
                    other.EditableFieldIds != null &&
                    EditableFieldIds.SequenceEqual(other.EditableFieldIds)
                ) && 
                (
                    Goals == other.Goals ||
                    Goals != null &&
                    other.Goals != null &&
                    Goals.SequenceEqual(other.Goals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SubmissionResponse != null)
                    hashCode = hashCode * 59 + SubmissionResponse.GetHashCode();
                    if (FormResponse != null)
                    hashCode = hashCode * 59 + FormResponse.GetHashCode();
                    if (Signers != null)
                    hashCode = hashCode * 59 + Signers.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsCompleted.GetHashCode();
                    if (IsRejectable != null)
                    hashCode = hashCode * 59 + IsRejectable.GetHashCode();
                    if (AllPotentialSigners != null)
                    hashCode = hashCode * 59 + AllPotentialSigners.GetHashCode();
                    if (EditableFieldIds != null)
                    hashCode = hashCode * 59 + EditableFieldIds.GetHashCode();
                    if (Goals != null)
                    hashCode = hashCode * 59 + Goals.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExternalWorkflowFormResponse left, ExternalWorkflowFormResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExternalWorkflowFormResponse left, ExternalWorkflowFormResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
