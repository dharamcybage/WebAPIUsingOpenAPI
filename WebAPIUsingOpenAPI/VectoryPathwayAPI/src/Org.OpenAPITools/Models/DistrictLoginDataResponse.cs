/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DistrictLoginDataResponse : IEquatable<DistrictLoginDataResponse>
    {
        /// <summary>
        /// Gets or Sets AllowsInvalidEmail
        /// </summary>
        [Required]
        [DataMember(Name="allowsInvalidEmail", EmitDefaultValue=true)]
        public bool AllowsInvalidEmail { get; set; }

        /// <summary>
        /// Gets or Sets Nvolved
        /// </summary>
        [Required]
        [DataMember(Name="nvolved", EmitDefaultValue=true)]
        public bool Nvolved { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AuthType
        /// </summary>
        [Required]
        [DataMember(Name="authType", EmitDefaultValue=true)]
        public long AuthType { get; set; }

        /// <summary>
        /// Gets or Sets SsoBypassAllowed
        /// </summary>
        [Required]
        [DataMember(Name="ssoBypassAllowed", EmitDefaultValue=true)]
        public bool SsoBypassAllowed { get; set; }

        /// <summary>
        /// Gets or Sets AutoSSOLogin
        /// </summary>
        [Required]
        [DataMember(Name="autoSSOLogin", EmitDefaultValue=true)]
        public bool AutoSSOLogin { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name="logoUrl", EmitDefaultValue=true)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets AlsoHasMicrosoft
        /// </summary>
        [Required]
        [DataMember(Name="alsoHasMicrosoft", EmitDefaultValue=true)]
        public bool AlsoHasMicrosoft { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [Required]
        [DataMember(Name="shortName", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DistrictLoginDataResponse {\n");
            sb.Append("  AllowsInvalidEmail: ").Append(AllowsInvalidEmail).Append("\n");
            sb.Append("  Nvolved: ").Append(Nvolved).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  SsoBypassAllowed: ").Append(SsoBypassAllowed).Append("\n");
            sb.Append("  AutoSSOLogin: ").Append(AutoSSOLogin).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  AlsoHasMicrosoft: ").Append(AlsoHasMicrosoft).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DistrictLoginDataResponse)obj);
        }

        /// <summary>
        /// Returns true if DistrictLoginDataResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of DistrictLoginDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DistrictLoginDataResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AllowsInvalidEmail == other.AllowsInvalidEmail ||
                    
                    AllowsInvalidEmail.Equals(other.AllowsInvalidEmail)
                ) && 
                (
                    Nvolved == other.Nvolved ||
                    
                    Nvolved.Equals(other.Nvolved)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AuthType == other.AuthType ||
                    
                    AuthType.Equals(other.AuthType)
                ) && 
                (
                    SsoBypassAllowed == other.SsoBypassAllowed ||
                    
                    SsoBypassAllowed.Equals(other.SsoBypassAllowed)
                ) && 
                (
                    AutoSSOLogin == other.AutoSSOLogin ||
                    
                    AutoSSOLogin.Equals(other.AutoSSOLogin)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    LogoUrl == other.LogoUrl ||
                    LogoUrl != null &&
                    LogoUrl.Equals(other.LogoUrl)
                ) && 
                (
                    AlsoHasMicrosoft == other.AlsoHasMicrosoft ||
                    
                    AlsoHasMicrosoft.Equals(other.AlsoHasMicrosoft)
                ) && 
                (
                    ShortName == other.ShortName ||
                    ShortName != null &&
                    ShortName.Equals(other.ShortName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AllowsInvalidEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + Nvolved.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + AuthType.GetHashCode();
                    
                    hashCode = hashCode * 59 + SsoBypassAllowed.GetHashCode();
                    
                    hashCode = hashCode * 59 + AutoSSOLogin.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (LogoUrl != null)
                    hashCode = hashCode * 59 + LogoUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + AlsoHasMicrosoft.GetHashCode();
                    if (ShortName != null)
                    hashCode = hashCode * 59 + ShortName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DistrictLoginDataResponse left, DistrictLoginDataResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DistrictLoginDataResponse left, DistrictLoginDataResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
