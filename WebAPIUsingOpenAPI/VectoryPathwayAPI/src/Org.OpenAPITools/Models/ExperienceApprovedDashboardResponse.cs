/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ExperienceApprovedDashboardResponse : IEquatable<ExperienceApprovedDashboardResponse>
    {
        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [Required]
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public string Organization { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceName
        /// </summary>
        [Required]
        [DataMember(Name="experienceName", EmitDefaultValue=false)]
        public string ExperienceName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [Required]
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets ContactEmail
        /// </summary>
        [Required]
        [DataMember(Name="contactEmail", EmitDefaultValue=false)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// Gets or Sets StudentEmail
        /// </summary>
        [Required]
        [DataMember(Name="studentEmail", EmitDefaultValue=false)]
        public string StudentEmail { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceAddress
        /// </summary>
        [Required]
        [DataMember(Name="experienceAddress", EmitDefaultValue=false)]
        public string ExperienceAddress { get; set; }

        /// <summary>
        /// Gets or Sets Segments
        /// </summary>
        [Required]
        [DataMember(Name="segments", EmitDefaultValue=false)]
        public string Segments { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [Required]
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceId
        /// </summary>
        [Required]
        [DataMember(Name="experienceId", EmitDefaultValue=true)]
        public long ExperienceId { get; set; }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [Required]
        [DataMember(Name="school", EmitDefaultValue=false)]
        public string School { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [Required]
        [DataMember(Name="contactName", EmitDefaultValue=false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets Workflows
        /// </summary>
        [Required]
        [DataMember(Name="workflows", EmitDefaultValue=false)]
        public List<WorkflowFormResponse> Workflows { get; set; }

        /// <summary>
        /// Gets or Sets StudentId
        /// </summary>
        [Required]
        [DataMember(Name="studentId", EmitDefaultValue=true)]
        public long StudentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExperienceApprovedDashboardResponse {\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  ExperienceName: ").Append(ExperienceName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  StudentEmail: ").Append(StudentEmail).Append("\n");
            sb.Append("  ExperienceAddress: ").Append(ExperienceAddress).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  ExperienceId: ").Append(ExperienceId).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  Workflows: ").Append(Workflows).Append("\n");
            sb.Append("  StudentId: ").Append(StudentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExperienceApprovedDashboardResponse)obj);
        }

        /// <summary>
        /// Returns true if ExperienceApprovedDashboardResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ExperienceApprovedDashboardResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExperienceApprovedDashboardResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.Equals(other.Organization)
                ) && 
                (
                    ExperienceName == other.ExperienceName ||
                    ExperienceName != null &&
                    ExperienceName.Equals(other.ExperienceName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    ContactEmail == other.ContactEmail ||
                    ContactEmail != null &&
                    ContactEmail.Equals(other.ContactEmail)
                ) && 
                (
                    StudentEmail == other.StudentEmail ||
                    StudentEmail != null &&
                    StudentEmail.Equals(other.StudentEmail)
                ) && 
                (
                    ExperienceAddress == other.ExperienceAddress ||
                    ExperienceAddress != null &&
                    ExperienceAddress.Equals(other.ExperienceAddress)
                ) && 
                (
                    Segments == other.Segments ||
                    Segments != null &&
                    Segments.Equals(other.Segments)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    ExperienceId == other.ExperienceId ||
                    
                    ExperienceId.Equals(other.ExperienceId)
                ) && 
                (
                    School == other.School ||
                    School != null &&
                    School.Equals(other.School)
                ) && 
                (
                    ContactName == other.ContactName ||
                    ContactName != null &&
                    ContactName.Equals(other.ContactName)
                ) && 
                (
                    Workflows == other.Workflows ||
                    Workflows != null &&
                    other.Workflows != null &&
                    Workflows.SequenceEqual(other.Workflows)
                ) && 
                (
                    StudentId == other.StudentId ||
                    
                    StudentId.Equals(other.StudentId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (ExperienceName != null)
                    hashCode = hashCode * 59 + ExperienceName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (ContactEmail != null)
                    hashCode = hashCode * 59 + ContactEmail.GetHashCode();
                    if (StudentEmail != null)
                    hashCode = hashCode * 59 + StudentEmail.GetHashCode();
                    if (ExperienceAddress != null)
                    hashCode = hashCode * 59 + ExperienceAddress.GetHashCode();
                    if (Segments != null)
                    hashCode = hashCode * 59 + Segments.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExperienceId.GetHashCode();
                    if (School != null)
                    hashCode = hashCode * 59 + School.GetHashCode();
                    if (ContactName != null)
                    hashCode = hashCode * 59 + ContactName.GetHashCode();
                    if (Workflows != null)
                    hashCode = hashCode * 59 + Workflows.GetHashCode();
                    
                    hashCode = hashCode * 59 + StudentId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExperienceApprovedDashboardResponse left, ExperienceApprovedDashboardResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExperienceApprovedDashboardResponse left, ExperienceApprovedDashboardResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
