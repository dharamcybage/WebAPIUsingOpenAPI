/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EditExperienceControllerBulkAddPayPeriodRequest : IEquatable<EditExperienceControllerBulkAddPayPeriodRequest>
    {
        /// <summary>
        /// Gets or Sets DestinationExperienceIds
        /// </summary>
        [Required]
        [DataMember(Name="destinationExperienceIds", EmitDefaultValue=false)]
        public List<long> DestinationExperienceIds { get; set; }

        /// <summary>
        /// Gets or Sets NotAfter
        /// </summary>
        [DataMember(Name="notAfter", EmitDefaultValue=true)]
        public DateTime? NotAfter { get; set; }

        /// <summary>
        /// Gets or Sets PayPeriodStart
        /// </summary>
        [Required]
        [DataMember(Name="payPeriodStart", EmitDefaultValue=false)]
        public DateTime PayPeriodStart { get; set; }

        /// <summary>
        /// Gets or Sets PayPeriodEnd
        /// </summary>
        [Required]
        [DataMember(Name="payPeriodEnd", EmitDefaultValue=false)]
        public DateTime PayPeriodEnd { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=true)]
        public long? Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EditExperienceControllerBulkAddPayPeriodRequest {\n");
            sb.Append("  DestinationExperienceIds: ").Append(DestinationExperienceIds).Append("\n");
            sb.Append("  NotAfter: ").Append(NotAfter).Append("\n");
            sb.Append("  PayPeriodStart: ").Append(PayPeriodStart).Append("\n");
            sb.Append("  PayPeriodEnd: ").Append(PayPeriodEnd).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EditExperienceControllerBulkAddPayPeriodRequest)obj);
        }

        /// <summary>
        /// Returns true if EditExperienceControllerBulkAddPayPeriodRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of EditExperienceControllerBulkAddPayPeriodRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditExperienceControllerBulkAddPayPeriodRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DestinationExperienceIds == other.DestinationExperienceIds ||
                    DestinationExperienceIds != null &&
                    other.DestinationExperienceIds != null &&
                    DestinationExperienceIds.SequenceEqual(other.DestinationExperienceIds)
                ) && 
                (
                    NotAfter == other.NotAfter ||
                    NotAfter != null &&
                    NotAfter.Equals(other.NotAfter)
                ) && 
                (
                    PayPeriodStart == other.PayPeriodStart ||
                    PayPeriodStart != null &&
                    PayPeriodStart.Equals(other.PayPeriodStart)
                ) && 
                (
                    PayPeriodEnd == other.PayPeriodEnd ||
                    PayPeriodEnd != null &&
                    PayPeriodEnd.Equals(other.PayPeriodEnd)
                ) && 
                (
                    Count == other.Count ||
                    Count != null &&
                    Count.Equals(other.Count)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DestinationExperienceIds != null)
                    hashCode = hashCode * 59 + DestinationExperienceIds.GetHashCode();
                    if (NotAfter != null)
                    hashCode = hashCode * 59 + NotAfter.GetHashCode();
                    if (PayPeriodStart != null)
                    hashCode = hashCode * 59 + PayPeriodStart.GetHashCode();
                    if (PayPeriodEnd != null)
                    hashCode = hashCode * 59 + PayPeriodEnd.GetHashCode();
                    if (Count != null)
                    hashCode = hashCode * 59 + Count.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EditExperienceControllerBulkAddPayPeriodRequest left, EditExperienceControllerBulkAddPayPeriodRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EditExperienceControllerBulkAddPayPeriodRequest left, EditExperienceControllerBulkAddPayPeriodRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
