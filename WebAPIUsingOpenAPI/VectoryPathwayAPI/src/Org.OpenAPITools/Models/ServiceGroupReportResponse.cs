/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ServiceGroupReportResponse : IEquatable<ServiceGroupReportResponse>
    {
        /// <summary>
        /// Gets or Sets PercentTowardsGroupGoal
        /// </summary>
        [DataMember(Name="percentTowardsGroupGoal", EmitDefaultValue=true)]
        public long? PercentTowardsGroupGoal { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [Required]
        [DataMember(Name="group", EmitDefaultValue=false)]
        public SimpleServiceGroup Group { get; set; }

        /// <summary>
        /// Gets or Sets TotalHours
        /// </summary>
        [Required]
        [DataMember(Name="totalHours", EmitDefaultValue=true)]
        public double TotalHours { get; set; }

        /// <summary>
        /// Gets or Sets NumberNotMetIndividual
        /// </summary>
        [DataMember(Name="numberNotMetIndividual", EmitDefaultValue=true)]
        public long? NumberNotMetIndividual { get; set; }

        /// <summary>
        /// Gets or Sets IndividualGoal
        /// </summary>
        [DataMember(Name="individualGoal", EmitDefaultValue=true)]
        public double? IndividualGoal { get; set; }

        /// <summary>
        /// Gets or Sets AllStudents
        /// </summary>
        [Required]
        [DataMember(Name="allStudents", EmitDefaultValue=false)]
        public List<UserServiceGroupTotalHours> AllStudents { get; set; }

        /// <summary>
        /// Gets or Sets MetStudentsIndividual
        /// </summary>
        [DataMember(Name="metStudentsIndividual", EmitDefaultValue=true)]
        public List<UserServiceGroupTotalHours> MetStudentsIndividual { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfLogs
        /// </summary>
        [Required]
        [DataMember(Name="numberOfLogs", EmitDefaultValue=true)]
        public long NumberOfLogs { get; set; }

        /// <summary>
        /// Gets or Sets TopFiveStudents
        /// </summary>
        [Required]
        [DataMember(Name="topFiveStudents", EmitDefaultValue=false)]
        public List<UserServiceGroupTotalHours> TopFiveStudents { get; set; }

        /// <summary>
        /// Gets or Sets GroupGoal
        /// </summary>
        [DataMember(Name="groupGoal", EmitDefaultValue=true)]
        public double? GroupGoal { get; set; }

        /// <summary>
        /// Gets or Sets AveragePerLog
        /// </summary>
        [Required]
        [DataMember(Name="averagePerLog", EmitDefaultValue=true)]
        public double AveragePerLog { get; set; }

        /// <summary>
        /// Gets or Sets UnverifiedLogs
        /// </summary>
        [Required]
        [DataMember(Name="unverifiedLogs", EmitDefaultValue=false)]
        public List<UnverifiedServiceGroupLog> UnverifiedLogs { get; set; }

        /// <summary>
        /// Gets or Sets NumberMetIndividual
        /// </summary>
        [DataMember(Name="numberMetIndividual", EmitDefaultValue=true)]
        public long? NumberMetIndividual { get; set; }

        /// <summary>
        /// Gets or Sets TotalStudents
        /// </summary>
        [Required]
        [DataMember(Name="totalStudents", EmitDefaultValue=true)]
        public long TotalStudents { get; set; }

        /// <summary>
        /// Gets or Sets NotMetStudentsIndividual
        /// </summary>
        [DataMember(Name="notMetStudentsIndividual", EmitDefaultValue=true)]
        public List<UserServiceGroupTotalHours> NotMetStudentsIndividual { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceGroupReportResponse {\n");
            sb.Append("  PercentTowardsGroupGoal: ").Append(PercentTowardsGroupGoal).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  TotalHours: ").Append(TotalHours).Append("\n");
            sb.Append("  NumberNotMetIndividual: ").Append(NumberNotMetIndividual).Append("\n");
            sb.Append("  IndividualGoal: ").Append(IndividualGoal).Append("\n");
            sb.Append("  AllStudents: ").Append(AllStudents).Append("\n");
            sb.Append("  MetStudentsIndividual: ").Append(MetStudentsIndividual).Append("\n");
            sb.Append("  NumberOfLogs: ").Append(NumberOfLogs).Append("\n");
            sb.Append("  TopFiveStudents: ").Append(TopFiveStudents).Append("\n");
            sb.Append("  GroupGoal: ").Append(GroupGoal).Append("\n");
            sb.Append("  AveragePerLog: ").Append(AveragePerLog).Append("\n");
            sb.Append("  UnverifiedLogs: ").Append(UnverifiedLogs).Append("\n");
            sb.Append("  NumberMetIndividual: ").Append(NumberMetIndividual).Append("\n");
            sb.Append("  TotalStudents: ").Append(TotalStudents).Append("\n");
            sb.Append("  NotMetStudentsIndividual: ").Append(NotMetStudentsIndividual).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServiceGroupReportResponse)obj);
        }

        /// <summary>
        /// Returns true if ServiceGroupReportResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceGroupReportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceGroupReportResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PercentTowardsGroupGoal == other.PercentTowardsGroupGoal ||
                    PercentTowardsGroupGoal != null &&
                    PercentTowardsGroupGoal.Equals(other.PercentTowardsGroupGoal)
                ) && 
                (
                    Group == other.Group ||
                    Group != null &&
                    Group.Equals(other.Group)
                ) && 
                (
                    TotalHours == other.TotalHours ||
                    
                    TotalHours.Equals(other.TotalHours)
                ) && 
                (
                    NumberNotMetIndividual == other.NumberNotMetIndividual ||
                    NumberNotMetIndividual != null &&
                    NumberNotMetIndividual.Equals(other.NumberNotMetIndividual)
                ) && 
                (
                    IndividualGoal == other.IndividualGoal ||
                    IndividualGoal != null &&
                    IndividualGoal.Equals(other.IndividualGoal)
                ) && 
                (
                    AllStudents == other.AllStudents ||
                    AllStudents != null &&
                    other.AllStudents != null &&
                    AllStudents.SequenceEqual(other.AllStudents)
                ) && 
                (
                    MetStudentsIndividual == other.MetStudentsIndividual ||
                    MetStudentsIndividual != null &&
                    other.MetStudentsIndividual != null &&
                    MetStudentsIndividual.SequenceEqual(other.MetStudentsIndividual)
                ) && 
                (
                    NumberOfLogs == other.NumberOfLogs ||
                    
                    NumberOfLogs.Equals(other.NumberOfLogs)
                ) && 
                (
                    TopFiveStudents == other.TopFiveStudents ||
                    TopFiveStudents != null &&
                    other.TopFiveStudents != null &&
                    TopFiveStudents.SequenceEqual(other.TopFiveStudents)
                ) && 
                (
                    GroupGoal == other.GroupGoal ||
                    GroupGoal != null &&
                    GroupGoal.Equals(other.GroupGoal)
                ) && 
                (
                    AveragePerLog == other.AveragePerLog ||
                    
                    AveragePerLog.Equals(other.AveragePerLog)
                ) && 
                (
                    UnverifiedLogs == other.UnverifiedLogs ||
                    UnverifiedLogs != null &&
                    other.UnverifiedLogs != null &&
                    UnverifiedLogs.SequenceEqual(other.UnverifiedLogs)
                ) && 
                (
                    NumberMetIndividual == other.NumberMetIndividual ||
                    NumberMetIndividual != null &&
                    NumberMetIndividual.Equals(other.NumberMetIndividual)
                ) && 
                (
                    TotalStudents == other.TotalStudents ||
                    
                    TotalStudents.Equals(other.TotalStudents)
                ) && 
                (
                    NotMetStudentsIndividual == other.NotMetStudentsIndividual ||
                    NotMetStudentsIndividual != null &&
                    other.NotMetStudentsIndividual != null &&
                    NotMetStudentsIndividual.SequenceEqual(other.NotMetStudentsIndividual)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PercentTowardsGroupGoal != null)
                    hashCode = hashCode * 59 + PercentTowardsGroupGoal.GetHashCode();
                    if (Group != null)
                    hashCode = hashCode * 59 + Group.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalHours.GetHashCode();
                    if (NumberNotMetIndividual != null)
                    hashCode = hashCode * 59 + NumberNotMetIndividual.GetHashCode();
                    if (IndividualGoal != null)
                    hashCode = hashCode * 59 + IndividualGoal.GetHashCode();
                    if (AllStudents != null)
                    hashCode = hashCode * 59 + AllStudents.GetHashCode();
                    if (MetStudentsIndividual != null)
                    hashCode = hashCode * 59 + MetStudentsIndividual.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumberOfLogs.GetHashCode();
                    if (TopFiveStudents != null)
                    hashCode = hashCode * 59 + TopFiveStudents.GetHashCode();
                    if (GroupGoal != null)
                    hashCode = hashCode * 59 + GroupGoal.GetHashCode();
                    
                    hashCode = hashCode * 59 + AveragePerLog.GetHashCode();
                    if (UnverifiedLogs != null)
                    hashCode = hashCode * 59 + UnverifiedLogs.GetHashCode();
                    if (NumberMetIndividual != null)
                    hashCode = hashCode * 59 + NumberMetIndividual.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalStudents.GetHashCode();
                    if (NotMetStudentsIndividual != null)
                    hashCode = hashCode * 59 + NotMetStudentsIndividual.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ServiceGroupReportResponse left, ServiceGroupReportResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServiceGroupReportResponse left, ServiceGroupReportResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
