/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdminTableExperience : IEquatable<AdminTableExperience>
    {
        /// <summary>
        /// Gets or Sets SpotsTakenCount
        /// </summary>
        [Required]
        [DataMember(Name="spotsTakenCount", EmitDefaultValue=true)]
        public long SpotsTakenCount { get; set; }

        /// <summary>
        /// Gets or Sets Students
        /// </summary>
        [DataMember(Name="students", EmitDefaultValue=true)]
        public string Students { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceHiddenFromSearch
        /// </summary>
        [Required]
        [DataMember(Name="experienceHiddenFromSearch", EmitDefaultValue=true)]
        public bool ExperienceHiddenFromSearch { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [Required]
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public AdminTableExperienceOrganization Organization { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folder_id", EmitDefaultValue=true)]
        public long? FolderId { get; set; }

        /// <summary>
        /// Gets or Sets ApplicantCount
        /// </summary>
        [Required]
        [DataMember(Name="applicantCount", EmitDefaultValue=true)]
        public long ApplicantCount { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name="contactName", EmitDefaultValue=true)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public AdminTableExperienceLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [Required]
        [DataMember(Name="archived", EmitDefaultValue=true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets TotalSpotCount
        /// </summary>
        [DataMember(Name="totalSpotCount", EmitDefaultValue=true)]
        public long? TotalSpotCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminTableExperience {\n");
            sb.Append("  SpotsTakenCount: ").Append(SpotsTakenCount).Append("\n");
            sb.Append("  Students: ").Append(Students).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExperienceHiddenFromSearch: ").Append(ExperienceHiddenFromSearch).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  ApplicantCount: ").Append(ApplicantCount).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TotalSpotCount: ").Append(TotalSpotCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdminTableExperience)obj);
        }

        /// <summary>
        /// Returns true if AdminTableExperience instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminTableExperience to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminTableExperience other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SpotsTakenCount == other.SpotsTakenCount ||
                    
                    SpotsTakenCount.Equals(other.SpotsTakenCount)
                ) && 
                (
                    Students == other.Students ||
                    Students != null &&
                    Students.Equals(other.Students)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ExperienceHiddenFromSearch == other.ExperienceHiddenFromSearch ||
                    
                    ExperienceHiddenFromSearch.Equals(other.ExperienceHiddenFromSearch)
                ) && 
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.Equals(other.Organization)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    FolderId == other.FolderId ||
                    FolderId != null &&
                    FolderId.Equals(other.FolderId)
                ) && 
                (
                    ApplicantCount == other.ApplicantCount ||
                    
                    ApplicantCount.Equals(other.ApplicantCount)
                ) && 
                (
                    ContactName == other.ContactName ||
                    ContactName != null &&
                    ContactName.Equals(other.ContactName)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    Archived == other.Archived ||
                    
                    Archived.Equals(other.Archived)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    TotalSpotCount == other.TotalSpotCount ||
                    TotalSpotCount != null &&
                    TotalSpotCount.Equals(other.TotalSpotCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + SpotsTakenCount.GetHashCode();
                    if (Students != null)
                    hashCode = hashCode * 59 + Students.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExperienceHiddenFromSearch.GetHashCode();
                    if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (FolderId != null)
                    hashCode = hashCode * 59 + FolderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApplicantCount.GetHashCode();
                    if (ContactName != null)
                    hashCode = hashCode * 59 + ContactName.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    
                    hashCode = hashCode * 59 + Archived.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (TotalSpotCount != null)
                    hashCode = hashCode * 59 + TotalSpotCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdminTableExperience left, AdminTableExperience right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdminTableExperience left, AdminTableExperience right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
