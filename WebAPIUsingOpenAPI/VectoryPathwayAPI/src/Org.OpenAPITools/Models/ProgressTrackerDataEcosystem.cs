/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProgressTrackerDataEcosystem : IEquatable<ProgressTrackerDataEcosystem>
    {
        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade", EmitDefaultValue=true)]
        public long? Grade { get; set; }

        /// <summary>
        /// Gets or Sets ActivitiesCompleted
        /// </summary>
        [Required]
        [DataMember(Name="activitiesCompleted", EmitDefaultValue=true)]
        public long ActivitiesCompleted { get; set; }

        /// <summary>
        /// Gets or Sets ActivitiesAssigned
        /// </summary>
        [Required]
        [DataMember(Name="activitiesAssigned", EmitDefaultValue=true)]
        public long ActivitiesAssigned { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [Required]
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [Required]
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [Required]
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets BadgesAssigned
        /// </summary>
        [Required]
        [DataMember(Name="badgesAssigned", EmitDefaultValue=true)]
        public long BadgesAssigned { get; set; }

        /// <summary>
        /// Gets or Sets StudentId
        /// </summary>
        [DataMember(Name="studentId", EmitDefaultValue=true)]
        public string StudentId { get; set; }

        /// <summary>
        /// Gets or Sets TasksCompleted
        /// </summary>
        [Required]
        [DataMember(Name="tasksCompleted", EmitDefaultValue=true)]
        public long TasksCompleted { get; set; }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [Required]
        [DataMember(Name="school", EmitDefaultValue=false)]
        public string School { get; set; }

        /// <summary>
        /// Gets or Sets TasksAssigned
        /// </summary>
        [Required]
        [DataMember(Name="tasksAssigned", EmitDefaultValue=true)]
        public long TasksAssigned { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProgressTrackerDataEcosystem {\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  ActivitiesCompleted: ").Append(ActivitiesCompleted).Append("\n");
            sb.Append("  ActivitiesAssigned: ").Append(ActivitiesAssigned).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  BadgesAssigned: ").Append(BadgesAssigned).Append("\n");
            sb.Append("  StudentId: ").Append(StudentId).Append("\n");
            sb.Append("  TasksCompleted: ").Append(TasksCompleted).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  TasksAssigned: ").Append(TasksAssigned).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProgressTrackerDataEcosystem)obj);
        }

        /// <summary>
        /// Returns true if ProgressTrackerDataEcosystem instances are equal
        /// </summary>
        /// <param name="other">Instance of ProgressTrackerDataEcosystem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProgressTrackerDataEcosystem other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Grade == other.Grade ||
                    Grade != null &&
                    Grade.Equals(other.Grade)
                ) && 
                (
                    ActivitiesCompleted == other.ActivitiesCompleted ||
                    
                    ActivitiesCompleted.Equals(other.ActivitiesCompleted)
                ) && 
                (
                    ActivitiesAssigned == other.ActivitiesAssigned ||
                    
                    ActivitiesAssigned.Equals(other.ActivitiesAssigned)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    BadgesAssigned == other.BadgesAssigned ||
                    
                    BadgesAssigned.Equals(other.BadgesAssigned)
                ) && 
                (
                    StudentId == other.StudentId ||
                    StudentId != null &&
                    StudentId.Equals(other.StudentId)
                ) && 
                (
                    TasksCompleted == other.TasksCompleted ||
                    
                    TasksCompleted.Equals(other.TasksCompleted)
                ) && 
                (
                    School == other.School ||
                    School != null &&
                    School.Equals(other.School)
                ) && 
                (
                    TasksAssigned == other.TasksAssigned ||
                    
                    TasksAssigned.Equals(other.TasksAssigned)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Grade != null)
                    hashCode = hashCode * 59 + Grade.GetHashCode();
                    
                    hashCode = hashCode * 59 + ActivitiesCompleted.GetHashCode();
                    
                    hashCode = hashCode * 59 + ActivitiesAssigned.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    
                    hashCode = hashCode * 59 + BadgesAssigned.GetHashCode();
                    if (StudentId != null)
                    hashCode = hashCode * 59 + StudentId.GetHashCode();
                    
                    hashCode = hashCode * 59 + TasksCompleted.GetHashCode();
                    if (School != null)
                    hashCode = hashCode * 59 + School.GetHashCode();
                    
                    hashCode = hashCode * 59 + TasksAssigned.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProgressTrackerDataEcosystem left, ProgressTrackerDataEcosystem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProgressTrackerDataEcosystem left, ProgressTrackerDataEcosystem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
