/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FormFieldWithData : IEquatable<FormFieldWithData>
    {
        /// <summary>
        /// Gets or Sets QualData
        /// </summary>
        [Required]
        [DataMember(Name="qualData", EmitDefaultValue=false)]
        public FormFieldBadgeQualificationData QualData { get; set; }

        /// <summary>
        /// Gets or Sets Submission
        /// </summary>
        [DataMember(Name="submission", EmitDefaultValue=false)]
        public Object Submission { get; set; }

        /// <summary>
        /// Gets or Sets FormField
        /// </summary>
        [Required]
        [DataMember(Name="formField", EmitDefaultValue=false)]
        public FormFieldDTO FormField { get; set; }

        /// <summary>
        /// Gets or Sets ConditionalBadgeGroupId
        /// </summary>
        [DataMember(Name="conditional_badge_group_id", EmitDefaultValue=true)]
        public long? ConditionalBadgeGroupId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormFieldWithData {\n");
            sb.Append("  QualData: ").Append(QualData).Append("\n");
            sb.Append("  Submission: ").Append(Submission).Append("\n");
            sb.Append("  FormField: ").Append(FormField).Append("\n");
            sb.Append("  ConditionalBadgeGroupId: ").Append(ConditionalBadgeGroupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FormFieldWithData)obj);
        }

        /// <summary>
        /// Returns true if FormFieldWithData instances are equal
        /// </summary>
        /// <param name="other">Instance of FormFieldWithData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormFieldWithData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    QualData == other.QualData ||
                    QualData != null &&
                    QualData.Equals(other.QualData)
                ) && 
                (
                    Submission == other.Submission ||
                    Submission != null &&
                    Submission.Equals(other.Submission)
                ) && 
                (
                    FormField == other.FormField ||
                    FormField != null &&
                    FormField.Equals(other.FormField)
                ) && 
                (
                    ConditionalBadgeGroupId == other.ConditionalBadgeGroupId ||
                    ConditionalBadgeGroupId != null &&
                    ConditionalBadgeGroupId.Equals(other.ConditionalBadgeGroupId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (QualData != null)
                    hashCode = hashCode * 59 + QualData.GetHashCode();
                    if (Submission != null)
                    hashCode = hashCode * 59 + Submission.GetHashCode();
                    if (FormField != null)
                    hashCode = hashCode * 59 + FormField.GetHashCode();
                    if (ConditionalBadgeGroupId != null)
                    hashCode = hashCode * 59 + ConditionalBadgeGroupId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FormFieldWithData left, FormFieldWithData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FormFieldWithData left, FormFieldWithData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
