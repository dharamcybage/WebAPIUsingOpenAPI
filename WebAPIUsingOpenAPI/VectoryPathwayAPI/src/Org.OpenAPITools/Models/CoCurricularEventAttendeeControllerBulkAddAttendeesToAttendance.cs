/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CoCurricularEventAttendeeControllerBulkAddAttendeesToAttendance : IEquatable<CoCurricularEventAttendeeControllerBulkAddAttendeesToAttendance>
    {
        /// <summary>
        /// Gets or Sets TimeIn
        /// </summary>
        [DataMember(Name="timeIn", EmitDefaultValue=true)]
        public DateTime? TimeIn { get; set; }

        /// <summary>
        /// Gets or Sets TimeOut
        /// </summary>
        [DataMember(Name="timeOut", EmitDefaultValue=true)]
        public DateTime? TimeOut { get; set; }

        /// <summary>
        /// Gets or Sets Remove
        /// </summary>
        [Required]
        [DataMember(Name="remove", EmitDefaultValue=true)]
        public bool Remove { get; set; }

        /// <summary>
        /// Gets or Sets AttendeeIds
        /// </summary>
        [Required]
        [DataMember(Name="attendeeIds", EmitDefaultValue=false)]
        public List<long> AttendeeIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoCurricularEventAttendeeControllerBulkAddAttendeesToAttendance {\n");
            sb.Append("  TimeIn: ").Append(TimeIn).Append("\n");
            sb.Append("  TimeOut: ").Append(TimeOut).Append("\n");
            sb.Append("  Remove: ").Append(Remove).Append("\n");
            sb.Append("  AttendeeIds: ").Append(AttendeeIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CoCurricularEventAttendeeControllerBulkAddAttendeesToAttendance)obj);
        }

        /// <summary>
        /// Returns true if CoCurricularEventAttendeeControllerBulkAddAttendeesToAttendance instances are equal
        /// </summary>
        /// <param name="other">Instance of CoCurricularEventAttendeeControllerBulkAddAttendeesToAttendance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoCurricularEventAttendeeControllerBulkAddAttendeesToAttendance other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TimeIn == other.TimeIn ||
                    TimeIn != null &&
                    TimeIn.Equals(other.TimeIn)
                ) && 
                (
                    TimeOut == other.TimeOut ||
                    TimeOut != null &&
                    TimeOut.Equals(other.TimeOut)
                ) && 
                (
                    Remove == other.Remove ||
                    
                    Remove.Equals(other.Remove)
                ) && 
                (
                    AttendeeIds == other.AttendeeIds ||
                    AttendeeIds != null &&
                    other.AttendeeIds != null &&
                    AttendeeIds.SequenceEqual(other.AttendeeIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TimeIn != null)
                    hashCode = hashCode * 59 + TimeIn.GetHashCode();
                    if (TimeOut != null)
                    hashCode = hashCode * 59 + TimeOut.GetHashCode();
                    
                    hashCode = hashCode * 59 + Remove.GetHashCode();
                    if (AttendeeIds != null)
                    hashCode = hashCode * 59 + AttendeeIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CoCurricularEventAttendeeControllerBulkAddAttendeesToAttendance left, CoCurricularEventAttendeeControllerBulkAddAttendeesToAttendance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CoCurricularEventAttendeeControllerBulkAddAttendeesToAttendance left, CoCurricularEventAttendeeControllerBulkAddAttendeesToAttendance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
