/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ExternalEvaluationSubmissionResponse : IEquatable<ExternalEvaluationSubmissionResponse>
    {
        /// <summary>
        /// Gets or Sets Min
        /// </summary>
        [DataMember(Name="min", EmitDefaultValue=true)]
        public long? Min { get; set; }

        /// <summary>
        /// Gets or Sets IsDone
        /// </summary>
        [Required]
        [DataMember(Name="isDone", EmitDefaultValue=true)]
        public bool IsDone { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [Required]
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<ExternalEvaluationSubmissionResponseEvent> Events { get; set; }

        /// <summary>
        /// Gets or Sets Goals
        /// </summary>
        [Required]
        [DataMember(Name="goals", EmitDefaultValue=false)]
        public List<ExternalEvaluationSubmissionResponseGoal> Goals { get; set; }

        /// <summary>
        /// Gets or Sets Submission
        /// </summary>
        [DataMember(Name="submission", EmitDefaultValue=false)]
        public FormSubmissionResponse Submission { get; set; }

        /// <summary>
        /// Gets or Sets FormToken
        /// </summary>
        [DataMember(Name="formToken", EmitDefaultValue=true)]
        public string FormToken { get; set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name="max", EmitDefaultValue=true)]
        public long? Max { get; set; }

        /// <summary>
        /// Gets or Sets Form
        /// </summary>
        [DataMember(Name="form", EmitDefaultValue=false)]
        public FormResponse Form { get; set; }

        /// <summary>
        /// Gets or Sets AllowsNotApplicable
        /// </summary>
        [Required]
        [DataMember(Name="allowsNotApplicable", EmitDefaultValue=true)]
        public bool AllowsNotApplicable { get; set; }

        /// <summary>
        /// Gets or Sets Instructions
        /// </summary>
        [DataMember(Name="instructions", EmitDefaultValue=true)]
        public string Instructions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalEvaluationSubmissionResponse {\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  IsDone: ").Append(IsDone).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Goals: ").Append(Goals).Append("\n");
            sb.Append("  Submission: ").Append(Submission).Append("\n");
            sb.Append("  FormToken: ").Append(FormToken).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("  AllowsNotApplicable: ").Append(AllowsNotApplicable).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExternalEvaluationSubmissionResponse)obj);
        }

        /// <summary>
        /// Returns true if ExternalEvaluationSubmissionResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ExternalEvaluationSubmissionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalEvaluationSubmissionResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Min == other.Min ||
                    Min != null &&
                    Min.Equals(other.Min)
                ) && 
                (
                    IsDone == other.IsDone ||
                    
                    IsDone.Equals(other.IsDone)
                ) && 
                (
                    Events == other.Events ||
                    Events != null &&
                    other.Events != null &&
                    Events.SequenceEqual(other.Events)
                ) && 
                (
                    Goals == other.Goals ||
                    Goals != null &&
                    other.Goals != null &&
                    Goals.SequenceEqual(other.Goals)
                ) && 
                (
                    Submission == other.Submission ||
                    Submission != null &&
                    Submission.Equals(other.Submission)
                ) && 
                (
                    FormToken == other.FormToken ||
                    FormToken != null &&
                    FormToken.Equals(other.FormToken)
                ) && 
                (
                    Max == other.Max ||
                    Max != null &&
                    Max.Equals(other.Max)
                ) && 
                (
                    Form == other.Form ||
                    Form != null &&
                    Form.Equals(other.Form)
                ) && 
                (
                    AllowsNotApplicable == other.AllowsNotApplicable ||
                    
                    AllowsNotApplicable.Equals(other.AllowsNotApplicable)
                ) && 
                (
                    Instructions == other.Instructions ||
                    Instructions != null &&
                    Instructions.Equals(other.Instructions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Min != null)
                    hashCode = hashCode * 59 + Min.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsDone.GetHashCode();
                    if (Events != null)
                    hashCode = hashCode * 59 + Events.GetHashCode();
                    if (Goals != null)
                    hashCode = hashCode * 59 + Goals.GetHashCode();
                    if (Submission != null)
                    hashCode = hashCode * 59 + Submission.GetHashCode();
                    if (FormToken != null)
                    hashCode = hashCode * 59 + FormToken.GetHashCode();
                    if (Max != null)
                    hashCode = hashCode * 59 + Max.GetHashCode();
                    if (Form != null)
                    hashCode = hashCode * 59 + Form.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowsNotApplicable.GetHashCode();
                    if (Instructions != null)
                    hashCode = hashCode * 59 + Instructions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExternalEvaluationSubmissionResponse left, ExternalEvaluationSubmissionResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExternalEvaluationSubmissionResponse left, ExternalEvaluationSubmissionResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
