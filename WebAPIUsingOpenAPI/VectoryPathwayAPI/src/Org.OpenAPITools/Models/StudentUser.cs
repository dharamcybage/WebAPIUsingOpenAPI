/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StudentUser : IEquatable<StudentUser>
    {
        /// <summary>
        /// Gets or Sets StudentId
        /// </summary>
        [DataMember(Name="studentId", EmitDefaultValue=true)]
        public string StudentId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender", EmitDefaultValue=true)]
        public long? Gender { get; set; }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade", EmitDefaultValue=true)]
        public long? Grade { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [Required]
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<StudentUserField> Fields { get; set; }

        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        [DataMember(Name="cluster_id", EmitDefaultValue=true)]
        public long? ClusterId { get; set; }

        /// <summary>
        /// Gets or Sets District
        /// </summary>
        [Required]
        [DataMember(Name="district", EmitDefaultValue=false)]
        public string District { get; set; }

        /// <summary>
        /// Gets or Sets ServiceHours
        /// </summary>
        [DataMember(Name="serviceHours", EmitDefaultValue=true)]
        public double? ServiceHours { get; set; }

        /// <summary>
        /// Gets or Sets RequiredProfileSubmission
        /// </summary>
        [DataMember(Name="requiredProfileSubmission", EmitDefaultValue=true)]
        public long? RequiredProfileSubmission { get; set; }

        /// <summary>
        /// Gets or Sets WblHours
        /// </summary>
        [DataMember(Name="wblHours", EmitDefaultValue=true)]
        public double? WblHours { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [Required]
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [Required]
        [DataMember(Name="school", EmitDefaultValue=false)]
        public string School { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [Required]
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets SpecialPopulations
        /// </summary>
        [DataMember(Name="specialPopulations", EmitDefaultValue=true)]
        public List<long> SpecialPopulations { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [Required]
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets SegmentIds
        /// </summary>
        [Required]
        [DataMember(Name="segment_ids", EmitDefaultValue=false)]
        public List<long> SegmentIds { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImageUrl
        /// </summary>
        [DataMember(Name="profileImageUrl", EmitDefaultValue=true)]
        public string ProfileImageUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentUser {\n");
            sb.Append("  StudentId: ").Append(StudentId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  ServiceHours: ").Append(ServiceHours).Append("\n");
            sb.Append("  RequiredProfileSubmission: ").Append(RequiredProfileSubmission).Append("\n");
            sb.Append("  WblHours: ").Append(WblHours).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  SpecialPopulations: ").Append(SpecialPopulations).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  SegmentIds: ").Append(SegmentIds).Append("\n");
            sb.Append("  ProfileImageUrl: ").Append(ProfileImageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StudentUser)obj);
        }

        /// <summary>
        /// Returns true if StudentUser instances are equal
        /// </summary>
        /// <param name="other">Instance of StudentUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentUser other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StudentId == other.StudentId ||
                    StudentId != null &&
                    StudentId.Equals(other.StudentId)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Gender == other.Gender ||
                    Gender != null &&
                    Gender.Equals(other.Gender)
                ) && 
                (
                    Grade == other.Grade ||
                    Grade != null &&
                    Grade.Equals(other.Grade)
                ) && 
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    other.Fields != null &&
                    Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    ClusterId == other.ClusterId ||
                    ClusterId != null &&
                    ClusterId.Equals(other.ClusterId)
                ) && 
                (
                    District == other.District ||
                    District != null &&
                    District.Equals(other.District)
                ) && 
                (
                    ServiceHours == other.ServiceHours ||
                    ServiceHours != null &&
                    ServiceHours.Equals(other.ServiceHours)
                ) && 
                (
                    RequiredProfileSubmission == other.RequiredProfileSubmission ||
                    RequiredProfileSubmission != null &&
                    RequiredProfileSubmission.Equals(other.RequiredProfileSubmission)
                ) && 
                (
                    WblHours == other.WblHours ||
                    WblHours != null &&
                    WblHours.Equals(other.WblHours)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    School == other.School ||
                    School != null &&
                    School.Equals(other.School)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    SpecialPopulations == other.SpecialPopulations ||
                    SpecialPopulations != null &&
                    other.SpecialPopulations != null &&
                    SpecialPopulations.SequenceEqual(other.SpecialPopulations)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    SegmentIds == other.SegmentIds ||
                    SegmentIds != null &&
                    other.SegmentIds != null &&
                    SegmentIds.SequenceEqual(other.SegmentIds)
                ) && 
                (
                    ProfileImageUrl == other.ProfileImageUrl ||
                    ProfileImageUrl != null &&
                    ProfileImageUrl.Equals(other.ProfileImageUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StudentId != null)
                    hashCode = hashCode * 59 + StudentId.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Gender != null)
                    hashCode = hashCode * 59 + Gender.GetHashCode();
                    if (Grade != null)
                    hashCode = hashCode * 59 + Grade.GetHashCode();
                    if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                    if (ClusterId != null)
                    hashCode = hashCode * 59 + ClusterId.GetHashCode();
                    if (District != null)
                    hashCode = hashCode * 59 + District.GetHashCode();
                    if (ServiceHours != null)
                    hashCode = hashCode * 59 + ServiceHours.GetHashCode();
                    if (RequiredProfileSubmission != null)
                    hashCode = hashCode * 59 + RequiredProfileSubmission.GetHashCode();
                    if (WblHours != null)
                    hashCode = hashCode * 59 + WblHours.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (School != null)
                    hashCode = hashCode * 59 + School.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (SpecialPopulations != null)
                    hashCode = hashCode * 59 + SpecialPopulations.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (SegmentIds != null)
                    hashCode = hashCode * 59 + SegmentIds.GetHashCode();
                    if (ProfileImageUrl != null)
                    hashCode = hashCode * 59 + ProfileImageUrl.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StudentUser left, StudentUser right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StudentUser left, StudentUser right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
