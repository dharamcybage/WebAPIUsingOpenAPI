/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TranseoAdminUserDataResponse : IEquatable<TranseoAdminUserDataResponse>
    {
        /// <summary>
        /// Gets or Sets SupportOrgName
        /// </summary>
        [DataMember(Name="supportOrgName", EmitDefaultValue=true)]
        public string SupportOrgName { get; set; }

        /// <summary>
        /// Gets or Sets SuperUserCanAlsoViewPlatform
        /// </summary>
        [Required]
        [DataMember(Name="superUserCanAlsoViewPlatform", EmitDefaultValue=true)]
        public bool SuperUserCanAlsoViewPlatform { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade", EmitDefaultValue=true)]
        public long? Grade { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [Required]
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets ApproxExitDate
        /// </summary>
        [DataMember(Name="approxExitDate", EmitDefaultValue=true)]
        public string ApproxExitDate { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [Required]
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Schools
        /// </summary>
        [Required]
        [DataMember(Name="schools", EmitDefaultValue=false)]
        public List<BasicSchool> Schools { get; set; }

        /// <summary>
        /// Gets or Sets CanResetPassword
        /// </summary>
        [Required]
        [DataMember(Name="canResetPassword", EmitDefaultValue=true)]
        public bool CanResetPassword { get; set; }

        /// <summary>
        /// Gets or Sets IsDistrictSuperUser
        /// </summary>
        [Required]
        [DataMember(Name="isDistrictSuperUser", EmitDefaultValue=true)]
        public bool IsDistrictSuperUser { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [Required]
        [DataMember(Name="role", EmitDefaultValue=true)]
        public long Role { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets StudentId
        /// </summary>
        [DataMember(Name="studentId", EmitDefaultValue=true)]
        public string StudentId { get; set; }

        /// <summary>
        /// Gets or Sets IsApprovedToUsePlatform
        /// </summary>
        [Required]
        [DataMember(Name="isApprovedToUsePlatform", EmitDefaultValue=true)]
        public bool IsApprovedToUsePlatform { get; set; }

        /// <summary>
        /// Gets or Sets SchoolName
        /// </summary>
        [DataMember(Name="schoolName", EmitDefaultValue=true)]
        public string SchoolName { get; set; }

        /// <summary>
        /// Gets or Sets LastSignInTime
        /// </summary>
        [DataMember(Name="lastSignInTime", EmitDefaultValue=true)]
        public DateTime? LastSignInTime { get; set; }

        /// <summary>
        /// Gets or Sets LastSignInIP
        /// </summary>
        [DataMember(Name="lastSignInIP", EmitDefaultValue=true)]
        public string LastSignInIP { get; set; }

        /// <summary>
        /// Gets or Sets IsTranseoAdmin
        /// </summary>
        [Required]
        [DataMember(Name="isTranseoAdmin", EmitDefaultValue=true)]
        public bool IsTranseoAdmin { get; set; }

        /// <summary>
        /// Gets or Sets Birthday
        /// </summary>
        [DataMember(Name="birthday", EmitDefaultValue=true)]
        public string Birthday { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [Required]
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets DistrictName
        /// </summary>
        [DataMember(Name="districtName", EmitDefaultValue=true)]
        public string DistrictName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TranseoAdminUserDataResponse {\n");
            sb.Append("  SupportOrgName: ").Append(SupportOrgName).Append("\n");
            sb.Append("  SuperUserCanAlsoViewPlatform: ").Append(SuperUserCanAlsoViewPlatform).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  ApproxExitDate: ").Append(ApproxExitDate).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Schools: ").Append(Schools).Append("\n");
            sb.Append("  CanResetPassword: ").Append(CanResetPassword).Append("\n");
            sb.Append("  IsDistrictSuperUser: ").Append(IsDistrictSuperUser).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StudentId: ").Append(StudentId).Append("\n");
            sb.Append("  IsApprovedToUsePlatform: ").Append(IsApprovedToUsePlatform).Append("\n");
            sb.Append("  SchoolName: ").Append(SchoolName).Append("\n");
            sb.Append("  LastSignInTime: ").Append(LastSignInTime).Append("\n");
            sb.Append("  LastSignInIP: ").Append(LastSignInIP).Append("\n");
            sb.Append("  IsTranseoAdmin: ").Append(IsTranseoAdmin).Append("\n");
            sb.Append("  Birthday: ").Append(Birthday).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DistrictName: ").Append(DistrictName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TranseoAdminUserDataResponse)obj);
        }

        /// <summary>
        /// Returns true if TranseoAdminUserDataResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of TranseoAdminUserDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranseoAdminUserDataResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SupportOrgName == other.SupportOrgName ||
                    SupportOrgName != null &&
                    SupportOrgName.Equals(other.SupportOrgName)
                ) && 
                (
                    SuperUserCanAlsoViewPlatform == other.SuperUserCanAlsoViewPlatform ||
                    
                    SuperUserCanAlsoViewPlatform.Equals(other.SuperUserCanAlsoViewPlatform)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Grade == other.Grade ||
                    Grade != null &&
                    Grade.Equals(other.Grade)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    ApproxExitDate == other.ApproxExitDate ||
                    ApproxExitDate != null &&
                    ApproxExitDate.Equals(other.ApproxExitDate)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Schools == other.Schools ||
                    Schools != null &&
                    other.Schools != null &&
                    Schools.SequenceEqual(other.Schools)
                ) && 
                (
                    CanResetPassword == other.CanResetPassword ||
                    
                    CanResetPassword.Equals(other.CanResetPassword)
                ) && 
                (
                    IsDistrictSuperUser == other.IsDistrictSuperUser ||
                    
                    IsDistrictSuperUser.Equals(other.IsDistrictSuperUser)
                ) && 
                (
                    Role == other.Role ||
                    
                    Role.Equals(other.Role)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    StudentId == other.StudentId ||
                    StudentId != null &&
                    StudentId.Equals(other.StudentId)
                ) && 
                (
                    IsApprovedToUsePlatform == other.IsApprovedToUsePlatform ||
                    
                    IsApprovedToUsePlatform.Equals(other.IsApprovedToUsePlatform)
                ) && 
                (
                    SchoolName == other.SchoolName ||
                    SchoolName != null &&
                    SchoolName.Equals(other.SchoolName)
                ) && 
                (
                    LastSignInTime == other.LastSignInTime ||
                    LastSignInTime != null &&
                    LastSignInTime.Equals(other.LastSignInTime)
                ) && 
                (
                    LastSignInIP == other.LastSignInIP ||
                    LastSignInIP != null &&
                    LastSignInIP.Equals(other.LastSignInIP)
                ) && 
                (
                    IsTranseoAdmin == other.IsTranseoAdmin ||
                    
                    IsTranseoAdmin.Equals(other.IsTranseoAdmin)
                ) && 
                (
                    Birthday == other.Birthday ||
                    Birthday != null &&
                    Birthday.Equals(other.Birthday)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    DistrictName == other.DistrictName ||
                    DistrictName != null &&
                    DistrictName.Equals(other.DistrictName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SupportOrgName != null)
                    hashCode = hashCode * 59 + SupportOrgName.GetHashCode();
                    
                    hashCode = hashCode * 59 + SuperUserCanAlsoViewPlatform.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Grade != null)
                    hashCode = hashCode * 59 + Grade.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (ApproxExitDate != null)
                    hashCode = hashCode * 59 + ApproxExitDate.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (Schools != null)
                    hashCode = hashCode * 59 + Schools.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanResetPassword.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsDistrictSuperUser.GetHashCode();
                    
                    hashCode = hashCode * 59 + Role.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (StudentId != null)
                    hashCode = hashCode * 59 + StudentId.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsApprovedToUsePlatform.GetHashCode();
                    if (SchoolName != null)
                    hashCode = hashCode * 59 + SchoolName.GetHashCode();
                    if (LastSignInTime != null)
                    hashCode = hashCode * 59 + LastSignInTime.GetHashCode();
                    if (LastSignInIP != null)
                    hashCode = hashCode * 59 + LastSignInIP.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsTranseoAdmin.GetHashCode();
                    if (Birthday != null)
                    hashCode = hashCode * 59 + Birthday.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (DistrictName != null)
                    hashCode = hashCode * 59 + DistrictName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TranseoAdminUserDataResponse left, TranseoAdminUserDataResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TranseoAdminUserDataResponse left, TranseoAdminUserDataResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
