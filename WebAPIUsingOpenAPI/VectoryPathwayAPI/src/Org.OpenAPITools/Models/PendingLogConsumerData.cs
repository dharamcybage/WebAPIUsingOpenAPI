/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PendingLogConsumerData : IEquatable<PendingLogConsumerData>
    {
        /// <summary>
        /// Gets or Sets ParentsVerified
        /// </summary>
        [Required]
        [DataMember(Name="parentsVerified", EmitDefaultValue=true)]
        public long ParentsVerified { get; set; }

        /// <summary>
        /// Gets or Sets TotalHours
        /// </summary>
        [Required]
        [DataMember(Name="totalHours", EmitDefaultValue=true)]
        public double TotalHours { get; set; }

        /// <summary>
        /// Gets or Sets ServiceEvent
        /// </summary>
        [Required]
        [DataMember(Name="serviceEvent", EmitDefaultValue=false)]
        public ServiceEventNameObject ServiceEvent { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [Required]
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<TagDTO> Tags { get; set; }

        /// <summary>
        /// Gets or Sets DateString
        /// </summary>
        [Required]
        [DataMember(Name="dateString", EmitDefaultValue=false)]
        public string DateString { get; set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [Required]
        [DataMember(Name="verified", EmitDefaultValue=true)]
        public bool Verified { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [Required]
        [DataMember(Name="user", EmitDefaultValue=false)]
        public PendingLogConsumerDataUser User { get; set; }

        /// <summary>
        /// Gets or Sets Sponsor
        /// </summary>
        [DataMember(Name="sponsor", EmitDefaultValue=false)]
        public ServiceSponsorVerifiedData Sponsor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PendingLogConsumerData {\n");
            sb.Append("  ParentsVerified: ").Append(ParentsVerified).Append("\n");
            sb.Append("  TotalHours: ").Append(TotalHours).Append("\n");
            sb.Append("  ServiceEvent: ").Append(ServiceEvent).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  DateString: ").Append(DateString).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Sponsor: ").Append(Sponsor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PendingLogConsumerData)obj);
        }

        /// <summary>
        /// Returns true if PendingLogConsumerData instances are equal
        /// </summary>
        /// <param name="other">Instance of PendingLogConsumerData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PendingLogConsumerData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ParentsVerified == other.ParentsVerified ||
                    
                    ParentsVerified.Equals(other.ParentsVerified)
                ) && 
                (
                    TotalHours == other.TotalHours ||
                    
                    TotalHours.Equals(other.TotalHours)
                ) && 
                (
                    ServiceEvent == other.ServiceEvent ||
                    ServiceEvent != null &&
                    ServiceEvent.Equals(other.ServiceEvent)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    DateString == other.DateString ||
                    DateString != null &&
                    DateString.Equals(other.DateString)
                ) && 
                (
                    Verified == other.Verified ||
                    
                    Verified.Equals(other.Verified)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    Sponsor == other.Sponsor ||
                    Sponsor != null &&
                    Sponsor.Equals(other.Sponsor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ParentsVerified.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalHours.GetHashCode();
                    if (ServiceEvent != null)
                    hashCode = hashCode * 59 + ServiceEvent.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (DateString != null)
                    hashCode = hashCode * 59 + DateString.GetHashCode();
                    
                    hashCode = hashCode * 59 + Verified.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (Sponsor != null)
                    hashCode = hashCode * 59 + Sponsor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PendingLogConsumerData left, PendingLogConsumerData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PendingLogConsumerData left, PendingLogConsumerData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
