/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FormSubmissionResponse : IEquatable<FormSubmissionResponse>
    {
        /// <summary>
        /// Gets or Sets AssociatedUsers
        /// </summary>
        [Required]
        [DataMember(Name="associatedUsers", EmitDefaultValue=false)]
        public List<FormSubmissionResponseAssociatedUserDTO> AssociatedUsers { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Approvals
        /// </summary>
        [Required]
        [DataMember(Name="approvals", EmitDefaultValue=false)]
        public List<FormSubmissionResponseApproval> Approvals { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [Required]
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<FormSubmissionResponseField> Fields { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [Required]
        [DataMember(Name="user", EmitDefaultValue=false)]
        public BasicUser User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormSubmissionResponse {\n");
            sb.Append("  AssociatedUsers: ").Append(AssociatedUsers).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Approvals: ").Append(Approvals).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FormSubmissionResponse)obj);
        }

        /// <summary>
        /// Returns true if FormSubmissionResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of FormSubmissionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormSubmissionResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AssociatedUsers == other.AssociatedUsers ||
                    AssociatedUsers != null &&
                    other.AssociatedUsers != null &&
                    AssociatedUsers.SequenceEqual(other.AssociatedUsers)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Approvals == other.Approvals ||
                    Approvals != null &&
                    other.Approvals != null &&
                    Approvals.SequenceEqual(other.Approvals)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    other.Fields != null &&
                    Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AssociatedUsers != null)
                    hashCode = hashCode * 59 + AssociatedUsers.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Approvals != null)
                    hashCode = hashCode * 59 + Approvals.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FormSubmissionResponse left, FormSubmissionResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FormSubmissionResponse left, FormSubmissionResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
