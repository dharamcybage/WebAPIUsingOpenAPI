/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ParchmentRequestReceiverDTO : IEquatable<ParchmentRequestReceiverDTO>
    {
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage", EmitDefaultValue=true)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ReceiverId
        /// </summary>
        [Required]
        [DataMember(Name="receiver_id", EmitDefaultValue=true)]
        public long ReceiverId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ParchmentRequestId
        /// </summary>
        [Required]
        [DataMember(Name="parchment_request_id", EmitDefaultValue=true)]
        public long ParchmentRequestId { get; set; }

        /// <summary>
        /// Gets or Sets RequestTrackingId
        /// </summary>
        [Required]
        [DataMember(Name="requestTrackingId", EmitDefaultValue=false)]
        public string RequestTrackingId { get; set; }

        /// <summary>
        /// Gets or Sets SuccessMessage
        /// </summary>
        [DataMember(Name="successMessage", EmitDefaultValue=true)]
        public string SuccessMessage { get; set; }

        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name="documentId", EmitDefaultValue=true)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public long Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParchmentRequestReceiverDTO {\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ReceiverId: ").Append(ReceiverId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ParchmentRequestId: ").Append(ParchmentRequestId).Append("\n");
            sb.Append("  RequestTrackingId: ").Append(RequestTrackingId).Append("\n");
            sb.Append("  SuccessMessage: ").Append(SuccessMessage).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ParchmentRequestReceiverDTO)obj);
        }

        /// <summary>
        /// Returns true if ParchmentRequestReceiverDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ParchmentRequestReceiverDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParchmentRequestReceiverDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ErrorMessage == other.ErrorMessage ||
                    ErrorMessage != null &&
                    ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    ReceiverId == other.ReceiverId ||
                    
                    ReceiverId.Equals(other.ReceiverId)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    ParchmentRequestId == other.ParchmentRequestId ||
                    
                    ParchmentRequestId.Equals(other.ParchmentRequestId)
                ) && 
                (
                    RequestTrackingId == other.RequestTrackingId ||
                    RequestTrackingId != null &&
                    RequestTrackingId.Equals(other.RequestTrackingId)
                ) && 
                (
                    SuccessMessage == other.SuccessMessage ||
                    SuccessMessage != null &&
                    SuccessMessage.Equals(other.SuccessMessage)
                ) && 
                (
                    DocumentId == other.DocumentId ||
                    DocumentId != null &&
                    DocumentId.Equals(other.DocumentId)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ErrorMessage != null)
                    hashCode = hashCode * 59 + ErrorMessage.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReceiverId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + ParchmentRequestId.GetHashCode();
                    if (RequestTrackingId != null)
                    hashCode = hashCode * 59 + RequestTrackingId.GetHashCode();
                    if (SuccessMessage != null)
                    hashCode = hashCode * 59 + SuccessMessage.GetHashCode();
                    if (DocumentId != null)
                    hashCode = hashCode * 59 + DocumentId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ParchmentRequestReceiverDTO left, ParchmentRequestReceiverDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ParchmentRequestReceiverDTO left, ParchmentRequestReceiverDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
