/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateTimeLogRequest : IEquatable<CreateTimeLogRequest>
    {
        /// <summary>
        /// Gets or Sets EndTimeUnix
        /// </summary>
        [Required]
        [DataMember(Name="endTimeUnix", EmitDefaultValue=false)]
        public DateTime EndTimeUnix { get; set; }

        /// <summary>
        /// Gets or Sets StartTimeUnix
        /// </summary>
        [Required]
        [DataMember(Name="startTimeUnix", EmitDefaultValue=false)]
        public DateTime StartTimeUnix { get; set; }

        /// <summary>
        /// Gets or Sets Hours
        /// </summary>
        [Required]
        [DataMember(Name="hours", EmitDefaultValue=true)]
        public double Hours { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [Required]
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets ReflectionText
        /// </summary>
        [DataMember(Name="reflectionText", EmitDefaultValue=true)]
        public string ReflectionText { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [Required]
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [Required]
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Gets or Sets SubmissionId
        /// </summary>
        [DataMember(Name="submission_id", EmitDefaultValue=true)]
        public long? SubmissionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTimeLogRequest {\n");
            sb.Append("  EndTimeUnix: ").Append(EndTimeUnix).Append("\n");
            sb.Append("  StartTimeUnix: ").Append(StartTimeUnix).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  ReflectionText: ").Append(ReflectionText).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  SubmissionId: ").Append(SubmissionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateTimeLogRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateTimeLogRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateTimeLogRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTimeLogRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EndTimeUnix == other.EndTimeUnix ||
                    EndTimeUnix != null &&
                    EndTimeUnix.Equals(other.EndTimeUnix)
                ) && 
                (
                    StartTimeUnix == other.StartTimeUnix ||
                    StartTimeUnix != null &&
                    StartTimeUnix.Equals(other.StartTimeUnix)
                ) && 
                (
                    Hours == other.Hours ||
                    
                    Hours.Equals(other.Hours)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    ReflectionText == other.ReflectionText ||
                    ReflectionText != null &&
                    ReflectionText.Equals(other.ReflectionText)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                ) && 
                (
                    SubmissionId == other.SubmissionId ||
                    SubmissionId != null &&
                    SubmissionId.Equals(other.SubmissionId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EndTimeUnix != null)
                    hashCode = hashCode * 59 + EndTimeUnix.GetHashCode();
                    if (StartTimeUnix != null)
                    hashCode = hashCode * 59 + StartTimeUnix.GetHashCode();
                    
                    hashCode = hashCode * 59 + Hours.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (ReflectionText != null)
                    hashCode = hashCode * 59 + ReflectionText.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    if (SubmissionId != null)
                    hashCode = hashCode * 59 + SubmissionId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateTimeLogRequest left, CreateTimeLogRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateTimeLogRequest left, CreateTimeLogRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
