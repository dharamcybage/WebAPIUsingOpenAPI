/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateNewClientRequestSchool : IEquatable<CreateNewClientRequestSchool>
    {
        /// <summary>
        /// Gets or Sets OneRosterId
        /// </summary>
        [DataMember(Name="oneRosterId", EmitDefaultValue=true)]
        public string OneRosterId { get; set; }

        /// <summary>
        /// Gets or Sets SsoId
        /// </summary>
        [DataMember(Name="ssoId", EmitDefaultValue=true)]
        public string SsoId { get; set; }

        /// <summary>
        /// Gets or Sets StartingGrade
        /// </summary>
        [Required]
        [DataMember(Name="startingGrade", EmitDefaultValue=true)]
        public long StartingGrade { get; set; }

        /// <summary>
        /// Gets or Sets EndingGrade
        /// </summary>
        [Required]
        [DataMember(Name="endingGrade", EmitDefaultValue=true)]
        public long EndingGrade { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [Required]
        [DataMember(Name="shortName", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets InternalCode
        /// </summary>
        [DataMember(Name="internalCode", EmitDefaultValue=true)]
        public string InternalCode { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [Required]
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets NcesID
        /// </summary>
        [Required]
        [DataMember(Name="ncesID", EmitDefaultValue=false)]
        public string NcesID { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TimeZoneKey
        /// </summary>
        [Required]
        [DataMember(Name="timeZoneKey", EmitDefaultValue=false)]
        public string TimeZoneKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateNewClientRequestSchool {\n");
            sb.Append("  OneRosterId: ").Append(OneRosterId).Append("\n");
            sb.Append("  SsoId: ").Append(SsoId).Append("\n");
            sb.Append("  StartingGrade: ").Append(StartingGrade).Append("\n");
            sb.Append("  EndingGrade: ").Append(EndingGrade).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  InternalCode: ").Append(InternalCode).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  NcesID: ").Append(NcesID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TimeZoneKey: ").Append(TimeZoneKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateNewClientRequestSchool)obj);
        }

        /// <summary>
        /// Returns true if CreateNewClientRequestSchool instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateNewClientRequestSchool to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateNewClientRequestSchool other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OneRosterId == other.OneRosterId ||
                    OneRosterId != null &&
                    OneRosterId.Equals(other.OneRosterId)
                ) && 
                (
                    SsoId == other.SsoId ||
                    SsoId != null &&
                    SsoId.Equals(other.SsoId)
                ) && 
                (
                    StartingGrade == other.StartingGrade ||
                    
                    StartingGrade.Equals(other.StartingGrade)
                ) && 
                (
                    EndingGrade == other.EndingGrade ||
                    
                    EndingGrade.Equals(other.EndingGrade)
                ) && 
                (
                    ShortName == other.ShortName ||
                    ShortName != null &&
                    ShortName.Equals(other.ShortName)
                ) && 
                (
                    InternalCode == other.InternalCode ||
                    InternalCode != null &&
                    InternalCode.Equals(other.InternalCode)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    NcesID == other.NcesID ||
                    NcesID != null &&
                    NcesID.Equals(other.NcesID)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    TimeZoneKey == other.TimeZoneKey ||
                    TimeZoneKey != null &&
                    TimeZoneKey.Equals(other.TimeZoneKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OneRosterId != null)
                    hashCode = hashCode * 59 + OneRosterId.GetHashCode();
                    if (SsoId != null)
                    hashCode = hashCode * 59 + SsoId.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartingGrade.GetHashCode();
                    
                    hashCode = hashCode * 59 + EndingGrade.GetHashCode();
                    if (ShortName != null)
                    hashCode = hashCode * 59 + ShortName.GetHashCode();
                    if (InternalCode != null)
                    hashCode = hashCode * 59 + InternalCode.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (NcesID != null)
                    hashCode = hashCode * 59 + NcesID.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (TimeZoneKey != null)
                    hashCode = hashCode * 59 + TimeZoneKey.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateNewClientRequestSchool left, CreateNewClientRequestSchool right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateNewClientRequestSchool left, CreateNewClientRequestSchool right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
