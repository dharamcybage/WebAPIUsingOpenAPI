/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ExperienceDTO : IEquatable<ExperienceDTO>
    {
        /// <summary>
        /// Gets or Sets OrganizationName
        /// </summary>
        [DataMember(Name="organizationName", EmitDefaultValue=true)]
        public string OrganizationName { get; set; }

        /// <summary>
        /// Gets or Sets ReflectionFormId
        /// </summary>
        [DataMember(Name="reflection_form_id", EmitDefaultValue=true)]
        public long? ReflectionFormId { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name="contactName", EmitDefaultValue=true)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets HideFromSearch
        /// </summary>
        [Required]
        [DataMember(Name="hideFromSearch", EmitDefaultValue=true)]
        public bool HideFromSearch { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name="location_id", EmitDefaultValue=true)]
        public long? LocationId { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [Required]
        [DataMember(Name="organization_id", EmitDefaultValue=true)]
        public long OrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [Required]
        [DataMember(Name="created_by", EmitDefaultValue=true)]
        public long CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deletedAt", EmitDefaultValue=true)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FormId
        /// </summary>
        [DataMember(Name="form_id", EmitDefaultValue=true)]
        public long? FormId { get; set; }

        /// <summary>
        /// Gets or Sets ReflectionFormApproval
        /// </summary>
        [DataMember(Name="reflection_form_approval", EmitDefaultValue=true)]
        public long? ReflectionFormApproval { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ConditionalBadgeGroupId
        /// </summary>
        [DataMember(Name="conditional_badge_group_id", EmitDefaultValue=true)]
        public long? ConditionalBadgeGroupId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [Required]
        [DataMember(Name="contact_id", EmitDefaultValue=true)]
        public long ContactId { get; set; }

        /// <summary>
        /// Gets or Sets AllowsTotalTimelogHoursSubmission
        /// </summary>
        [Required]
        [DataMember(Name="allowsTotalTimelogHoursSubmission", EmitDefaultValue=true)]
        public bool AllowsTotalTimelogHoursSubmission { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfSpots
        /// </summary>
        [DataMember(Name="numberOfSpots", EmitDefaultValue=true)]
        public long? NumberOfSpots { get; set; }

        /// <summary>
        /// Gets or Sets FormSubmissionId
        /// </summary>
        [DataMember(Name="form_submission_id", EmitDefaultValue=true)]
        public long? FormSubmissionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExperienceDTO {\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  ReflectionFormId: ").Append(ReflectionFormId).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  HideFromSearch: ").Append(HideFromSearch).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  ReflectionFormApproval: ").Append(ReflectionFormApproval).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ConditionalBadgeGroupId: ").Append(ConditionalBadgeGroupId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  AllowsTotalTimelogHoursSubmission: ").Append(AllowsTotalTimelogHoursSubmission).Append("\n");
            sb.Append("  NumberOfSpots: ").Append(NumberOfSpots).Append("\n");
            sb.Append("  FormSubmissionId: ").Append(FormSubmissionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExperienceDTO)obj);
        }

        /// <summary>
        /// Returns true if ExperienceDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ExperienceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExperienceDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OrganizationName == other.OrganizationName ||
                    OrganizationName != null &&
                    OrganizationName.Equals(other.OrganizationName)
                ) && 
                (
                    ReflectionFormId == other.ReflectionFormId ||
                    ReflectionFormId != null &&
                    ReflectionFormId.Equals(other.ReflectionFormId)
                ) && 
                (
                    ContactName == other.ContactName ||
                    ContactName != null &&
                    ContactName.Equals(other.ContactName)
                ) && 
                (
                    HideFromSearch == other.HideFromSearch ||
                    
                    HideFromSearch.Equals(other.HideFromSearch)
                ) && 
                (
                    LocationId == other.LocationId ||
                    LocationId != null &&
                    LocationId.Equals(other.LocationId)
                ) && 
                (
                    OrganizationId == other.OrganizationId ||
                    
                    OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    DeletedAt == other.DeletedAt ||
                    DeletedAt != null &&
                    DeletedAt.Equals(other.DeletedAt)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    FormId == other.FormId ||
                    FormId != null &&
                    FormId.Equals(other.FormId)
                ) && 
                (
                    ReflectionFormApproval == other.ReflectionFormApproval ||
                    ReflectionFormApproval != null &&
                    ReflectionFormApproval.Equals(other.ReflectionFormApproval)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    ConditionalBadgeGroupId == other.ConditionalBadgeGroupId ||
                    ConditionalBadgeGroupId != null &&
                    ConditionalBadgeGroupId.Equals(other.ConditionalBadgeGroupId)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    ContactId == other.ContactId ||
                    
                    ContactId.Equals(other.ContactId)
                ) && 
                (
                    AllowsTotalTimelogHoursSubmission == other.AllowsTotalTimelogHoursSubmission ||
                    
                    AllowsTotalTimelogHoursSubmission.Equals(other.AllowsTotalTimelogHoursSubmission)
                ) && 
                (
                    NumberOfSpots == other.NumberOfSpots ||
                    NumberOfSpots != null &&
                    NumberOfSpots.Equals(other.NumberOfSpots)
                ) && 
                (
                    FormSubmissionId == other.FormSubmissionId ||
                    FormSubmissionId != null &&
                    FormSubmissionId.Equals(other.FormSubmissionId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OrganizationName != null)
                    hashCode = hashCode * 59 + OrganizationName.GetHashCode();
                    if (ReflectionFormId != null)
                    hashCode = hashCode * 59 + ReflectionFormId.GetHashCode();
                    if (ContactName != null)
                    hashCode = hashCode * 59 + ContactName.GetHashCode();
                    
                    hashCode = hashCode * 59 + HideFromSearch.GetHashCode();
                    if (LocationId != null)
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                    
                    hashCode = hashCode * 59 + OrganizationId.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (DeletedAt != null)
                    hashCode = hashCode * 59 + DeletedAt.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (FormId != null)
                    hashCode = hashCode * 59 + FormId.GetHashCode();
                    if (ReflectionFormApproval != null)
                    hashCode = hashCode * 59 + ReflectionFormApproval.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (ConditionalBadgeGroupId != null)
                    hashCode = hashCode * 59 + ConditionalBadgeGroupId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + ContactId.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowsTotalTimelogHoursSubmission.GetHashCode();
                    if (NumberOfSpots != null)
                    hashCode = hashCode * 59 + NumberOfSpots.GetHashCode();
                    if (FormSubmissionId != null)
                    hashCode = hashCode * 59 + FormSubmissionId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExperienceDTO left, ExperienceDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExperienceDTO left, ExperienceDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
