/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProposeExperienceFormResponse : IEquatable<ProposeExperienceFormResponse>
    {
        /// <summary>
        /// Gets or Sets ExperienceForm
        /// </summary>
        [DataMember(Name="experienceForm", EmitDefaultValue=false)]
        public FormResponse ExperienceForm { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [Required]
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<ProposeExperienceFormResponseContact> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets ContactForm
        /// </summary>
        [DataMember(Name="contactForm", EmitDefaultValue=false)]
        public FormResponse ContactForm { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationForm
        /// </summary>
        [DataMember(Name="organizationForm", EmitDefaultValue=false)]
        public FormResponse OrganizationForm { get; set; }

        /// <summary>
        /// Gets or Sets Orgs
        /// </summary>
        [Required]
        [DataMember(Name="orgs", EmitDefaultValue=false)]
        public List<ProposeExperienceFormResponseOrg> Orgs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProposeExperienceFormResponse {\n");
            sb.Append("  ExperienceForm: ").Append(ExperienceForm).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  ContactForm: ").Append(ContactForm).Append("\n");
            sb.Append("  OrganizationForm: ").Append(OrganizationForm).Append("\n");
            sb.Append("  Orgs: ").Append(Orgs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProposeExperienceFormResponse)obj);
        }

        /// <summary>
        /// Returns true if ProposeExperienceFormResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ProposeExperienceFormResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProposeExperienceFormResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExperienceForm == other.ExperienceForm ||
                    ExperienceForm != null &&
                    ExperienceForm.Equals(other.ExperienceForm)
                ) && 
                (
                    Contacts == other.Contacts ||
                    Contacts != null &&
                    other.Contacts != null &&
                    Contacts.SequenceEqual(other.Contacts)
                ) && 
                (
                    ContactForm == other.ContactForm ||
                    ContactForm != null &&
                    ContactForm.Equals(other.ContactForm)
                ) && 
                (
                    OrganizationForm == other.OrganizationForm ||
                    OrganizationForm != null &&
                    OrganizationForm.Equals(other.OrganizationForm)
                ) && 
                (
                    Orgs == other.Orgs ||
                    Orgs != null &&
                    other.Orgs != null &&
                    Orgs.SequenceEqual(other.Orgs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExperienceForm != null)
                    hashCode = hashCode * 59 + ExperienceForm.GetHashCode();
                    if (Contacts != null)
                    hashCode = hashCode * 59 + Contacts.GetHashCode();
                    if (ContactForm != null)
                    hashCode = hashCode * 59 + ContactForm.GetHashCode();
                    if (OrganizationForm != null)
                    hashCode = hashCode * 59 + OrganizationForm.GetHashCode();
                    if (Orgs != null)
                    hashCode = hashCode * 59 + Orgs.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProposeExperienceFormResponse left, ProposeExperienceFormResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProposeExperienceFormResponse left, ProposeExperienceFormResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
