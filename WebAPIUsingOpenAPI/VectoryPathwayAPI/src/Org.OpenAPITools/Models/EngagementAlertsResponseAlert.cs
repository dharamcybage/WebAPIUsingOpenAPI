/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EngagementAlertsResponseAlert : IEquatable<EngagementAlertsResponseAlert>
    {
        /// <summary>
        /// Gets or Sets UserExperienceAlert
        /// </summary>
        [DataMember(Name="userExperienceAlert", EmitDefaultValue=false)]
        public UserExperienceAlertDTO UserExperienceAlert { get; set; }

        /// <summary>
        /// Gets or Sets TimeLog
        /// </summary>
        [DataMember(Name="timeLog", EmitDefaultValue=false)]
        public TimeLogDTO TimeLog { get; set; }

        /// <summary>
        /// Gets or Sets Experience
        /// </summary>
        [Required]
        [DataMember(Name="experience", EmitDefaultValue=false)]
        public ExperienceDTO Experience { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public LocationDTO Location { get; set; }

        /// <summary>
        /// Gets or Sets Shift
        /// </summary>
        [Required]
        [DataMember(Name="shift", EmitDefaultValue=false)]
        public ShiftDTO Shift { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public long Type { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [Required]
        [DataMember(Name="user", EmitDefaultValue=false)]
        public BasicUser User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EngagementAlertsResponseAlert {\n");
            sb.Append("  UserExperienceAlert: ").Append(UserExperienceAlert).Append("\n");
            sb.Append("  TimeLog: ").Append(TimeLog).Append("\n");
            sb.Append("  Experience: ").Append(Experience).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Shift: ").Append(Shift).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EngagementAlertsResponseAlert)obj);
        }

        /// <summary>
        /// Returns true if EngagementAlertsResponseAlert instances are equal
        /// </summary>
        /// <param name="other">Instance of EngagementAlertsResponseAlert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EngagementAlertsResponseAlert other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserExperienceAlert == other.UserExperienceAlert ||
                    UserExperienceAlert != null &&
                    UserExperienceAlert.Equals(other.UserExperienceAlert)
                ) && 
                (
                    TimeLog == other.TimeLog ||
                    TimeLog != null &&
                    TimeLog.Equals(other.TimeLog)
                ) && 
                (
                    Experience == other.Experience ||
                    Experience != null &&
                    Experience.Equals(other.Experience)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    Shift == other.Shift ||
                    Shift != null &&
                    Shift.Equals(other.Shift)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserExperienceAlert != null)
                    hashCode = hashCode * 59 + UserExperienceAlert.GetHashCode();
                    if (TimeLog != null)
                    hashCode = hashCode * 59 + TimeLog.GetHashCode();
                    if (Experience != null)
                    hashCode = hashCode * 59 + Experience.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Shift != null)
                    hashCode = hashCode * 59 + Shift.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EngagementAlertsResponseAlert left, EngagementAlertsResponseAlert right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EngagementAlertsResponseAlert left, EngagementAlertsResponseAlert right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
