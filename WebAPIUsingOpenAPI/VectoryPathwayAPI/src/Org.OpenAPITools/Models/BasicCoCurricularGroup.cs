/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BasicCoCurricularGroup : IEquatable<BasicCoCurricularGroup>
    {
        /// <summary>
        /// Gets or Sets HasService
        /// </summary>
        [Required]
        [DataMember(Name="hasService", EmitDefaultValue=true)]
        public bool HasService { get; set; }

        /// <summary>
        /// Gets or Sets HasEngage
        /// </summary>
        [Required]
        [DataMember(Name="hasEngage", EmitDefaultValue=true)]
        public bool HasEngage { get; set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name="admin", EmitDefaultValue=false)]
        public BasicUser Admin { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AdminId
        /// </summary>
        [DataMember(Name="admin_id", EmitDefaultValue=true)]
        public long? AdminId { get; set; }

        /// <summary>
        /// Gets or Sets JoinCode
        /// </summary>
        [Required]
        [DataMember(Name="joinCode", EmitDefaultValue=false)]
        public string JoinCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicCoCurricularGroup {\n");
            sb.Append("  HasService: ").Append(HasService).Append("\n");
            sb.Append("  HasEngage: ").Append(HasEngage).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AdminId: ").Append(AdminId).Append("\n");
            sb.Append("  JoinCode: ").Append(JoinCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BasicCoCurricularGroup)obj);
        }

        /// <summary>
        /// Returns true if BasicCoCurricularGroup instances are equal
        /// </summary>
        /// <param name="other">Instance of BasicCoCurricularGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicCoCurricularGroup other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HasService == other.HasService ||
                    
                    HasService.Equals(other.HasService)
                ) && 
                (
                    HasEngage == other.HasEngage ||
                    
                    HasEngage.Equals(other.HasEngage)
                ) && 
                (
                    Admin == other.Admin ||
                    Admin != null &&
                    Admin.Equals(other.Admin)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    AdminId == other.AdminId ||
                    AdminId != null &&
                    AdminId.Equals(other.AdminId)
                ) && 
                (
                    JoinCode == other.JoinCode ||
                    JoinCode != null &&
                    JoinCode.Equals(other.JoinCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + HasService.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasEngage.GetHashCode();
                    if (Admin != null)
                    hashCode = hashCode * 59 + Admin.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (AdminId != null)
                    hashCode = hashCode * 59 + AdminId.GetHashCode();
                    if (JoinCode != null)
                    hashCode = hashCode * 59 + JoinCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BasicCoCurricularGroup left, BasicCoCurricularGroup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BasicCoCurricularGroup left, BasicCoCurricularGroup right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
