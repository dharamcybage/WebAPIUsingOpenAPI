/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdminExperiencesControllerTimeLogApprovalItem : IEquatable<AdminExperiencesControllerTimeLogApprovalItem>
    {
        /// <summary>
        /// Gets or Sets StudentName
        /// </summary>
        [Required]
        [DataMember(Name="studentName", EmitDefaultValue=false)]
        public string StudentName { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceName
        /// </summary>
        [Required]
        [DataMember(Name="experienceName", EmitDefaultValue=false)]
        public string ExperienceName { get; set; }

        /// <summary>
        /// Gets or Sets FormSubmissionId
        /// </summary>
        [DataMember(Name="form_submission_id", EmitDefaultValue=true)]
        public long? FormSubmissionId { get; set; }

        /// <summary>
        /// Gets or Sets FormId
        /// </summary>
        [DataMember(Name="form_id", EmitDefaultValue=true)]
        public long? FormId { get; set; }

        /// <summary>
        /// Gets or Sets StudentReflectionText
        /// </summary>
        [DataMember(Name="studentReflectionText", EmitDefaultValue=true)]
        public string StudentReflectionText { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Hours
        /// </summary>
        [Required]
        [DataMember(Name="hours", EmitDefaultValue=true)]
        public double Hours { get; set; }

        /// <summary>
        /// Gets or Sets Supervisor
        /// </summary>
        [Required]
        [DataMember(Name="supervisor", EmitDefaultValue=true)]
        public bool Supervisor { get; set; }

        /// <summary>
        /// Gets or Sets Dates
        /// </summary>
        [Required]
        [DataMember(Name="dates", EmitDefaultValue=false)]
        public string Dates { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceId
        /// </summary>
        [Required]
        [DataMember(Name="experienceId", EmitDefaultValue=true)]
        public long ExperienceId { get; set; }

        /// <summary>
        /// Gets or Sets IsPayPeriod
        /// </summary>
        [Required]
        [DataMember(Name="isPayPeriod", EmitDefaultValue=true)]
        public bool IsPayPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminExperiencesControllerTimeLogApprovalItem {\n");
            sb.Append("  StudentName: ").Append(StudentName).Append("\n");
            sb.Append("  ExperienceName: ").Append(ExperienceName).Append("\n");
            sb.Append("  FormSubmissionId: ").Append(FormSubmissionId).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  StudentReflectionText: ").Append(StudentReflectionText).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Supervisor: ").Append(Supervisor).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  ExperienceId: ").Append(ExperienceId).Append("\n");
            sb.Append("  IsPayPeriod: ").Append(IsPayPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdminExperiencesControllerTimeLogApprovalItem)obj);
        }

        /// <summary>
        /// Returns true if AdminExperiencesControllerTimeLogApprovalItem instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminExperiencesControllerTimeLogApprovalItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminExperiencesControllerTimeLogApprovalItem other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StudentName == other.StudentName ||
                    StudentName != null &&
                    StudentName.Equals(other.StudentName)
                ) && 
                (
                    ExperienceName == other.ExperienceName ||
                    ExperienceName != null &&
                    ExperienceName.Equals(other.ExperienceName)
                ) && 
                (
                    FormSubmissionId == other.FormSubmissionId ||
                    FormSubmissionId != null &&
                    FormSubmissionId.Equals(other.FormSubmissionId)
                ) && 
                (
                    FormId == other.FormId ||
                    FormId != null &&
                    FormId.Equals(other.FormId)
                ) && 
                (
                    StudentReflectionText == other.StudentReflectionText ||
                    StudentReflectionText != null &&
                    StudentReflectionText.Equals(other.StudentReflectionText)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Hours == other.Hours ||
                    
                    Hours.Equals(other.Hours)
                ) && 
                (
                    Supervisor == other.Supervisor ||
                    
                    Supervisor.Equals(other.Supervisor)
                ) && 
                (
                    Dates == other.Dates ||
                    Dates != null &&
                    Dates.Equals(other.Dates)
                ) && 
                (
                    ExperienceId == other.ExperienceId ||
                    
                    ExperienceId.Equals(other.ExperienceId)
                ) && 
                (
                    IsPayPeriod == other.IsPayPeriod ||
                    
                    IsPayPeriod.Equals(other.IsPayPeriod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StudentName != null)
                    hashCode = hashCode * 59 + StudentName.GetHashCode();
                    if (ExperienceName != null)
                    hashCode = hashCode * 59 + ExperienceName.GetHashCode();
                    if (FormSubmissionId != null)
                    hashCode = hashCode * 59 + FormSubmissionId.GetHashCode();
                    if (FormId != null)
                    hashCode = hashCode * 59 + FormId.GetHashCode();
                    if (StudentReflectionText != null)
                    hashCode = hashCode * 59 + StudentReflectionText.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Hours.GetHashCode();
                    
                    hashCode = hashCode * 59 + Supervisor.GetHashCode();
                    if (Dates != null)
                    hashCode = hashCode * 59 + Dates.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExperienceId.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsPayPeriod.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdminExperiencesControllerTimeLogApprovalItem left, AdminExperiencesControllerTimeLogApprovalItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdminExperiencesControllerTimeLogApprovalItem left, AdminExperiencesControllerTimeLogApprovalItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
