/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OverallEngagementAlertDataResponse : IEquatable<OverallEngagementAlertDataResponse>
    {
        /// <summary>
        /// Gets or Sets PunchedInStudents
        /// </summary>
        [Required]
        [DataMember(Name="punchedInStudents", EmitDefaultValue=false)]
        public List<BasicUser> PunchedInStudents { get; set; }

        /// <summary>
        /// Gets or Sets PrePercentage
        /// </summary>
        [Required]
        [DataMember(Name="prePercentage", EmitDefaultValue=true)]
        public double PrePercentage { get; set; }

        /// <summary>
        /// Gets or Sets PunchedInPercentage
        /// </summary>
        [Required]
        [DataMember(Name="punchedInPercentage", EmitDefaultValue=true)]
        public double PunchedInPercentage { get; set; }

        /// <summary>
        /// Gets or Sets AttendancePositiveStudents
        /// </summary>
        [Required]
        [DataMember(Name="attendancePositiveStudents", EmitDefaultValue=false)]
        public List<BasicUser> AttendancePositiveStudents { get; set; }

        /// <summary>
        /// Gets or Sets PreStudents
        /// </summary>
        [Required]
        [DataMember(Name="preStudents", EmitDefaultValue=false)]
        public List<BasicUser> PreStudents { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledNegativeStudents
        /// </summary>
        [Required]
        [DataMember(Name="scheduledNegativeStudents", EmitDefaultValue=false)]
        public List<BasicUser> ScheduledNegativeStudents { get; set; }

        /// <summary>
        /// Gets or Sets ProperLocationNegativeStudents
        /// </summary>
        [Required]
        [DataMember(Name="properLocationNegativeStudents", EmitDefaultValue=false)]
        public List<BasicUser> ProperLocationNegativeStudents { get; set; }

        /// <summary>
        /// Gets or Sets PostStudents
        /// </summary>
        [Required]
        [DataMember(Name="postStudents", EmitDefaultValue=false)]
        public List<BasicUser> PostStudents { get; set; }

        /// <summary>
        /// Gets or Sets PunchedInNegativeStudents
        /// </summary>
        [Required]
        [DataMember(Name="punchedInNegativeStudents", EmitDefaultValue=false)]
        public List<BasicUser> PunchedInNegativeStudents { get; set; }

        /// <summary>
        /// Gets or Sets ProperLocationPercentage
        /// </summary>
        [Required]
        [DataMember(Name="properLocationPercentage", EmitDefaultValue=true)]
        public double ProperLocationPercentage { get; set; }

        /// <summary>
        /// Gets or Sets ProperLocationStudents
        /// </summary>
        [Required]
        [DataMember(Name="properLocationStudents", EmitDefaultValue=false)]
        public List<BasicUser> ProperLocationStudents { get; set; }

        /// <summary>
        /// Gets or Sets GeneralInfoPercentage
        /// </summary>
        [Required]
        [DataMember(Name="generalInfoPercentage", EmitDefaultValue=true)]
        public double GeneralInfoPercentage { get; set; }

        /// <summary>
        /// Gets or Sets AttendanceNegativeStudents
        /// </summary>
        [Required]
        [DataMember(Name="attendanceNegativeStudents", EmitDefaultValue=false)]
        public List<BasicUser> AttendanceNegativeStudents { get; set; }

        /// <summary>
        /// Gets or Sets PostPercentage
        /// </summary>
        [Required]
        [DataMember(Name="postPercentage", EmitDefaultValue=true)]
        public double PostPercentage { get; set; }

        /// <summary>
        /// Gets or Sets DuringPercentage
        /// </summary>
        [Required]
        [DataMember(Name="duringPercentage", EmitDefaultValue=true)]
        public double DuringPercentage { get; set; }

        /// <summary>
        /// Gets or Sets GeneralInfoStudents
        /// </summary>
        [Required]
        [DataMember(Name="generalInfoStudents", EmitDefaultValue=false)]
        public List<BasicUser> GeneralInfoStudents { get; set; }

        /// <summary>
        /// Gets or Sets DuringStudents
        /// </summary>
        [Required]
        [DataMember(Name="duringStudents", EmitDefaultValue=false)]
        public List<BasicUser> DuringStudents { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledPositiveStudents
        /// </summary>
        [Required]
        [DataMember(Name="scheduledPositiveStudents", EmitDefaultValue=false)]
        public List<BasicUser> ScheduledPositiveStudents { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledShiftsPercentage
        /// </summary>
        [Required]
        [DataMember(Name="scheduledShiftsPercentage", EmitDefaultValue=true)]
        public double ScheduledShiftsPercentage { get; set; }

        /// <summary>
        /// Gets or Sets AttendancePercentage
        /// </summary>
        [Required]
        [DataMember(Name="attendancePercentage", EmitDefaultValue=true)]
        public double AttendancePercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OverallEngagementAlertDataResponse {\n");
            sb.Append("  PunchedInStudents: ").Append(PunchedInStudents).Append("\n");
            sb.Append("  PrePercentage: ").Append(PrePercentage).Append("\n");
            sb.Append("  PunchedInPercentage: ").Append(PunchedInPercentage).Append("\n");
            sb.Append("  AttendancePositiveStudents: ").Append(AttendancePositiveStudents).Append("\n");
            sb.Append("  PreStudents: ").Append(PreStudents).Append("\n");
            sb.Append("  ScheduledNegativeStudents: ").Append(ScheduledNegativeStudents).Append("\n");
            sb.Append("  ProperLocationNegativeStudents: ").Append(ProperLocationNegativeStudents).Append("\n");
            sb.Append("  PostStudents: ").Append(PostStudents).Append("\n");
            sb.Append("  PunchedInNegativeStudents: ").Append(PunchedInNegativeStudents).Append("\n");
            sb.Append("  ProperLocationPercentage: ").Append(ProperLocationPercentage).Append("\n");
            sb.Append("  ProperLocationStudents: ").Append(ProperLocationStudents).Append("\n");
            sb.Append("  GeneralInfoPercentage: ").Append(GeneralInfoPercentage).Append("\n");
            sb.Append("  AttendanceNegativeStudents: ").Append(AttendanceNegativeStudents).Append("\n");
            sb.Append("  PostPercentage: ").Append(PostPercentage).Append("\n");
            sb.Append("  DuringPercentage: ").Append(DuringPercentage).Append("\n");
            sb.Append("  GeneralInfoStudents: ").Append(GeneralInfoStudents).Append("\n");
            sb.Append("  DuringStudents: ").Append(DuringStudents).Append("\n");
            sb.Append("  ScheduledPositiveStudents: ").Append(ScheduledPositiveStudents).Append("\n");
            sb.Append("  ScheduledShiftsPercentage: ").Append(ScheduledShiftsPercentage).Append("\n");
            sb.Append("  AttendancePercentage: ").Append(AttendancePercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OverallEngagementAlertDataResponse)obj);
        }

        /// <summary>
        /// Returns true if OverallEngagementAlertDataResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of OverallEngagementAlertDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OverallEngagementAlertDataResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PunchedInStudents == other.PunchedInStudents ||
                    PunchedInStudents != null &&
                    other.PunchedInStudents != null &&
                    PunchedInStudents.SequenceEqual(other.PunchedInStudents)
                ) && 
                (
                    PrePercentage == other.PrePercentage ||
                    
                    PrePercentage.Equals(other.PrePercentage)
                ) && 
                (
                    PunchedInPercentage == other.PunchedInPercentage ||
                    
                    PunchedInPercentage.Equals(other.PunchedInPercentage)
                ) && 
                (
                    AttendancePositiveStudents == other.AttendancePositiveStudents ||
                    AttendancePositiveStudents != null &&
                    other.AttendancePositiveStudents != null &&
                    AttendancePositiveStudents.SequenceEqual(other.AttendancePositiveStudents)
                ) && 
                (
                    PreStudents == other.PreStudents ||
                    PreStudents != null &&
                    other.PreStudents != null &&
                    PreStudents.SequenceEqual(other.PreStudents)
                ) && 
                (
                    ScheduledNegativeStudents == other.ScheduledNegativeStudents ||
                    ScheduledNegativeStudents != null &&
                    other.ScheduledNegativeStudents != null &&
                    ScheduledNegativeStudents.SequenceEqual(other.ScheduledNegativeStudents)
                ) && 
                (
                    ProperLocationNegativeStudents == other.ProperLocationNegativeStudents ||
                    ProperLocationNegativeStudents != null &&
                    other.ProperLocationNegativeStudents != null &&
                    ProperLocationNegativeStudents.SequenceEqual(other.ProperLocationNegativeStudents)
                ) && 
                (
                    PostStudents == other.PostStudents ||
                    PostStudents != null &&
                    other.PostStudents != null &&
                    PostStudents.SequenceEqual(other.PostStudents)
                ) && 
                (
                    PunchedInNegativeStudents == other.PunchedInNegativeStudents ||
                    PunchedInNegativeStudents != null &&
                    other.PunchedInNegativeStudents != null &&
                    PunchedInNegativeStudents.SequenceEqual(other.PunchedInNegativeStudents)
                ) && 
                (
                    ProperLocationPercentage == other.ProperLocationPercentage ||
                    
                    ProperLocationPercentage.Equals(other.ProperLocationPercentage)
                ) && 
                (
                    ProperLocationStudents == other.ProperLocationStudents ||
                    ProperLocationStudents != null &&
                    other.ProperLocationStudents != null &&
                    ProperLocationStudents.SequenceEqual(other.ProperLocationStudents)
                ) && 
                (
                    GeneralInfoPercentage == other.GeneralInfoPercentage ||
                    
                    GeneralInfoPercentage.Equals(other.GeneralInfoPercentage)
                ) && 
                (
                    AttendanceNegativeStudents == other.AttendanceNegativeStudents ||
                    AttendanceNegativeStudents != null &&
                    other.AttendanceNegativeStudents != null &&
                    AttendanceNegativeStudents.SequenceEqual(other.AttendanceNegativeStudents)
                ) && 
                (
                    PostPercentage == other.PostPercentage ||
                    
                    PostPercentage.Equals(other.PostPercentage)
                ) && 
                (
                    DuringPercentage == other.DuringPercentage ||
                    
                    DuringPercentage.Equals(other.DuringPercentage)
                ) && 
                (
                    GeneralInfoStudents == other.GeneralInfoStudents ||
                    GeneralInfoStudents != null &&
                    other.GeneralInfoStudents != null &&
                    GeneralInfoStudents.SequenceEqual(other.GeneralInfoStudents)
                ) && 
                (
                    DuringStudents == other.DuringStudents ||
                    DuringStudents != null &&
                    other.DuringStudents != null &&
                    DuringStudents.SequenceEqual(other.DuringStudents)
                ) && 
                (
                    ScheduledPositiveStudents == other.ScheduledPositiveStudents ||
                    ScheduledPositiveStudents != null &&
                    other.ScheduledPositiveStudents != null &&
                    ScheduledPositiveStudents.SequenceEqual(other.ScheduledPositiveStudents)
                ) && 
                (
                    ScheduledShiftsPercentage == other.ScheduledShiftsPercentage ||
                    
                    ScheduledShiftsPercentage.Equals(other.ScheduledShiftsPercentage)
                ) && 
                (
                    AttendancePercentage == other.AttendancePercentage ||
                    
                    AttendancePercentage.Equals(other.AttendancePercentage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PunchedInStudents != null)
                    hashCode = hashCode * 59 + PunchedInStudents.GetHashCode();
                    
                    hashCode = hashCode * 59 + PrePercentage.GetHashCode();
                    
                    hashCode = hashCode * 59 + PunchedInPercentage.GetHashCode();
                    if (AttendancePositiveStudents != null)
                    hashCode = hashCode * 59 + AttendancePositiveStudents.GetHashCode();
                    if (PreStudents != null)
                    hashCode = hashCode * 59 + PreStudents.GetHashCode();
                    if (ScheduledNegativeStudents != null)
                    hashCode = hashCode * 59 + ScheduledNegativeStudents.GetHashCode();
                    if (ProperLocationNegativeStudents != null)
                    hashCode = hashCode * 59 + ProperLocationNegativeStudents.GetHashCode();
                    if (PostStudents != null)
                    hashCode = hashCode * 59 + PostStudents.GetHashCode();
                    if (PunchedInNegativeStudents != null)
                    hashCode = hashCode * 59 + PunchedInNegativeStudents.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProperLocationPercentage.GetHashCode();
                    if (ProperLocationStudents != null)
                    hashCode = hashCode * 59 + ProperLocationStudents.GetHashCode();
                    
                    hashCode = hashCode * 59 + GeneralInfoPercentage.GetHashCode();
                    if (AttendanceNegativeStudents != null)
                    hashCode = hashCode * 59 + AttendanceNegativeStudents.GetHashCode();
                    
                    hashCode = hashCode * 59 + PostPercentage.GetHashCode();
                    
                    hashCode = hashCode * 59 + DuringPercentage.GetHashCode();
                    if (GeneralInfoStudents != null)
                    hashCode = hashCode * 59 + GeneralInfoStudents.GetHashCode();
                    if (DuringStudents != null)
                    hashCode = hashCode * 59 + DuringStudents.GetHashCode();
                    if (ScheduledPositiveStudents != null)
                    hashCode = hashCode * 59 + ScheduledPositiveStudents.GetHashCode();
                    
                    hashCode = hashCode * 59 + ScheduledShiftsPercentage.GetHashCode();
                    
                    hashCode = hashCode * 59 + AttendancePercentage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OverallEngagementAlertDataResponse left, OverallEngagementAlertDataResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OverallEngagementAlertDataResponse left, OverallEngagementAlertDataResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
