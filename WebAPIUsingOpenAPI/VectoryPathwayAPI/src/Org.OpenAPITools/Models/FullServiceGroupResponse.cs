/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FullServiceGroupResponse : IEquatable<FullServiceGroupResponse>
    {
        /// <summary>
        /// Gets or Sets PendingMembers
        /// </summary>
        [Required]
        [DataMember(Name="pendingMembers", EmitDefaultValue=false)]
        public List<FullServiceGroupResponsePendingMember> PendingMembers { get; set; }

        /// <summary>
        /// Gets or Sets GroupGoal
        /// </summary>
        [DataMember(Name="groupGoal", EmitDefaultValue=true)]
        public double? GroupGoal { get; set; }

        /// <summary>
        /// Gets or Sets JoinCode
        /// </summary>
        [Required]
        [DataMember(Name="joinCode", EmitDefaultValue=false)]
        public string JoinCode { get; set; }

        /// <summary>
        /// Gets or Sets IndividualGoal
        /// </summary>
        [DataMember(Name="individualGoal", EmitDefaultValue=true)]
        public double? IndividualGoal { get; set; }

        /// <summary>
        /// Gets or Sets HasEngage
        /// </summary>
        [Required]
        [DataMember(Name="hasEngage", EmitDefaultValue=true)]
        public bool HasEngage { get; set; }

        /// <summary>
        /// Gets or Sets PendingLogs
        /// </summary>
        [DataMember(Name="pendingLogs", EmitDefaultValue=true)]
        public List<SimpleJSONServiceLog> PendingLogs { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Posts
        /// </summary>
        [Required]
        [DataMember(Name="posts", EmitDefaultValue=false)]
        public List<SimpleServiceGroupPost> Posts { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExternalEventToken
        /// </summary>
        [DataMember(Name="externalEventToken", EmitDefaultValue=true)]
        public string ExternalEventToken { get; set; }

        /// <summary>
        /// Gets or Sets PendingStudents
        /// </summary>
        [DataMember(Name="pendingStudents", EmitDefaultValue=true)]
        public List<BasicUser> PendingStudents { get; set; }

        /// <summary>
        /// Gets or Sets MaxStudentsAllowed
        /// </summary>
        [DataMember(Name="maxStudentsAllowed", EmitDefaultValue=true)]
        public long? MaxStudentsAllowed { get; set; }

        /// <summary>
        /// Gets or Sets PendingServiceEvents
        /// </summary>
        [Required]
        [DataMember(Name="pendingServiceEvents", EmitDefaultValue=false)]
        public List<Object> PendingServiceEvents { get; set; }

        /// <summary>
        /// Gets or Sets TotalHoursForGroup
        /// </summary>
        [DataMember(Name="totalHoursForGroup", EmitDefaultValue=true)]
        public double? TotalHoursForGroup { get; set; }

        /// <summary>
        /// Gets or Sets GroupGoalPercentage
        /// </summary>
        [DataMember(Name="groupGoalPercentage", EmitDefaultValue=true)]
        public long? GroupGoalPercentage { get; set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name="admin", EmitDefaultValue=false)]
        public BasicUser Admin { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IndividualGoalPercentage
        /// </summary>
        [DataMember(Name="individualGoalPercentage", EmitDefaultValue=true)]
        public long? IndividualGoalPercentage { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedMembers
        /// </summary>
        [Required]
        [DataMember(Name="approvedMembers", EmitDefaultValue=false)]
        public List<FullServiceGroupResponseApprovedMember> ApprovedMembers { get; set; }

        /// <summary>
        /// Gets or Sets YoutubeLink
        /// </summary>
        [DataMember(Name="youtubeLink", EmitDefaultValue=true)]
        public string YoutubeLink { get; set; }

        /// <summary>
        /// Gets or Sets IsDefaultSchoolGroup
        /// </summary>
        [Required]
        [DataMember(Name="isDefaultSchoolGroup", EmitDefaultValue=true)]
        public bool IsDefaultSchoolGroup { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [Required]
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<CoCurricularGroupFileDTO> Files { get; set; }

        /// <summary>
        /// Gets or Sets RequiresVerification
        /// </summary>
        [Required]
        [DataMember(Name="requiresVerification", EmitDefaultValue=true)]
        public bool RequiresVerification { get; set; }

        /// <summary>
        /// Gets or Sets AllowsExternalSubmission
        /// </summary>
        [Required]
        [DataMember(Name="allowsExternalSubmission", EmitDefaultValue=true)]
        public bool AllowsExternalSubmission { get; set; }

        /// <summary>
        /// Gets or Sets TwitterHandle
        /// </summary>
        [DataMember(Name="twitterHandle", EmitDefaultValue=true)]
        public string TwitterHandle { get; set; }

        /// <summary>
        /// Gets or Sets UpcomingServiceEvents
        /// </summary>
        [Required]
        [DataMember(Name="upcomingServiceEvents", EmitDefaultValue=false)]
        public List<SimpleServiceEvent> UpcomingServiceEvents { get; set; }

        /// <summary>
        /// Gets or Sets HasService
        /// </summary>
        [Required]
        [DataMember(Name="hasService", EmitDefaultValue=true)]
        public bool HasService { get; set; }

        /// <summary>
        /// Gets or Sets PastServiceEvents
        /// </summary>
        [Required]
        [DataMember(Name="pastServiceEvents", EmitDefaultValue=false)]
        public List<SimpleServiceEvent> PastServiceEvents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FullServiceGroupResponse {\n");
            sb.Append("  PendingMembers: ").Append(PendingMembers).Append("\n");
            sb.Append("  GroupGoal: ").Append(GroupGoal).Append("\n");
            sb.Append("  JoinCode: ").Append(JoinCode).Append("\n");
            sb.Append("  IndividualGoal: ").Append(IndividualGoal).Append("\n");
            sb.Append("  HasEngage: ").Append(HasEngage).Append("\n");
            sb.Append("  PendingLogs: ").Append(PendingLogs).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Posts: ").Append(Posts).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ExternalEventToken: ").Append(ExternalEventToken).Append("\n");
            sb.Append("  PendingStudents: ").Append(PendingStudents).Append("\n");
            sb.Append("  MaxStudentsAllowed: ").Append(MaxStudentsAllowed).Append("\n");
            sb.Append("  PendingServiceEvents: ").Append(PendingServiceEvents).Append("\n");
            sb.Append("  TotalHoursForGroup: ").Append(TotalHoursForGroup).Append("\n");
            sb.Append("  GroupGoalPercentage: ").Append(GroupGoalPercentage).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IndividualGoalPercentage: ").Append(IndividualGoalPercentage).Append("\n");
            sb.Append("  ApprovedMembers: ").Append(ApprovedMembers).Append("\n");
            sb.Append("  YoutubeLink: ").Append(YoutubeLink).Append("\n");
            sb.Append("  IsDefaultSchoolGroup: ").Append(IsDefaultSchoolGroup).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  RequiresVerification: ").Append(RequiresVerification).Append("\n");
            sb.Append("  AllowsExternalSubmission: ").Append(AllowsExternalSubmission).Append("\n");
            sb.Append("  TwitterHandle: ").Append(TwitterHandle).Append("\n");
            sb.Append("  UpcomingServiceEvents: ").Append(UpcomingServiceEvents).Append("\n");
            sb.Append("  HasService: ").Append(HasService).Append("\n");
            sb.Append("  PastServiceEvents: ").Append(PastServiceEvents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FullServiceGroupResponse)obj);
        }

        /// <summary>
        /// Returns true if FullServiceGroupResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of FullServiceGroupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FullServiceGroupResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PendingMembers == other.PendingMembers ||
                    PendingMembers != null &&
                    other.PendingMembers != null &&
                    PendingMembers.SequenceEqual(other.PendingMembers)
                ) && 
                (
                    GroupGoal == other.GroupGoal ||
                    GroupGoal != null &&
                    GroupGoal.Equals(other.GroupGoal)
                ) && 
                (
                    JoinCode == other.JoinCode ||
                    JoinCode != null &&
                    JoinCode.Equals(other.JoinCode)
                ) && 
                (
                    IndividualGoal == other.IndividualGoal ||
                    IndividualGoal != null &&
                    IndividualGoal.Equals(other.IndividualGoal)
                ) && 
                (
                    HasEngage == other.HasEngage ||
                    
                    HasEngage.Equals(other.HasEngage)
                ) && 
                (
                    PendingLogs == other.PendingLogs ||
                    PendingLogs != null &&
                    other.PendingLogs != null &&
                    PendingLogs.SequenceEqual(other.PendingLogs)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Posts == other.Posts ||
                    Posts != null &&
                    other.Posts != null &&
                    Posts.SequenceEqual(other.Posts)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    ExternalEventToken == other.ExternalEventToken ||
                    ExternalEventToken != null &&
                    ExternalEventToken.Equals(other.ExternalEventToken)
                ) && 
                (
                    PendingStudents == other.PendingStudents ||
                    PendingStudents != null &&
                    other.PendingStudents != null &&
                    PendingStudents.SequenceEqual(other.PendingStudents)
                ) && 
                (
                    MaxStudentsAllowed == other.MaxStudentsAllowed ||
                    MaxStudentsAllowed != null &&
                    MaxStudentsAllowed.Equals(other.MaxStudentsAllowed)
                ) && 
                (
                    PendingServiceEvents == other.PendingServiceEvents ||
                    PendingServiceEvents != null &&
                    other.PendingServiceEvents != null &&
                    PendingServiceEvents.SequenceEqual(other.PendingServiceEvents)
                ) && 
                (
                    TotalHoursForGroup == other.TotalHoursForGroup ||
                    TotalHoursForGroup != null &&
                    TotalHoursForGroup.Equals(other.TotalHoursForGroup)
                ) && 
                (
                    GroupGoalPercentage == other.GroupGoalPercentage ||
                    GroupGoalPercentage != null &&
                    GroupGoalPercentage.Equals(other.GroupGoalPercentage)
                ) && 
                (
                    Admin == other.Admin ||
                    Admin != null &&
                    Admin.Equals(other.Admin)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    IndividualGoalPercentage == other.IndividualGoalPercentage ||
                    IndividualGoalPercentage != null &&
                    IndividualGoalPercentage.Equals(other.IndividualGoalPercentage)
                ) && 
                (
                    ApprovedMembers == other.ApprovedMembers ||
                    ApprovedMembers != null &&
                    other.ApprovedMembers != null &&
                    ApprovedMembers.SequenceEqual(other.ApprovedMembers)
                ) && 
                (
                    YoutubeLink == other.YoutubeLink ||
                    YoutubeLink != null &&
                    YoutubeLink.Equals(other.YoutubeLink)
                ) && 
                (
                    IsDefaultSchoolGroup == other.IsDefaultSchoolGroup ||
                    
                    IsDefaultSchoolGroup.Equals(other.IsDefaultSchoolGroup)
                ) && 
                (
                    Files == other.Files ||
                    Files != null &&
                    other.Files != null &&
                    Files.SequenceEqual(other.Files)
                ) && 
                (
                    RequiresVerification == other.RequiresVerification ||
                    
                    RequiresVerification.Equals(other.RequiresVerification)
                ) && 
                (
                    AllowsExternalSubmission == other.AllowsExternalSubmission ||
                    
                    AllowsExternalSubmission.Equals(other.AllowsExternalSubmission)
                ) && 
                (
                    TwitterHandle == other.TwitterHandle ||
                    TwitterHandle != null &&
                    TwitterHandle.Equals(other.TwitterHandle)
                ) && 
                (
                    UpcomingServiceEvents == other.UpcomingServiceEvents ||
                    UpcomingServiceEvents != null &&
                    other.UpcomingServiceEvents != null &&
                    UpcomingServiceEvents.SequenceEqual(other.UpcomingServiceEvents)
                ) && 
                (
                    HasService == other.HasService ||
                    
                    HasService.Equals(other.HasService)
                ) && 
                (
                    PastServiceEvents == other.PastServiceEvents ||
                    PastServiceEvents != null &&
                    other.PastServiceEvents != null &&
                    PastServiceEvents.SequenceEqual(other.PastServiceEvents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PendingMembers != null)
                    hashCode = hashCode * 59 + PendingMembers.GetHashCode();
                    if (GroupGoal != null)
                    hashCode = hashCode * 59 + GroupGoal.GetHashCode();
                    if (JoinCode != null)
                    hashCode = hashCode * 59 + JoinCode.GetHashCode();
                    if (IndividualGoal != null)
                    hashCode = hashCode * 59 + IndividualGoal.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasEngage.GetHashCode();
                    if (PendingLogs != null)
                    hashCode = hashCode * 59 + PendingLogs.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Posts != null)
                    hashCode = hashCode * 59 + Posts.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (ExternalEventToken != null)
                    hashCode = hashCode * 59 + ExternalEventToken.GetHashCode();
                    if (PendingStudents != null)
                    hashCode = hashCode * 59 + PendingStudents.GetHashCode();
                    if (MaxStudentsAllowed != null)
                    hashCode = hashCode * 59 + MaxStudentsAllowed.GetHashCode();
                    if (PendingServiceEvents != null)
                    hashCode = hashCode * 59 + PendingServiceEvents.GetHashCode();
                    if (TotalHoursForGroup != null)
                    hashCode = hashCode * 59 + TotalHoursForGroup.GetHashCode();
                    if (GroupGoalPercentage != null)
                    hashCode = hashCode * 59 + GroupGoalPercentage.GetHashCode();
                    if (Admin != null)
                    hashCode = hashCode * 59 + Admin.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (IndividualGoalPercentage != null)
                    hashCode = hashCode * 59 + IndividualGoalPercentage.GetHashCode();
                    if (ApprovedMembers != null)
                    hashCode = hashCode * 59 + ApprovedMembers.GetHashCode();
                    if (YoutubeLink != null)
                    hashCode = hashCode * 59 + YoutubeLink.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsDefaultSchoolGroup.GetHashCode();
                    if (Files != null)
                    hashCode = hashCode * 59 + Files.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequiresVerification.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowsExternalSubmission.GetHashCode();
                    if (TwitterHandle != null)
                    hashCode = hashCode * 59 + TwitterHandle.GetHashCode();
                    if (UpcomingServiceEvents != null)
                    hashCode = hashCode * 59 + UpcomingServiceEvents.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasService.GetHashCode();
                    if (PastServiceEvents != null)
                    hashCode = hashCode * 59 + PastServiceEvents.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FullServiceGroupResponse left, FullServiceGroupResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FullServiceGroupResponse left, FullServiceGroupResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
