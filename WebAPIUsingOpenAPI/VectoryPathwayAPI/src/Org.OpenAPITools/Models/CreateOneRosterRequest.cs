/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateOneRosterRequest : IEquatable<CreateOneRosterRequest>
    {
        /// <summary>
        /// Gets or Sets BaseUrl
        /// </summary>
        [Required]
        [DataMember(Name="baseUrl", EmitDefaultValue=false)]
        public string BaseUrl { get; set; }

        /// <summary>
        /// Gets or Sets OauthVersionTwo
        /// </summary>
        [Required]
        [DataMember(Name="oauthVersionTwo", EmitDefaultValue=true)]
        public bool OauthVersionTwo { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerKey
        /// </summary>
        [Required]
        [DataMember(Name="consumerKey", EmitDefaultValue=false)]
        public string ConsumerKey { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [Required]
        [DataMember(Name="active", EmitDefaultValue=true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets CourseData
        /// </summary>
        [Required]
        [DataMember(Name="courseData", EmitDefaultValue=true)]
        public bool CourseData { get; set; }

        /// <summary>
        /// Gets or Sets PullDemographicData
        /// </summary>
        [DataMember(Name="pullDemographicData", EmitDefaultValue=true)]
        public bool? PullDemographicData { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerSecret
        /// </summary>
        [Required]
        [DataMember(Name="consumerSecret", EmitDefaultValue=false)]
        public string ConsumerSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOneRosterRequest {\n");
            sb.Append("  BaseUrl: ").Append(BaseUrl).Append("\n");
            sb.Append("  OauthVersionTwo: ").Append(OauthVersionTwo).Append("\n");
            sb.Append("  ConsumerKey: ").Append(ConsumerKey).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CourseData: ").Append(CourseData).Append("\n");
            sb.Append("  PullDemographicData: ").Append(PullDemographicData).Append("\n");
            sb.Append("  ConsumerSecret: ").Append(ConsumerSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateOneRosterRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateOneRosterRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateOneRosterRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOneRosterRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BaseUrl == other.BaseUrl ||
                    BaseUrl != null &&
                    BaseUrl.Equals(other.BaseUrl)
                ) && 
                (
                    OauthVersionTwo == other.OauthVersionTwo ||
                    
                    OauthVersionTwo.Equals(other.OauthVersionTwo)
                ) && 
                (
                    ConsumerKey == other.ConsumerKey ||
                    ConsumerKey != null &&
                    ConsumerKey.Equals(other.ConsumerKey)
                ) && 
                (
                    Active == other.Active ||
                    
                    Active.Equals(other.Active)
                ) && 
                (
                    CourseData == other.CourseData ||
                    
                    CourseData.Equals(other.CourseData)
                ) && 
                (
                    PullDemographicData == other.PullDemographicData ||
                    PullDemographicData != null &&
                    PullDemographicData.Equals(other.PullDemographicData)
                ) && 
                (
                    ConsumerSecret == other.ConsumerSecret ||
                    ConsumerSecret != null &&
                    ConsumerSecret.Equals(other.ConsumerSecret)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BaseUrl != null)
                    hashCode = hashCode * 59 + BaseUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + OauthVersionTwo.GetHashCode();
                    if (ConsumerKey != null)
                    hashCode = hashCode * 59 + ConsumerKey.GetHashCode();
                    
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    
                    hashCode = hashCode * 59 + CourseData.GetHashCode();
                    if (PullDemographicData != null)
                    hashCode = hashCode * 59 + PullDemographicData.GetHashCode();
                    if (ConsumerSecret != null)
                    hashCode = hashCode * 59 + ConsumerSecret.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateOneRosterRequest left, CreateOneRosterRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateOneRosterRequest left, CreateOneRosterRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
