/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StudentExperienceDataDashboardResponse : IEquatable<StudentExperienceDataDashboardResponse>
    {
        /// <summary>
        /// Gets or Sets ExperienceFields
        /// </summary>
        [Required]
        [DataMember(Name="experienceFields", EmitDefaultValue=false)]
        public List<StudentExperienceDataDashboardResponseField> ExperienceFields { get; set; }

        /// <summary>
        /// Gets or Sets Badges
        /// </summary>
        [Required]
        [DataMember(Name="badges", EmitDefaultValue=false)]
        public List<BadgeDTO> Badges { get; set; }

        /// <summary>
        /// Gets or Sets ContactFields
        /// </summary>
        [Required]
        [DataMember(Name="contactFields", EmitDefaultValue=false)]
        public List<StudentExperienceDataDashboardResponseField> ContactFields { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [Required]
        [DataMember(Name="data", EmitDefaultValue=false)]
        public List<StudentExperienceDataDashboardResponseData> Data { get; set; }

        /// <summary>
        /// Gets or Sets OrgFields
        /// </summary>
        [Required]
        [DataMember(Name="orgFields", EmitDefaultValue=false)]
        public List<StudentExperienceDataDashboardResponseField> OrgFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentExperienceDataDashboardResponse {\n");
            sb.Append("  ExperienceFields: ").Append(ExperienceFields).Append("\n");
            sb.Append("  Badges: ").Append(Badges).Append("\n");
            sb.Append("  ContactFields: ").Append(ContactFields).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  OrgFields: ").Append(OrgFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StudentExperienceDataDashboardResponse)obj);
        }

        /// <summary>
        /// Returns true if StudentExperienceDataDashboardResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of StudentExperienceDataDashboardResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentExperienceDataDashboardResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExperienceFields == other.ExperienceFields ||
                    ExperienceFields != null &&
                    other.ExperienceFields != null &&
                    ExperienceFields.SequenceEqual(other.ExperienceFields)
                ) && 
                (
                    Badges == other.Badges ||
                    Badges != null &&
                    other.Badges != null &&
                    Badges.SequenceEqual(other.Badges)
                ) && 
                (
                    ContactFields == other.ContactFields ||
                    ContactFields != null &&
                    other.ContactFields != null &&
                    ContactFields.SequenceEqual(other.ContactFields)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    other.Data != null &&
                    Data.SequenceEqual(other.Data)
                ) && 
                (
                    OrgFields == other.OrgFields ||
                    OrgFields != null &&
                    other.OrgFields != null &&
                    OrgFields.SequenceEqual(other.OrgFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExperienceFields != null)
                    hashCode = hashCode * 59 + ExperienceFields.GetHashCode();
                    if (Badges != null)
                    hashCode = hashCode * 59 + Badges.GetHashCode();
                    if (ContactFields != null)
                    hashCode = hashCode * 59 + ContactFields.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (OrgFields != null)
                    hashCode = hashCode * 59 + OrgFields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StudentExperienceDataDashboardResponse left, StudentExperienceDataDashboardResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StudentExperienceDataDashboardResponse left, StudentExperienceDataDashboardResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
