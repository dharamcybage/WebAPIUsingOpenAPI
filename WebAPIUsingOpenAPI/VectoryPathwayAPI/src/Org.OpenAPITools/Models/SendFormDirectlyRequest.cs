/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SendFormDirectlyRequest : IEquatable<SendFormDirectlyRequest>
    {
        /// <summary>
        /// Gets or Sets ReminderFrequency
        /// </summary>
        [Required]
        [DataMember(Name="reminderFrequency", EmitDefaultValue=true)]
        public long ReminderFrequency { get; set; }

        /// <summary>
        /// Gets or Sets AddParents
        /// </summary>
        [Required]
        [DataMember(Name="addParents", EmitDefaultValue=true)]
        public bool AddParents { get; set; }

        /// <summary>
        /// Gets or Sets Admins
        /// </summary>
        [Required]
        [DataMember(Name="admins", EmitDefaultValue=false)]
        public List<SendFormDirectlyRequestAdmins> Admins { get; set; }

        /// <summary>
        /// Gets or Sets Students
        /// </summary>
        [Required]
        [DataMember(Name="students", EmitDefaultValue=false)]
        public List<SendFormDirectlyRequestStudents> Students { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [Required]
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [Required]
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<SendFormDirectlyRequestContacts> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets ParentResponsibility
        /// </summary>
        [DataMember(Name="parentResponsibility", EmitDefaultValue=true)]
        public long? ParentResponsibility { get; set; }

        /// <summary>
        /// Gets or Sets Grades
        /// </summary>
        [Required]
        [DataMember(Name="grades", EmitDefaultValue=false)]
        public List<SendFormDirectlyRequestGrades> Grades { get; set; }

        /// <summary>
        /// Gets or Sets Courses
        /// </summary>
        [Required]
        [DataMember(Name="courses", EmitDefaultValue=false)]
        public List<SendFormDirectlyRequestCourses> Courses { get; set; }

        /// <summary>
        /// Gets or Sets IsRejectable
        /// </summary>
        [Required]
        [DataMember(Name="isRejectable", EmitDefaultValue=true)]
        public bool IsRejectable { get; set; }

        /// <summary>
        /// Gets or Sets FormId
        /// </summary>
        [Required]
        [DataMember(Name="formId", EmitDefaultValue=true)]
        public long FormId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Manuals
        /// </summary>
        [Required]
        [DataMember(Name="manuals", EmitDefaultValue=false)]
        public List<SendFormDirectlyRequestManuals> Manuals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendFormDirectlyRequest {\n");
            sb.Append("  ReminderFrequency: ").Append(ReminderFrequency).Append("\n");
            sb.Append("  AddParents: ").Append(AddParents).Append("\n");
            sb.Append("  Admins: ").Append(Admins).Append("\n");
            sb.Append("  Students: ").Append(Students).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  ParentResponsibility: ").Append(ParentResponsibility).Append("\n");
            sb.Append("  Grades: ").Append(Grades).Append("\n");
            sb.Append("  Courses: ").Append(Courses).Append("\n");
            sb.Append("  IsRejectable: ").Append(IsRejectable).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Manuals: ").Append(Manuals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SendFormDirectlyRequest)obj);
        }

        /// <summary>
        /// Returns true if SendFormDirectlyRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SendFormDirectlyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendFormDirectlyRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReminderFrequency == other.ReminderFrequency ||
                    
                    ReminderFrequency.Equals(other.ReminderFrequency)
                ) && 
                (
                    AddParents == other.AddParents ||
                    
                    AddParents.Equals(other.AddParents)
                ) && 
                (
                    Admins == other.Admins ||
                    Admins != null &&
                    other.Admins != null &&
                    Admins.SequenceEqual(other.Admins)
                ) && 
                (
                    Students == other.Students ||
                    Students != null &&
                    other.Students != null &&
                    Students.SequenceEqual(other.Students)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    Contacts == other.Contacts ||
                    Contacts != null &&
                    other.Contacts != null &&
                    Contacts.SequenceEqual(other.Contacts)
                ) && 
                (
                    ParentResponsibility == other.ParentResponsibility ||
                    ParentResponsibility != null &&
                    ParentResponsibility.Equals(other.ParentResponsibility)
                ) && 
                (
                    Grades == other.Grades ||
                    Grades != null &&
                    other.Grades != null &&
                    Grades.SequenceEqual(other.Grades)
                ) && 
                (
                    Courses == other.Courses ||
                    Courses != null &&
                    other.Courses != null &&
                    Courses.SequenceEqual(other.Courses)
                ) && 
                (
                    IsRejectable == other.IsRejectable ||
                    
                    IsRejectable.Equals(other.IsRejectable)
                ) && 
                (
                    FormId == other.FormId ||
                    
                    FormId.Equals(other.FormId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Manuals == other.Manuals ||
                    Manuals != null &&
                    other.Manuals != null &&
                    Manuals.SequenceEqual(other.Manuals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ReminderFrequency.GetHashCode();
                    
                    hashCode = hashCode * 59 + AddParents.GetHashCode();
                    if (Admins != null)
                    hashCode = hashCode * 59 + Admins.GetHashCode();
                    if (Students != null)
                    hashCode = hashCode * 59 + Students.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (Contacts != null)
                    hashCode = hashCode * 59 + Contacts.GetHashCode();
                    if (ParentResponsibility != null)
                    hashCode = hashCode * 59 + ParentResponsibility.GetHashCode();
                    if (Grades != null)
                    hashCode = hashCode * 59 + Grades.GetHashCode();
                    if (Courses != null)
                    hashCode = hashCode * 59 + Courses.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsRejectable.GetHashCode();
                    
                    hashCode = hashCode * 59 + FormId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Manuals != null)
                    hashCode = hashCode * 59 + Manuals.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SendFormDirectlyRequest left, SendFormDirectlyRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SendFormDirectlyRequest left, SendFormDirectlyRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
