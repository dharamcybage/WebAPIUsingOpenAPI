/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FullExperience : IEquatable<FullExperience>
    {
        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [Required]
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public OrganizationDTO Organization { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceText
        /// </summary>
        [DataMember(Name="experienceText", EmitDefaultValue=true)]
        public string ExperienceText { get; set; }

        /// <summary>
        /// Gets or Sets ReflectionFormId
        /// </summary>
        [DataMember(Name="reflection_form_id", EmitDefaultValue=true)]
        public long? ReflectionFormId { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedHours
        /// </summary>
        [Required]
        [DataMember(Name="approvedHours", EmitDefaultValue=true)]
        public double ApprovedHours { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [Required]
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<TagDTO> Tags { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [Required]
        [DataMember(Name="user", EmitDefaultValue=false)]
        public BasicUser User { get; set; }

        /// <summary>
        /// Gets or Sets IsCurrent
        /// </summary>
        [Required]
        [DataMember(Name="isCurrent", EmitDefaultValue=true)]
        public bool IsCurrent { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [Required]
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public BasicContact Contact { get; set; }

        /// <summary>
        /// Gets or Sets ReflectionFormApproval
        /// </summary>
        [DataMember(Name="reflection_form_approval", EmitDefaultValue=true)]
        public long? ReflectionFormApproval { get; set; }

        /// <summary>
        /// Gets or Sets MaxNumberOfHours
        /// </summary>
        [DataMember(Name="maxNumberOfHours", EmitDefaultValue=true)]
        public double? MaxNumberOfHours { get; set; }

        /// <summary>
        /// Gets or Sets ReflectionFormResponse
        /// </summary>
        [DataMember(Name="reflectionFormResponse", EmitDefaultValue=false)]
        public FormResponse ReflectionFormResponse { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets AllowsTotalTimelogHoursSubmission
        /// </summary>
        [Required]
        [DataMember(Name="allowsTotalTimelogHoursSubmission", EmitDefaultValue=true)]
        public bool AllowsTotalTimelogHoursSubmission { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [Required]
        [DataMember(Name="user_id", EmitDefaultValue=true)]
        public long UserId { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public LocationDTO Location { get; set; }

        /// <summary>
        /// Gets or Sets CanGeoLog
        /// </summary>
        [Required]
        [DataMember(Name="canGeoLog", EmitDefaultValue=true)]
        public bool CanGeoLog { get; set; }

        /// <summary>
        /// Gets or Sets CanSubmitPayPeriods
        /// </summary>
        [Required]
        [DataMember(Name="canSubmitPayPeriods", EmitDefaultValue=true)]
        public bool CanSubmitPayPeriods { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CurrentGeoLogs
        /// </summary>
        [Required]
        [DataMember(Name="currentGeoLogs", EmitDefaultValue=false)]
        public List<TimeLogDTO> CurrentGeoLogs { get; set; }

        /// <summary>
        /// Gets or Sets UserStartedExperience
        /// </summary>
        [DataMember(Name="userStartedExperience", EmitDefaultValue=true)]
        public DateTime? UserStartedExperience { get; set; }

        /// <summary>
        /// Gets or Sets HasPayPeriods
        /// </summary>
        [Required]
        [DataMember(Name="hasPayPeriods", EmitDefaultValue=true)]
        public bool HasPayPeriods { get; set; }

        /// <summary>
        /// Gets or Sets UserExperienceId
        /// </summary>
        [DataMember(Name="user_experience_id", EmitDefaultValue=true)]
        public long? UserExperienceId { get; set; }

        /// <summary>
        /// Gets or Sets TimeLogs
        /// </summary>
        [Required]
        [DataMember(Name="timeLogs", EmitDefaultValue=false)]
        public List<TimeLogDTO> TimeLogs { get; set; }

        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [Required]
        [DataMember(Name="approved", EmitDefaultValue=true)]
        public bool Approved { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FullExperience {\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  ExperienceText: ").Append(ExperienceText).Append("\n");
            sb.Append("  ReflectionFormId: ").Append(ReflectionFormId).Append("\n");
            sb.Append("  ApprovedHours: ").Append(ApprovedHours).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  IsCurrent: ").Append(IsCurrent).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  ReflectionFormApproval: ").Append(ReflectionFormApproval).Append("\n");
            sb.Append("  MaxNumberOfHours: ").Append(MaxNumberOfHours).Append("\n");
            sb.Append("  ReflectionFormResponse: ").Append(ReflectionFormResponse).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  AllowsTotalTimelogHoursSubmission: ").Append(AllowsTotalTimelogHoursSubmission).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  CanGeoLog: ").Append(CanGeoLog).Append("\n");
            sb.Append("  CanSubmitPayPeriods: ").Append(CanSubmitPayPeriods).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CurrentGeoLogs: ").Append(CurrentGeoLogs).Append("\n");
            sb.Append("  UserStartedExperience: ").Append(UserStartedExperience).Append("\n");
            sb.Append("  HasPayPeriods: ").Append(HasPayPeriods).Append("\n");
            sb.Append("  UserExperienceId: ").Append(UserExperienceId).Append("\n");
            sb.Append("  TimeLogs: ").Append(TimeLogs).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FullExperience)obj);
        }

        /// <summary>
        /// Returns true if FullExperience instances are equal
        /// </summary>
        /// <param name="other">Instance of FullExperience to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FullExperience other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.Equals(other.Organization)
                ) && 
                (
                    ExperienceText == other.ExperienceText ||
                    ExperienceText != null &&
                    ExperienceText.Equals(other.ExperienceText)
                ) && 
                (
                    ReflectionFormId == other.ReflectionFormId ||
                    ReflectionFormId != null &&
                    ReflectionFormId.Equals(other.ReflectionFormId)
                ) && 
                (
                    ApprovedHours == other.ApprovedHours ||
                    
                    ApprovedHours.Equals(other.ApprovedHours)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    IsCurrent == other.IsCurrent ||
                    
                    IsCurrent.Equals(other.IsCurrent)
                ) && 
                (
                    Contact == other.Contact ||
                    Contact != null &&
                    Contact.Equals(other.Contact)
                ) && 
                (
                    ReflectionFormApproval == other.ReflectionFormApproval ||
                    ReflectionFormApproval != null &&
                    ReflectionFormApproval.Equals(other.ReflectionFormApproval)
                ) && 
                (
                    MaxNumberOfHours == other.MaxNumberOfHours ||
                    MaxNumberOfHours != null &&
                    MaxNumberOfHours.Equals(other.MaxNumberOfHours)
                ) && 
                (
                    ReflectionFormResponse == other.ReflectionFormResponse ||
                    ReflectionFormResponse != null &&
                    ReflectionFormResponse.Equals(other.ReflectionFormResponse)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    AllowsTotalTimelogHoursSubmission == other.AllowsTotalTimelogHoursSubmission ||
                    
                    AllowsTotalTimelogHoursSubmission.Equals(other.AllowsTotalTimelogHoursSubmission)
                ) && 
                (
                    UserId == other.UserId ||
                    
                    UserId.Equals(other.UserId)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    CanGeoLog == other.CanGeoLog ||
                    
                    CanGeoLog.Equals(other.CanGeoLog)
                ) && 
                (
                    CanSubmitPayPeriods == other.CanSubmitPayPeriods ||
                    
                    CanSubmitPayPeriods.Equals(other.CanSubmitPayPeriods)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    CurrentGeoLogs == other.CurrentGeoLogs ||
                    CurrentGeoLogs != null &&
                    other.CurrentGeoLogs != null &&
                    CurrentGeoLogs.SequenceEqual(other.CurrentGeoLogs)
                ) && 
                (
                    UserStartedExperience == other.UserStartedExperience ||
                    UserStartedExperience != null &&
                    UserStartedExperience.Equals(other.UserStartedExperience)
                ) && 
                (
                    HasPayPeriods == other.HasPayPeriods ||
                    
                    HasPayPeriods.Equals(other.HasPayPeriods)
                ) && 
                (
                    UserExperienceId == other.UserExperienceId ||
                    UserExperienceId != null &&
                    UserExperienceId.Equals(other.UserExperienceId)
                ) && 
                (
                    TimeLogs == other.TimeLogs ||
                    TimeLogs != null &&
                    other.TimeLogs != null &&
                    TimeLogs.SequenceEqual(other.TimeLogs)
                ) && 
                (
                    Approved == other.Approved ||
                    
                    Approved.Equals(other.Approved)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (ExperienceText != null)
                    hashCode = hashCode * 59 + ExperienceText.GetHashCode();
                    if (ReflectionFormId != null)
                    hashCode = hashCode * 59 + ReflectionFormId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApprovedHours.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsCurrent.GetHashCode();
                    if (Contact != null)
                    hashCode = hashCode * 59 + Contact.GetHashCode();
                    if (ReflectionFormApproval != null)
                    hashCode = hashCode * 59 + ReflectionFormApproval.GetHashCode();
                    if (MaxNumberOfHours != null)
                    hashCode = hashCode * 59 + MaxNumberOfHours.GetHashCode();
                    if (ReflectionFormResponse != null)
                    hashCode = hashCode * 59 + ReflectionFormResponse.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowsTotalTimelogHoursSubmission.GetHashCode();
                    
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanGeoLog.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanSubmitPayPeriods.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (CurrentGeoLogs != null)
                    hashCode = hashCode * 59 + CurrentGeoLogs.GetHashCode();
                    if (UserStartedExperience != null)
                    hashCode = hashCode * 59 + UserStartedExperience.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasPayPeriods.GetHashCode();
                    if (UserExperienceId != null)
                    hashCode = hashCode * 59 + UserExperienceId.GetHashCode();
                    if (TimeLogs != null)
                    hashCode = hashCode * 59 + TimeLogs.GetHashCode();
                    
                    hashCode = hashCode * 59 + Approved.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FullExperience left, FullExperience right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FullExperience left, FullExperience right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
