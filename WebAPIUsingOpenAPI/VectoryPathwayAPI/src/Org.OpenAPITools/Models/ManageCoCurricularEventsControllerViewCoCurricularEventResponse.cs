/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ManageCoCurricularEventsControllerViewCoCurricularEventResponse : IEquatable<ManageCoCurricularEventsControllerViewCoCurricularEventResponse>
    {
        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [Required]
        [DataMember(Name="eventId", EmitDefaultValue=true)]
        public long EventId { get; set; }

        /// <summary>
        /// Gets or Sets IsRepeating
        /// </summary>
        [Required]
        [DataMember(Name="isRepeating", EmitDefaultValue=true)]
        public bool IsRepeating { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [Required]
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationCode
        /// </summary>
        [DataMember(Name="registrationCode", EmitDefaultValue=true)]
        public string RegistrationCode { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CanEdit
        /// </summary>
        [Required]
        [DataMember(Name="canEdit", EmitDefaultValue=true)]
        public bool CanEdit { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [Required]
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Announcements
        /// </summary>
        [Required]
        [DataMember(Name="announcements", EmitDefaultValue=false)]
        public List<Object> Announcements { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationLink
        /// </summary>
        [DataMember(Name="registrationLink", EmitDefaultValue=true)]
        public string RegistrationLink { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets EventDateId
        /// </summary>
        [Required]
        [DataMember(Name="eventDateId", EmitDefaultValue=true)]
        public long EventDateId { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name="organization", EmitDefaultValue=true)]
        public string Organization { get; set; }

        /// <summary>
        /// Gets or Sets FormId
        /// </summary>
        [DataMember(Name="form_id", EmitDefaultValue=true)]
        public long? FormId { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [Required]
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="group_id", EmitDefaultValue=true)]
        public long? GroupId { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationType
        /// </summary>
        [Required]
        [DataMember(Name="registrationType", EmitDefaultValue=true)]
        public long RegistrationType { get; set; }

        /// <summary>
        /// Gets or Sets FileUrl
        /// </summary>
        [DataMember(Name="fileUrl", EmitDefaultValue=true)]
        public string FileUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManageCoCurricularEventsControllerViewCoCurricularEventResponse {\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  IsRepeating: ").Append(IsRepeating).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  RegistrationCode: ").Append(RegistrationCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CanEdit: ").Append(CanEdit).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Announcements: ").Append(Announcements).Append("\n");
            sb.Append("  RegistrationLink: ").Append(RegistrationLink).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EventDateId: ").Append(EventDateId).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  RegistrationType: ").Append(RegistrationType).Append("\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ManageCoCurricularEventsControllerViewCoCurricularEventResponse)obj);
        }

        /// <summary>
        /// Returns true if ManageCoCurricularEventsControllerViewCoCurricularEventResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ManageCoCurricularEventsControllerViewCoCurricularEventResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManageCoCurricularEventsControllerViewCoCurricularEventResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EventId == other.EventId ||
                    
                    EventId.Equals(other.EventId)
                ) && 
                (
                    IsRepeating == other.IsRepeating ||
                    
                    IsRepeating.Equals(other.IsRepeating)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    RegistrationCode == other.RegistrationCode ||
                    RegistrationCode != null &&
                    RegistrationCode.Equals(other.RegistrationCode)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    CanEdit == other.CanEdit ||
                    
                    CanEdit.Equals(other.CanEdit)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Announcements == other.Announcements ||
                    Announcements != null &&
                    other.Announcements != null &&
                    Announcements.SequenceEqual(other.Announcements)
                ) && 
                (
                    RegistrationLink == other.RegistrationLink ||
                    RegistrationLink != null &&
                    RegistrationLink.Equals(other.RegistrationLink)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    EventDateId == other.EventDateId ||
                    
                    EventDateId.Equals(other.EventDateId)
                ) && 
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.Equals(other.Organization)
                ) && 
                (
                    FormId == other.FormId ||
                    FormId != null &&
                    FormId.Equals(other.FormId)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    GroupId == other.GroupId ||
                    GroupId != null &&
                    GroupId.Equals(other.GroupId)
                ) && 
                (
                    RegistrationType == other.RegistrationType ||
                    
                    RegistrationType.Equals(other.RegistrationType)
                ) && 
                (
                    FileUrl == other.FileUrl ||
                    FileUrl != null &&
                    FileUrl.Equals(other.FileUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + EventId.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsRepeating.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (RegistrationCode != null)
                    hashCode = hashCode * 59 + RegistrationCode.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanEdit.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Announcements != null)
                    hashCode = hashCode * 59 + Announcements.GetHashCode();
                    if (RegistrationLink != null)
                    hashCode = hashCode * 59 + RegistrationLink.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + EventDateId.GetHashCode();
                    if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (FormId != null)
                    hashCode = hashCode * 59 + FormId.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (GroupId != null)
                    hashCode = hashCode * 59 + GroupId.GetHashCode();
                    
                    hashCode = hashCode * 59 + RegistrationType.GetHashCode();
                    if (FileUrl != null)
                    hashCode = hashCode * 59 + FileUrl.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ManageCoCurricularEventsControllerViewCoCurricularEventResponse left, ManageCoCurricularEventsControllerViewCoCurricularEventResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ManageCoCurricularEventsControllerViewCoCurricularEventResponse left, ManageCoCurricularEventsControllerViewCoCurricularEventResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
