/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ManageCoCurricularEventsControllerExternalRegisterForEventRequest : IEquatable<ManageCoCurricularEventsControllerExternalRegisterForEventRequest>
    {
        /// <summary>
        /// Gets or Sets FormRequest
        /// </summary>
        [DataMember(Name="formRequest", EmitDefaultValue=false)]
        public CompleteFormRequest FormRequest { get; set; }

        /// <summary>
        /// Gets or Sets ShiftId
        /// </summary>
        [DataMember(Name="shiftId", EmitDefaultValue=true)]
        public long? ShiftId { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [Required]
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [Required]
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [Required]
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [Required]
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManageCoCurricularEventsControllerExternalRegisterForEventRequest {\n");
            sb.Append("  FormRequest: ").Append(FormRequest).Append("\n");
            sb.Append("  ShiftId: ").Append(ShiftId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ManageCoCurricularEventsControllerExternalRegisterForEventRequest)obj);
        }

        /// <summary>
        /// Returns true if ManageCoCurricularEventsControllerExternalRegisterForEventRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ManageCoCurricularEventsControllerExternalRegisterForEventRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManageCoCurricularEventsControllerExternalRegisterForEventRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FormRequest == other.FormRequest ||
                    FormRequest != null &&
                    FormRequest.Equals(other.FormRequest)
                ) && 
                (
                    ShiftId == other.ShiftId ||
                    ShiftId != null &&
                    ShiftId.Equals(other.ShiftId)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    Token == other.Token ||
                    Token != null &&
                    Token.Equals(other.Token)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FormRequest != null)
                    hashCode = hashCode * 59 + FormRequest.GetHashCode();
                    if (ShiftId != null)
                    hashCode = hashCode * 59 + ShiftId.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (Token != null)
                    hashCode = hashCode * 59 + Token.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ManageCoCurricularEventsControllerExternalRegisterForEventRequest left, ManageCoCurricularEventsControllerExternalRegisterForEventRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ManageCoCurricularEventsControllerExternalRegisterForEventRequest left, ManageCoCurricularEventsControllerExternalRegisterForEventRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
