/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StudentProfileResponse : IEquatable<StudentProfileResponse>
    {
        /// <summary>
        /// Gets or Sets TimeLogs
        /// </summary>
        [Required]
        [DataMember(Name="timeLogs", EmitDefaultValue=false)]
        public List<TimeLogDTO> TimeLogs { get; set; }

        /// <summary>
        /// Gets or Sets Grades
        /// </summary>
        [Required]
        [DataMember(Name="grades", EmitDefaultValue=false)]
        public List<StudentProfileResponseAssignmentGrade> Grades { get; set; }

        /// <summary>
        /// Gets or Sets CanMergeServeData
        /// </summary>
        [Required]
        [DataMember(Name="canMergeServeData", EmitDefaultValue=true)]
        public bool CanMergeServeData { get; set; }

        /// <summary>
        /// Gets or Sets Courses
        /// </summary>
        [Required]
        [DataMember(Name="courses", EmitDefaultValue=false)]
        public List<StudentProfileResponseUserCourseData> Courses { get; set; }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [Required]
        [DataMember(Name="school", EmitDefaultValue=false)]
        public string School { get; set; }

        /// <summary>
        /// Gets or Sets Transcripts
        /// </summary>
        [Required]
        [DataMember(Name="transcripts", EmitDefaultValue=false)]
        public List<StudentProfileResponseTranscript> Transcripts { get; set; }

        /// <summary>
        /// Gets or Sets Colleges
        /// </summary>
        [Required]
        [DataMember(Name="colleges", EmitDefaultValue=false)]
        public List<StudentProfileResponseCollege> Colleges { get; set; }

        /// <summary>
        /// Gets or Sets OverriddenSchoolYearServeGoal
        /// </summary>
        [DataMember(Name="overriddenSchoolYearServeGoal", EmitDefaultValue=true)]
        public double? OverriddenSchoolYearServeGoal { get; set; }

        /// <summary>
        /// Gets or Sets Attendance
        /// </summary>
        [Required]
        [DataMember(Name="attendance", EmitDefaultValue=false)]
        public List<StudentProfileResponseAttendance> Attendance { get; set; }

        /// <summary>
        /// Gets or Sets Badges
        /// </summary>
        [Required]
        [DataMember(Name="badges", EmitDefaultValue=false)]
        public List<BadgeDTO> Badges { get; set; }

        /// <summary>
        /// Gets or Sets RejectedServiceLogs
        /// </summary>
        [Required]
        [DataMember(Name="rejectedServiceLogs", EmitDefaultValue=false)]
        public List<StudentProfileResponseRejectedLog> RejectedServiceLogs { get; set; }

        /// <summary>
        /// Gets or Sets Parents
        /// </summary>
        [Required]
        [DataMember(Name="parents", EmitDefaultValue=false)]
        public List<UserParentDTO> Parents { get; set; }

        /// <summary>
        /// Gets or Sets Activities
        /// </summary>
        [Required]
        [DataMember(Name="activities", EmitDefaultValue=false)]
        public List<FullActivityDataDTO> Activities { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedHours
        /// </summary>
        [Required]
        [DataMember(Name="approvedHours", EmitDefaultValue=true)]
        public double ApprovedHours { get; set; }

        /// <summary>
        /// Gets or Sets LifetimeServiceHours
        /// </summary>
        [DataMember(Name="lifetimeServiceHours", EmitDefaultValue=true)]
        public double? LifetimeServiceHours { get; set; }

        /// <summary>
        /// Gets or Sets CompletedTasks
        /// </summary>
        [Required]
        [DataMember(Name="completedTasks", EmitDefaultValue=false)]
        public List<TaskUserData> CompletedTasks { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [Required]
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<UserFileDTO> Files { get; set; }

        /// <summary>
        /// Gets or Sets CanUnlinkCommonAppAccount
        /// </summary>
        [Required]
        [DataMember(Name="canUnlinkCommonAppAccount", EmitDefaultValue=true)]
        public bool CanUnlinkCommonAppAccount { get; set; }

        /// <summary>
        /// Gets or Sets ServiceLogsPerGroup
        /// </summary>
        [Required]
        [DataMember(Name="serviceLogsPerGroup", EmitDefaultValue=false)]
        public List<StudentProfileResponseServiceLogPerGroup> ServiceLogsPerGroup { get; set; }

        /// <summary>
        /// Gets or Sets Experiences
        /// </summary>
        [Required]
        [DataMember(Name="experiences", EmitDefaultValue=false)]
        public List<FullExperience> Experiences { get; set; }

        /// <summary>
        /// Gets or Sets Forms
        /// </summary>
        [Required]
        [DataMember(Name="forms", EmitDefaultValue=false)]
        public List<StudentProfileResponseFormData> Forms { get; set; }

        /// <summary>
        /// Gets or Sets BypassCollegeGradeRequirement
        /// </summary>
        [Required]
        [DataMember(Name="bypassCollegeGradeRequirement", EmitDefaultValue=true)]
        public bool BypassCollegeGradeRequirement { get; set; }

        /// <summary>
        /// Gets or Sets ServiceHoursThisYear
        /// </summary>
        [DataMember(Name="serviceHoursThisYear", EmitDefaultValue=true)]
        public double? ServiceHoursThisYear { get; set; }

        /// <summary>
        /// Gets or Sets PendingHours
        /// </summary>
        [Required]
        [DataMember(Name="pendingHours", EmitDefaultValue=true)]
        public double PendingHours { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [Required]
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<FullUserNote> Notes { get; set; }

        /// <summary>
        /// Gets or Sets OptionalProfileSubmission
        /// </summary>
        [DataMember(Name="optionalProfileSubmission", EmitDefaultValue=true)]
        public long? OptionalProfileSubmission { get; set; }

        /// <summary>
        /// Gets or Sets Tests
        /// </summary>
        [Required]
        [DataMember(Name="tests", EmitDefaultValue=false)]
        public List<StudentProfileResponseUserTestingData> Tests { get; set; }

        /// <summary>
        /// Gets or Sets LastSignInDate
        /// </summary>
        [DataMember(Name="lastSignInDate", EmitDefaultValue=true)]
        public DateTime? LastSignInDate { get; set; }

        /// <summary>
        /// Gets or Sets PendingTasks
        /// </summary>
        [Required]
        [DataMember(Name="pendingTasks", EmitDefaultValue=false)]
        public List<TaskUserData> PendingTasks { get; set; }

        /// <summary>
        /// Gets or Sets RequiredProfileSubmission
        /// </summary>
        [DataMember(Name="requiredProfileSubmission", EmitDefaultValue=true)]
        public long? RequiredProfileSubmission { get; set; }

        /// <summary>
        /// Gets or Sets Logs
        /// </summary>
        [Required]
        [DataMember(Name="logs", EmitDefaultValue=false)]
        public List<StudentProfileResponseLog> Logs { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [Required]
        [DataMember(Name="user", EmitDefaultValue=false)]
        public StudentUser User { get; set; }

        /// <summary>
        /// Gets or Sets CaseloadManagers
        /// </summary>
        [Required]
        [DataMember(Name="caseloadManagers", EmitDefaultValue=false)]
        public List<BasicUser> CaseloadManagers { get; set; }

        /// <summary>
        /// Gets or Sets ShouldShowAttendance
        /// </summary>
        [Required]
        [DataMember(Name="shouldShowAttendance", EmitDefaultValue=true)]
        public bool ShouldShowAttendance { get; set; }

        /// <summary>
        /// Gets or Sets Credentials
        /// </summary>
        [Required]
        [DataMember(Name="credentials", EmitDefaultValue=false)]
        public List<CredentialDTO> Credentials { get; set; }

        /// <summary>
        /// Gets or Sets Emails
        /// </summary>
        [Required]
        [DataMember(Name="emails", EmitDefaultValue=false)]
        public List<FullStudentEmail> Emails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentProfileResponse {\n");
            sb.Append("  TimeLogs: ").Append(TimeLogs).Append("\n");
            sb.Append("  Grades: ").Append(Grades).Append("\n");
            sb.Append("  CanMergeServeData: ").Append(CanMergeServeData).Append("\n");
            sb.Append("  Courses: ").Append(Courses).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  Transcripts: ").Append(Transcripts).Append("\n");
            sb.Append("  Colleges: ").Append(Colleges).Append("\n");
            sb.Append("  OverriddenSchoolYearServeGoal: ").Append(OverriddenSchoolYearServeGoal).Append("\n");
            sb.Append("  Attendance: ").Append(Attendance).Append("\n");
            sb.Append("  Badges: ").Append(Badges).Append("\n");
            sb.Append("  RejectedServiceLogs: ").Append(RejectedServiceLogs).Append("\n");
            sb.Append("  Parents: ").Append(Parents).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  ApprovedHours: ").Append(ApprovedHours).Append("\n");
            sb.Append("  LifetimeServiceHours: ").Append(LifetimeServiceHours).Append("\n");
            sb.Append("  CompletedTasks: ").Append(CompletedTasks).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  CanUnlinkCommonAppAccount: ").Append(CanUnlinkCommonAppAccount).Append("\n");
            sb.Append("  ServiceLogsPerGroup: ").Append(ServiceLogsPerGroup).Append("\n");
            sb.Append("  Experiences: ").Append(Experiences).Append("\n");
            sb.Append("  Forms: ").Append(Forms).Append("\n");
            sb.Append("  BypassCollegeGradeRequirement: ").Append(BypassCollegeGradeRequirement).Append("\n");
            sb.Append("  ServiceHoursThisYear: ").Append(ServiceHoursThisYear).Append("\n");
            sb.Append("  PendingHours: ").Append(PendingHours).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  OptionalProfileSubmission: ").Append(OptionalProfileSubmission).Append("\n");
            sb.Append("  Tests: ").Append(Tests).Append("\n");
            sb.Append("  LastSignInDate: ").Append(LastSignInDate).Append("\n");
            sb.Append("  PendingTasks: ").Append(PendingTasks).Append("\n");
            sb.Append("  RequiredProfileSubmission: ").Append(RequiredProfileSubmission).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  CaseloadManagers: ").Append(CaseloadManagers).Append("\n");
            sb.Append("  ShouldShowAttendance: ").Append(ShouldShowAttendance).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StudentProfileResponse)obj);
        }

        /// <summary>
        /// Returns true if StudentProfileResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of StudentProfileResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentProfileResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TimeLogs == other.TimeLogs ||
                    TimeLogs != null &&
                    other.TimeLogs != null &&
                    TimeLogs.SequenceEqual(other.TimeLogs)
                ) && 
                (
                    Grades == other.Grades ||
                    Grades != null &&
                    other.Grades != null &&
                    Grades.SequenceEqual(other.Grades)
                ) && 
                (
                    CanMergeServeData == other.CanMergeServeData ||
                    
                    CanMergeServeData.Equals(other.CanMergeServeData)
                ) && 
                (
                    Courses == other.Courses ||
                    Courses != null &&
                    other.Courses != null &&
                    Courses.SequenceEqual(other.Courses)
                ) && 
                (
                    School == other.School ||
                    School != null &&
                    School.Equals(other.School)
                ) && 
                (
                    Transcripts == other.Transcripts ||
                    Transcripts != null &&
                    other.Transcripts != null &&
                    Transcripts.SequenceEqual(other.Transcripts)
                ) && 
                (
                    Colleges == other.Colleges ||
                    Colleges != null &&
                    other.Colleges != null &&
                    Colleges.SequenceEqual(other.Colleges)
                ) && 
                (
                    OverriddenSchoolYearServeGoal == other.OverriddenSchoolYearServeGoal ||
                    OverriddenSchoolYearServeGoal != null &&
                    OverriddenSchoolYearServeGoal.Equals(other.OverriddenSchoolYearServeGoal)
                ) && 
                (
                    Attendance == other.Attendance ||
                    Attendance != null &&
                    other.Attendance != null &&
                    Attendance.SequenceEqual(other.Attendance)
                ) && 
                (
                    Badges == other.Badges ||
                    Badges != null &&
                    other.Badges != null &&
                    Badges.SequenceEqual(other.Badges)
                ) && 
                (
                    RejectedServiceLogs == other.RejectedServiceLogs ||
                    RejectedServiceLogs != null &&
                    other.RejectedServiceLogs != null &&
                    RejectedServiceLogs.SequenceEqual(other.RejectedServiceLogs)
                ) && 
                (
                    Parents == other.Parents ||
                    Parents != null &&
                    other.Parents != null &&
                    Parents.SequenceEqual(other.Parents)
                ) && 
                (
                    Activities == other.Activities ||
                    Activities != null &&
                    other.Activities != null &&
                    Activities.SequenceEqual(other.Activities)
                ) && 
                (
                    ApprovedHours == other.ApprovedHours ||
                    
                    ApprovedHours.Equals(other.ApprovedHours)
                ) && 
                (
                    LifetimeServiceHours == other.LifetimeServiceHours ||
                    LifetimeServiceHours != null &&
                    LifetimeServiceHours.Equals(other.LifetimeServiceHours)
                ) && 
                (
                    CompletedTasks == other.CompletedTasks ||
                    CompletedTasks != null &&
                    other.CompletedTasks != null &&
                    CompletedTasks.SequenceEqual(other.CompletedTasks)
                ) && 
                (
                    Files == other.Files ||
                    Files != null &&
                    other.Files != null &&
                    Files.SequenceEqual(other.Files)
                ) && 
                (
                    CanUnlinkCommonAppAccount == other.CanUnlinkCommonAppAccount ||
                    
                    CanUnlinkCommonAppAccount.Equals(other.CanUnlinkCommonAppAccount)
                ) && 
                (
                    ServiceLogsPerGroup == other.ServiceLogsPerGroup ||
                    ServiceLogsPerGroup != null &&
                    other.ServiceLogsPerGroup != null &&
                    ServiceLogsPerGroup.SequenceEqual(other.ServiceLogsPerGroup)
                ) && 
                (
                    Experiences == other.Experiences ||
                    Experiences != null &&
                    other.Experiences != null &&
                    Experiences.SequenceEqual(other.Experiences)
                ) && 
                (
                    Forms == other.Forms ||
                    Forms != null &&
                    other.Forms != null &&
                    Forms.SequenceEqual(other.Forms)
                ) && 
                (
                    BypassCollegeGradeRequirement == other.BypassCollegeGradeRequirement ||
                    
                    BypassCollegeGradeRequirement.Equals(other.BypassCollegeGradeRequirement)
                ) && 
                (
                    ServiceHoursThisYear == other.ServiceHoursThisYear ||
                    ServiceHoursThisYear != null &&
                    ServiceHoursThisYear.Equals(other.ServiceHoursThisYear)
                ) && 
                (
                    PendingHours == other.PendingHours ||
                    
                    PendingHours.Equals(other.PendingHours)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    other.Notes != null &&
                    Notes.SequenceEqual(other.Notes)
                ) && 
                (
                    OptionalProfileSubmission == other.OptionalProfileSubmission ||
                    OptionalProfileSubmission != null &&
                    OptionalProfileSubmission.Equals(other.OptionalProfileSubmission)
                ) && 
                (
                    Tests == other.Tests ||
                    Tests != null &&
                    other.Tests != null &&
                    Tests.SequenceEqual(other.Tests)
                ) && 
                (
                    LastSignInDate == other.LastSignInDate ||
                    LastSignInDate != null &&
                    LastSignInDate.Equals(other.LastSignInDate)
                ) && 
                (
                    PendingTasks == other.PendingTasks ||
                    PendingTasks != null &&
                    other.PendingTasks != null &&
                    PendingTasks.SequenceEqual(other.PendingTasks)
                ) && 
                (
                    RequiredProfileSubmission == other.RequiredProfileSubmission ||
                    RequiredProfileSubmission != null &&
                    RequiredProfileSubmission.Equals(other.RequiredProfileSubmission)
                ) && 
                (
                    Logs == other.Logs ||
                    Logs != null &&
                    other.Logs != null &&
                    Logs.SequenceEqual(other.Logs)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    CaseloadManagers == other.CaseloadManagers ||
                    CaseloadManagers != null &&
                    other.CaseloadManagers != null &&
                    CaseloadManagers.SequenceEqual(other.CaseloadManagers)
                ) && 
                (
                    ShouldShowAttendance == other.ShouldShowAttendance ||
                    
                    ShouldShowAttendance.Equals(other.ShouldShowAttendance)
                ) && 
                (
                    Credentials == other.Credentials ||
                    Credentials != null &&
                    other.Credentials != null &&
                    Credentials.SequenceEqual(other.Credentials)
                ) && 
                (
                    Emails == other.Emails ||
                    Emails != null &&
                    other.Emails != null &&
                    Emails.SequenceEqual(other.Emails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TimeLogs != null)
                    hashCode = hashCode * 59 + TimeLogs.GetHashCode();
                    if (Grades != null)
                    hashCode = hashCode * 59 + Grades.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanMergeServeData.GetHashCode();
                    if (Courses != null)
                    hashCode = hashCode * 59 + Courses.GetHashCode();
                    if (School != null)
                    hashCode = hashCode * 59 + School.GetHashCode();
                    if (Transcripts != null)
                    hashCode = hashCode * 59 + Transcripts.GetHashCode();
                    if (Colleges != null)
                    hashCode = hashCode * 59 + Colleges.GetHashCode();
                    if (OverriddenSchoolYearServeGoal != null)
                    hashCode = hashCode * 59 + OverriddenSchoolYearServeGoal.GetHashCode();
                    if (Attendance != null)
                    hashCode = hashCode * 59 + Attendance.GetHashCode();
                    if (Badges != null)
                    hashCode = hashCode * 59 + Badges.GetHashCode();
                    if (RejectedServiceLogs != null)
                    hashCode = hashCode * 59 + RejectedServiceLogs.GetHashCode();
                    if (Parents != null)
                    hashCode = hashCode * 59 + Parents.GetHashCode();
                    if (Activities != null)
                    hashCode = hashCode * 59 + Activities.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApprovedHours.GetHashCode();
                    if (LifetimeServiceHours != null)
                    hashCode = hashCode * 59 + LifetimeServiceHours.GetHashCode();
                    if (CompletedTasks != null)
                    hashCode = hashCode * 59 + CompletedTasks.GetHashCode();
                    if (Files != null)
                    hashCode = hashCode * 59 + Files.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanUnlinkCommonAppAccount.GetHashCode();
                    if (ServiceLogsPerGroup != null)
                    hashCode = hashCode * 59 + ServiceLogsPerGroup.GetHashCode();
                    if (Experiences != null)
                    hashCode = hashCode * 59 + Experiences.GetHashCode();
                    if (Forms != null)
                    hashCode = hashCode * 59 + Forms.GetHashCode();
                    
                    hashCode = hashCode * 59 + BypassCollegeGradeRequirement.GetHashCode();
                    if (ServiceHoursThisYear != null)
                    hashCode = hashCode * 59 + ServiceHoursThisYear.GetHashCode();
                    
                    hashCode = hashCode * 59 + PendingHours.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    if (OptionalProfileSubmission != null)
                    hashCode = hashCode * 59 + OptionalProfileSubmission.GetHashCode();
                    if (Tests != null)
                    hashCode = hashCode * 59 + Tests.GetHashCode();
                    if (LastSignInDate != null)
                    hashCode = hashCode * 59 + LastSignInDate.GetHashCode();
                    if (PendingTasks != null)
                    hashCode = hashCode * 59 + PendingTasks.GetHashCode();
                    if (RequiredProfileSubmission != null)
                    hashCode = hashCode * 59 + RequiredProfileSubmission.GetHashCode();
                    if (Logs != null)
                    hashCode = hashCode * 59 + Logs.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (CaseloadManagers != null)
                    hashCode = hashCode * 59 + CaseloadManagers.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShouldShowAttendance.GetHashCode();
                    if (Credentials != null)
                    hashCode = hashCode * 59 + Credentials.GetHashCode();
                    if (Emails != null)
                    hashCode = hashCode * 59 + Emails.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StudentProfileResponse left, StudentProfileResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StudentProfileResponse left, StudentProfileResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
