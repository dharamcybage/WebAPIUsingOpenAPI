/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StudentUserExperienceDashboardResponse : IEquatable<StudentUserExperienceDashboardResponse>
    {
        /// <summary>
        /// Gets or Sets FailedToClockOut
        /// </summary>
        [Required]
        [DataMember(Name="failedToClockOut", EmitDefaultValue=true)]
        public long FailedToClockOut { get; set; }

        /// <summary>
        /// Gets or Sets StudentSpecialPopulation
        /// </summary>
        [Required]
        [DataMember(Name="studentSpecialPopulation", EmitDefaultValue=false)]
        public List<long> StudentSpecialPopulation { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowFormTotalSignatures
        /// </summary>
        [Required]
        [DataMember(Name="workflowFormTotalSignatures", EmitDefaultValue=true)]
        public long WorkflowFormTotalSignatures { get; set; }

        /// <summary>
        /// Gets or Sets StudentId
        /// </summary>
        [DataMember(Name="studentId", EmitDefaultValue=true)]
        public string StudentId { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceEndDate
        /// </summary>
        [DataMember(Name="experienceEndDate", EmitDefaultValue=true)]
        public DateTime? ExperienceEndDate { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceName
        /// </summary>
        [Required]
        [DataMember(Name="experienceName", EmitDefaultValue=false)]
        public string ExperienceName { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceStartDate
        /// </summary>
        [DataMember(Name="experienceStartDate", EmitDefaultValue=true)]
        public DateTime? ExperienceStartDate { get; set; }

        /// <summary>
        /// Gets or Sets StudentClusters
        /// </summary>
        [DataMember(Name="studentClusters", EmitDefaultValue=true)]
        public string StudentClusters { get; set; }

        /// <summary>
        /// Gets or Sets StudentLastName
        /// </summary>
        [Required]
        [DataMember(Name="studentLastName", EmitDefaultValue=false)]
        public string StudentLastName { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationEventsToBeStudentSigned
        /// </summary>
        [Required]
        [DataMember(Name="evaluationEventsToBeStudentSigned", EmitDefaultValue=true)]
        public long EvaluationEventsToBeStudentSigned { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowFormCompletedSignatures
        /// </summary>
        [Required]
        [DataMember(Name="workflowFormCompletedSignatures", EmitDefaultValue=true)]
        public long WorkflowFormCompletedSignatures { get; set; }

        /// <summary>
        /// Gets or Sets PendingPayPeriods
        /// </summary>
        [Required]
        [DataMember(Name="pendingPayPeriods", EmitDefaultValue=true)]
        public long PendingPayPeriods { get; set; }

        /// <summary>
        /// Gets or Sets StudentGrade
        /// </summary>
        [Required]
        [DataMember(Name="studentGrade", EmitDefaultValue=true)]
        public long StudentGrade { get; set; }

        /// <summary>
        /// Gets or Sets SchoolName
        /// </summary>
        [Required]
        [DataMember(Name="schoolName", EmitDefaultValue=false)]
        public string SchoolName { get; set; }

        /// <summary>
        /// Gets or Sets StudentEmail
        /// </summary>
        [Required]
        [DataMember(Name="studentEmail", EmitDefaultValue=false)]
        public string StudentEmail { get; set; }

        /// <summary>
        /// Gets or Sets TimeLogsToBePartnerApproved
        /// </summary>
        [Required]
        [DataMember(Name="timeLogsToBePartnerApproved", EmitDefaultValue=true)]
        public long TimeLogsToBePartnerApproved { get; set; }

        /// <summary>
        /// Gets or Sets StudentFirstName
        /// </summary>
        [Required]
        [DataMember(Name="studentFirstName", EmitDefaultValue=false)]
        public string StudentFirstName { get; set; }

        /// <summary>
        /// Gets or Sets StudentGender
        /// </summary>
        [DataMember(Name="studentGender", EmitDefaultValue=true)]
        public long? StudentGender { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationEventsTotal
        /// </summary>
        [Required]
        [DataMember(Name="evaluationEventsTotal", EmitDefaultValue=true)]
        public long EvaluationEventsTotal { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationEventsCompleted
        /// </summary>
        [Required]
        [DataMember(Name="evaluationEventsCompleted", EmitDefaultValue=true)]
        public long EvaluationEventsCompleted { get; set; }

        /// <summary>
        /// Gets or Sets StudentUserId
        /// </summary>
        [Required]
        [DataMember(Name="studentUserId", EmitDefaultValue=true)]
        public long StudentUserId { get; set; }

        /// <summary>
        /// Gets or Sets TimeLogsToBeAdminApproved
        /// </summary>
        [Required]
        [DataMember(Name="timeLogsToBeAdminApproved", EmitDefaultValue=true)]
        public long TimeLogsToBeAdminApproved { get; set; }

        /// <summary>
        /// Gets or Sets UserExperienceId
        /// </summary>
        [Required]
        [DataMember(Name="userExperienceId", EmitDefaultValue=true)]
        public long UserExperienceId { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceId
        /// </summary>
        [Required]
        [DataMember(Name="experienceId", EmitDefaultValue=true)]
        public long ExperienceId { get; set; }

        /// <summary>
        /// Gets or Sets SchoolId
        /// </summary>
        [Required]
        [DataMember(Name="schoolId", EmitDefaultValue=true)]
        public long SchoolId { get; set; }

        /// <summary>
        /// Gets or Sets TotalApprovedHours
        /// </summary>
        [Required]
        [DataMember(Name="totalApprovedHours", EmitDefaultValue=true)]
        public double TotalApprovedHours { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceOrganizationId
        /// </summary>
        [Required]
        [DataMember(Name="experienceOrganizationId", EmitDefaultValue=true)]
        public long ExperienceOrganizationId { get; set; }

        /// <summary>
        /// Gets or Sets OverduePayPeriods
        /// </summary>
        [Required]
        [DataMember(Name="overduePayPeriods", EmitDefaultValue=true)]
        public long OverduePayPeriods { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceClusters
        /// </summary>
        [Required]
        [DataMember(Name="experienceClusters", EmitDefaultValue=false)]
        public List<string> ExperienceClusters { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationEventsOverdueByPartner
        /// </summary>
        [Required]
        [DataMember(Name="evaluationEventsOverdueByPartner", EmitDefaultValue=true)]
        public long EvaluationEventsOverdueByPartner { get; set; }

        /// <summary>
        /// Gets or Sets StudentRace
        /// </summary>
        [Required]
        [DataMember(Name="studentRace", EmitDefaultValue=false)]
        public string StudentRace { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceOrganizationName
        /// </summary>
        [Required]
        [DataMember(Name="experienceOrganizationName", EmitDefaultValue=false)]
        public string ExperienceOrganizationName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentUserExperienceDashboardResponse {\n");
            sb.Append("  FailedToClockOut: ").Append(FailedToClockOut).Append("\n");
            sb.Append("  StudentSpecialPopulation: ").Append(StudentSpecialPopulation).Append("\n");
            sb.Append("  WorkflowFormTotalSignatures: ").Append(WorkflowFormTotalSignatures).Append("\n");
            sb.Append("  StudentId: ").Append(StudentId).Append("\n");
            sb.Append("  ExperienceEndDate: ").Append(ExperienceEndDate).Append("\n");
            sb.Append("  ExperienceName: ").Append(ExperienceName).Append("\n");
            sb.Append("  ExperienceStartDate: ").Append(ExperienceStartDate).Append("\n");
            sb.Append("  StudentClusters: ").Append(StudentClusters).Append("\n");
            sb.Append("  StudentLastName: ").Append(StudentLastName).Append("\n");
            sb.Append("  EvaluationEventsToBeStudentSigned: ").Append(EvaluationEventsToBeStudentSigned).Append("\n");
            sb.Append("  WorkflowFormCompletedSignatures: ").Append(WorkflowFormCompletedSignatures).Append("\n");
            sb.Append("  PendingPayPeriods: ").Append(PendingPayPeriods).Append("\n");
            sb.Append("  StudentGrade: ").Append(StudentGrade).Append("\n");
            sb.Append("  SchoolName: ").Append(SchoolName).Append("\n");
            sb.Append("  StudentEmail: ").Append(StudentEmail).Append("\n");
            sb.Append("  TimeLogsToBePartnerApproved: ").Append(TimeLogsToBePartnerApproved).Append("\n");
            sb.Append("  StudentFirstName: ").Append(StudentFirstName).Append("\n");
            sb.Append("  StudentGender: ").Append(StudentGender).Append("\n");
            sb.Append("  EvaluationEventsTotal: ").Append(EvaluationEventsTotal).Append("\n");
            sb.Append("  EvaluationEventsCompleted: ").Append(EvaluationEventsCompleted).Append("\n");
            sb.Append("  StudentUserId: ").Append(StudentUserId).Append("\n");
            sb.Append("  TimeLogsToBeAdminApproved: ").Append(TimeLogsToBeAdminApproved).Append("\n");
            sb.Append("  UserExperienceId: ").Append(UserExperienceId).Append("\n");
            sb.Append("  ExperienceId: ").Append(ExperienceId).Append("\n");
            sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            sb.Append("  TotalApprovedHours: ").Append(TotalApprovedHours).Append("\n");
            sb.Append("  ExperienceOrganizationId: ").Append(ExperienceOrganizationId).Append("\n");
            sb.Append("  OverduePayPeriods: ").Append(OverduePayPeriods).Append("\n");
            sb.Append("  ExperienceClusters: ").Append(ExperienceClusters).Append("\n");
            sb.Append("  EvaluationEventsOverdueByPartner: ").Append(EvaluationEventsOverdueByPartner).Append("\n");
            sb.Append("  StudentRace: ").Append(StudentRace).Append("\n");
            sb.Append("  ExperienceOrganizationName: ").Append(ExperienceOrganizationName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StudentUserExperienceDashboardResponse)obj);
        }

        /// <summary>
        /// Returns true if StudentUserExperienceDashboardResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of StudentUserExperienceDashboardResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentUserExperienceDashboardResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FailedToClockOut == other.FailedToClockOut ||
                    
                    FailedToClockOut.Equals(other.FailedToClockOut)
                ) && 
                (
                    StudentSpecialPopulation == other.StudentSpecialPopulation ||
                    StudentSpecialPopulation != null &&
                    other.StudentSpecialPopulation != null &&
                    StudentSpecialPopulation.SequenceEqual(other.StudentSpecialPopulation)
                ) && 
                (
                    WorkflowFormTotalSignatures == other.WorkflowFormTotalSignatures ||
                    
                    WorkflowFormTotalSignatures.Equals(other.WorkflowFormTotalSignatures)
                ) && 
                (
                    StudentId == other.StudentId ||
                    StudentId != null &&
                    StudentId.Equals(other.StudentId)
                ) && 
                (
                    ExperienceEndDate == other.ExperienceEndDate ||
                    ExperienceEndDate != null &&
                    ExperienceEndDate.Equals(other.ExperienceEndDate)
                ) && 
                (
                    ExperienceName == other.ExperienceName ||
                    ExperienceName != null &&
                    ExperienceName.Equals(other.ExperienceName)
                ) && 
                (
                    ExperienceStartDate == other.ExperienceStartDate ||
                    ExperienceStartDate != null &&
                    ExperienceStartDate.Equals(other.ExperienceStartDate)
                ) && 
                (
                    StudentClusters == other.StudentClusters ||
                    StudentClusters != null &&
                    StudentClusters.Equals(other.StudentClusters)
                ) && 
                (
                    StudentLastName == other.StudentLastName ||
                    StudentLastName != null &&
                    StudentLastName.Equals(other.StudentLastName)
                ) && 
                (
                    EvaluationEventsToBeStudentSigned == other.EvaluationEventsToBeStudentSigned ||
                    
                    EvaluationEventsToBeStudentSigned.Equals(other.EvaluationEventsToBeStudentSigned)
                ) && 
                (
                    WorkflowFormCompletedSignatures == other.WorkflowFormCompletedSignatures ||
                    
                    WorkflowFormCompletedSignatures.Equals(other.WorkflowFormCompletedSignatures)
                ) && 
                (
                    PendingPayPeriods == other.PendingPayPeriods ||
                    
                    PendingPayPeriods.Equals(other.PendingPayPeriods)
                ) && 
                (
                    StudentGrade == other.StudentGrade ||
                    
                    StudentGrade.Equals(other.StudentGrade)
                ) && 
                (
                    SchoolName == other.SchoolName ||
                    SchoolName != null &&
                    SchoolName.Equals(other.SchoolName)
                ) && 
                (
                    StudentEmail == other.StudentEmail ||
                    StudentEmail != null &&
                    StudentEmail.Equals(other.StudentEmail)
                ) && 
                (
                    TimeLogsToBePartnerApproved == other.TimeLogsToBePartnerApproved ||
                    
                    TimeLogsToBePartnerApproved.Equals(other.TimeLogsToBePartnerApproved)
                ) && 
                (
                    StudentFirstName == other.StudentFirstName ||
                    StudentFirstName != null &&
                    StudentFirstName.Equals(other.StudentFirstName)
                ) && 
                (
                    StudentGender == other.StudentGender ||
                    StudentGender != null &&
                    StudentGender.Equals(other.StudentGender)
                ) && 
                (
                    EvaluationEventsTotal == other.EvaluationEventsTotal ||
                    
                    EvaluationEventsTotal.Equals(other.EvaluationEventsTotal)
                ) && 
                (
                    EvaluationEventsCompleted == other.EvaluationEventsCompleted ||
                    
                    EvaluationEventsCompleted.Equals(other.EvaluationEventsCompleted)
                ) && 
                (
                    StudentUserId == other.StudentUserId ||
                    
                    StudentUserId.Equals(other.StudentUserId)
                ) && 
                (
                    TimeLogsToBeAdminApproved == other.TimeLogsToBeAdminApproved ||
                    
                    TimeLogsToBeAdminApproved.Equals(other.TimeLogsToBeAdminApproved)
                ) && 
                (
                    UserExperienceId == other.UserExperienceId ||
                    
                    UserExperienceId.Equals(other.UserExperienceId)
                ) && 
                (
                    ExperienceId == other.ExperienceId ||
                    
                    ExperienceId.Equals(other.ExperienceId)
                ) && 
                (
                    SchoolId == other.SchoolId ||
                    
                    SchoolId.Equals(other.SchoolId)
                ) && 
                (
                    TotalApprovedHours == other.TotalApprovedHours ||
                    
                    TotalApprovedHours.Equals(other.TotalApprovedHours)
                ) && 
                (
                    ExperienceOrganizationId == other.ExperienceOrganizationId ||
                    
                    ExperienceOrganizationId.Equals(other.ExperienceOrganizationId)
                ) && 
                (
                    OverduePayPeriods == other.OverduePayPeriods ||
                    
                    OverduePayPeriods.Equals(other.OverduePayPeriods)
                ) && 
                (
                    ExperienceClusters == other.ExperienceClusters ||
                    ExperienceClusters != null &&
                    other.ExperienceClusters != null &&
                    ExperienceClusters.SequenceEqual(other.ExperienceClusters)
                ) && 
                (
                    EvaluationEventsOverdueByPartner == other.EvaluationEventsOverdueByPartner ||
                    
                    EvaluationEventsOverdueByPartner.Equals(other.EvaluationEventsOverdueByPartner)
                ) && 
                (
                    StudentRace == other.StudentRace ||
                    StudentRace != null &&
                    StudentRace.Equals(other.StudentRace)
                ) && 
                (
                    ExperienceOrganizationName == other.ExperienceOrganizationName ||
                    ExperienceOrganizationName != null &&
                    ExperienceOrganizationName.Equals(other.ExperienceOrganizationName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + FailedToClockOut.GetHashCode();
                    if (StudentSpecialPopulation != null)
                    hashCode = hashCode * 59 + StudentSpecialPopulation.GetHashCode();
                    
                    hashCode = hashCode * 59 + WorkflowFormTotalSignatures.GetHashCode();
                    if (StudentId != null)
                    hashCode = hashCode * 59 + StudentId.GetHashCode();
                    if (ExperienceEndDate != null)
                    hashCode = hashCode * 59 + ExperienceEndDate.GetHashCode();
                    if (ExperienceName != null)
                    hashCode = hashCode * 59 + ExperienceName.GetHashCode();
                    if (ExperienceStartDate != null)
                    hashCode = hashCode * 59 + ExperienceStartDate.GetHashCode();
                    if (StudentClusters != null)
                    hashCode = hashCode * 59 + StudentClusters.GetHashCode();
                    if (StudentLastName != null)
                    hashCode = hashCode * 59 + StudentLastName.GetHashCode();
                    
                    hashCode = hashCode * 59 + EvaluationEventsToBeStudentSigned.GetHashCode();
                    
                    hashCode = hashCode * 59 + WorkflowFormCompletedSignatures.GetHashCode();
                    
                    hashCode = hashCode * 59 + PendingPayPeriods.GetHashCode();
                    
                    hashCode = hashCode * 59 + StudentGrade.GetHashCode();
                    if (SchoolName != null)
                    hashCode = hashCode * 59 + SchoolName.GetHashCode();
                    if (StudentEmail != null)
                    hashCode = hashCode * 59 + StudentEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + TimeLogsToBePartnerApproved.GetHashCode();
                    if (StudentFirstName != null)
                    hashCode = hashCode * 59 + StudentFirstName.GetHashCode();
                    if (StudentGender != null)
                    hashCode = hashCode * 59 + StudentGender.GetHashCode();
                    
                    hashCode = hashCode * 59 + EvaluationEventsTotal.GetHashCode();
                    
                    hashCode = hashCode * 59 + EvaluationEventsCompleted.GetHashCode();
                    
                    hashCode = hashCode * 59 + StudentUserId.GetHashCode();
                    
                    hashCode = hashCode * 59 + TimeLogsToBeAdminApproved.GetHashCode();
                    
                    hashCode = hashCode * 59 + UserExperienceId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExperienceId.GetHashCode();
                    
                    hashCode = hashCode * 59 + SchoolId.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalApprovedHours.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExperienceOrganizationId.GetHashCode();
                    
                    hashCode = hashCode * 59 + OverduePayPeriods.GetHashCode();
                    if (ExperienceClusters != null)
                    hashCode = hashCode * 59 + ExperienceClusters.GetHashCode();
                    
                    hashCode = hashCode * 59 + EvaluationEventsOverdueByPartner.GetHashCode();
                    if (StudentRace != null)
                    hashCode = hashCode * 59 + StudentRace.GetHashCode();
                    if (ExperienceOrganizationName != null)
                    hashCode = hashCode * 59 + ExperienceOrganizationName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StudentUserExperienceDashboardResponse left, StudentUserExperienceDashboardResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StudentUserExperienceDashboardResponse left, StudentUserExperienceDashboardResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
