/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ServeCounselorReportResponse : IEquatable<ServeCounselorReportResponse>
    {
        /// <summary>
        /// Gets or Sets NumberOfLogs
        /// </summary>
        [Required]
        [DataMember(Name="numberOfLogs", EmitDefaultValue=true)]
        public long NumberOfLogs { get; set; }

        /// <summary>
        /// Gets or Sets PercentContributed
        /// </summary>
        [Required]
        [DataMember(Name="percentContributed", EmitDefaultValue=true)]
        public double PercentContributed { get; set; }

        /// <summary>
        /// Gets or Sets TotalHours
        /// </summary>
        [Required]
        [DataMember(Name="totalHours", EmitDefaultValue=true)]
        public double TotalHours { get; set; }

        /// <summary>
        /// Gets or Sets TotalNumberOfStudents
        /// </summary>
        [Required]
        [DataMember(Name="totalNumberOfStudents", EmitDefaultValue=true)]
        public long TotalNumberOfStudents { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [Required]
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<TotalHoursUser> Users { get; set; }

        /// <summary>
        /// Gets or Sets Counselor
        /// </summary>
        [Required]
        [DataMember(Name="counselor", EmitDefaultValue=false)]
        public BasicUser Counselor { get; set; }

        /// <summary>
        /// Gets or Sets AveragePerDay
        /// </summary>
        [Required]
        [DataMember(Name="averagePerDay", EmitDefaultValue=true)]
        public double AveragePerDay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServeCounselorReportResponse {\n");
            sb.Append("  NumberOfLogs: ").Append(NumberOfLogs).Append("\n");
            sb.Append("  PercentContributed: ").Append(PercentContributed).Append("\n");
            sb.Append("  TotalHours: ").Append(TotalHours).Append("\n");
            sb.Append("  TotalNumberOfStudents: ").Append(TotalNumberOfStudents).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Counselor: ").Append(Counselor).Append("\n");
            sb.Append("  AveragePerDay: ").Append(AveragePerDay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServeCounselorReportResponse)obj);
        }

        /// <summary>
        /// Returns true if ServeCounselorReportResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ServeCounselorReportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServeCounselorReportResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NumberOfLogs == other.NumberOfLogs ||
                    
                    NumberOfLogs.Equals(other.NumberOfLogs)
                ) && 
                (
                    PercentContributed == other.PercentContributed ||
                    
                    PercentContributed.Equals(other.PercentContributed)
                ) && 
                (
                    TotalHours == other.TotalHours ||
                    
                    TotalHours.Equals(other.TotalHours)
                ) && 
                (
                    TotalNumberOfStudents == other.TotalNumberOfStudents ||
                    
                    TotalNumberOfStudents.Equals(other.TotalNumberOfStudents)
                ) && 
                (
                    Users == other.Users ||
                    Users != null &&
                    other.Users != null &&
                    Users.SequenceEqual(other.Users)
                ) && 
                (
                    Counselor == other.Counselor ||
                    Counselor != null &&
                    Counselor.Equals(other.Counselor)
                ) && 
                (
                    AveragePerDay == other.AveragePerDay ||
                    
                    AveragePerDay.Equals(other.AveragePerDay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + NumberOfLogs.GetHashCode();
                    
                    hashCode = hashCode * 59 + PercentContributed.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalHours.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalNumberOfStudents.GetHashCode();
                    if (Users != null)
                    hashCode = hashCode * 59 + Users.GetHashCode();
                    if (Counselor != null)
                    hashCode = hashCode * 59 + Counselor.GetHashCode();
                    
                    hashCode = hashCode * 59 + AveragePerDay.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ServeCounselorReportResponse left, ServeCounselorReportResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServeCounselorReportResponse left, ServeCounselorReportResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
