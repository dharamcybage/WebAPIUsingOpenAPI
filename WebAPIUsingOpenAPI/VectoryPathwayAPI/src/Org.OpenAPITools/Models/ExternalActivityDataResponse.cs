/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ExternalActivityDataResponse : IEquatable<ExternalActivityDataResponse>
    {
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SponsorRejected
        /// </summary>
        [Required]
        [DataMember(Name="sponsorRejected", EmitDefaultValue=true)]
        public bool SponsorRejected { get; set; }

        /// <summary>
        /// Gets or Sets Form
        /// </summary>
        [DataMember(Name="form", EmitDefaultValue=false)]
        public FormResponse Form { get; set; }

        /// <summary>
        /// Gets or Sets ActivityId
        /// </summary>
        [DataMember(Name="activity_id", EmitDefaultValue=true)]
        public long? ActivityId { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [Required]
        [DataMember(Name="user", EmitDefaultValue=false)]
        public BasicUser User { get; set; }

        /// <summary>
        /// Gets or Sets Locked
        /// </summary>
        [Required]
        [DataMember(Name="locked", EmitDefaultValue=true)]
        public bool Locked { get; set; }

        /// <summary>
        /// Gets or Sets UserActivityId
        /// </summary>
        [DataMember(Name="user_activity_id", EmitDefaultValue=true)]
        public long? UserActivityId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalApprovalData
        /// </summary>
        [Required]
        [DataMember(Name="externalApprovalData", EmitDefaultValue=false)]
        public ExternalApprovalData ExternalApprovalData { get; set; }

        /// <summary>
        /// Gets or Sets SponsorNotes
        /// </summary>
        [DataMember(Name="sponsorNotes", EmitDefaultValue=true)]
        public string SponsorNotes { get; set; }

        /// <summary>
        /// Gets or Sets SponsorApproved
        /// </summary>
        [Required]
        [DataMember(Name="sponsorApproved", EmitDefaultValue=true)]
        public bool SponsorApproved { get; set; }

        /// <summary>
        /// Gets or Sets ParentSignatures
        /// </summary>
        [Required]
        [DataMember(Name="parentSignatures", EmitDefaultValue=false)]
        public List<string> ParentSignatures { get; set; }

        /// <summary>
        /// Gets or Sets FormSubmission
        /// </summary>
        [DataMember(Name="formSubmission", EmitDefaultValue=false)]
        public FormSubmissionResponse FormSubmission { get; set; }

        /// <summary>
        /// Gets or Sets SponsorSignatureUrl
        /// </summary>
        [DataMember(Name="sponsorSignatureUrl", EmitDefaultValue=true)]
        public string SponsorSignatureUrl { get; set; }

        /// <summary>
        /// Gets or Sets ExternalForm
        /// </summary>
        [DataMember(Name="externalForm", EmitDefaultValue=false)]
        public FormResponse ExternalForm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalActivityDataResponse {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SponsorRejected: ").Append(SponsorRejected).Append("\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  UserActivityId: ").Append(UserActivityId).Append("\n");
            sb.Append("  ExternalApprovalData: ").Append(ExternalApprovalData).Append("\n");
            sb.Append("  SponsorNotes: ").Append(SponsorNotes).Append("\n");
            sb.Append("  SponsorApproved: ").Append(SponsorApproved).Append("\n");
            sb.Append("  ParentSignatures: ").Append(ParentSignatures).Append("\n");
            sb.Append("  FormSubmission: ").Append(FormSubmission).Append("\n");
            sb.Append("  SponsorSignatureUrl: ").Append(SponsorSignatureUrl).Append("\n");
            sb.Append("  ExternalForm: ").Append(ExternalForm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExternalActivityDataResponse)obj);
        }

        /// <summary>
        /// Returns true if ExternalActivityDataResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ExternalActivityDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalActivityDataResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    SponsorRejected == other.SponsorRejected ||
                    
                    SponsorRejected.Equals(other.SponsorRejected)
                ) && 
                (
                    Form == other.Form ||
                    Form != null &&
                    Form.Equals(other.Form)
                ) && 
                (
                    ActivityId == other.ActivityId ||
                    ActivityId != null &&
                    ActivityId.Equals(other.ActivityId)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    Locked == other.Locked ||
                    
                    Locked.Equals(other.Locked)
                ) && 
                (
                    UserActivityId == other.UserActivityId ||
                    UserActivityId != null &&
                    UserActivityId.Equals(other.UserActivityId)
                ) && 
                (
                    ExternalApprovalData == other.ExternalApprovalData ||
                    ExternalApprovalData != null &&
                    ExternalApprovalData.Equals(other.ExternalApprovalData)
                ) && 
                (
                    SponsorNotes == other.SponsorNotes ||
                    SponsorNotes != null &&
                    SponsorNotes.Equals(other.SponsorNotes)
                ) && 
                (
                    SponsorApproved == other.SponsorApproved ||
                    
                    SponsorApproved.Equals(other.SponsorApproved)
                ) && 
                (
                    ParentSignatures == other.ParentSignatures ||
                    ParentSignatures != null &&
                    other.ParentSignatures != null &&
                    ParentSignatures.SequenceEqual(other.ParentSignatures)
                ) && 
                (
                    FormSubmission == other.FormSubmission ||
                    FormSubmission != null &&
                    FormSubmission.Equals(other.FormSubmission)
                ) && 
                (
                    SponsorSignatureUrl == other.SponsorSignatureUrl ||
                    SponsorSignatureUrl != null &&
                    SponsorSignatureUrl.Equals(other.SponsorSignatureUrl)
                ) && 
                (
                    ExternalForm == other.ExternalForm ||
                    ExternalForm != null &&
                    ExternalForm.Equals(other.ExternalForm)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + SponsorRejected.GetHashCode();
                    if (Form != null)
                    hashCode = hashCode * 59 + Form.GetHashCode();
                    if (ActivityId != null)
                    hashCode = hashCode * 59 + ActivityId.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    
                    hashCode = hashCode * 59 + Locked.GetHashCode();
                    if (UserActivityId != null)
                    hashCode = hashCode * 59 + UserActivityId.GetHashCode();
                    if (ExternalApprovalData != null)
                    hashCode = hashCode * 59 + ExternalApprovalData.GetHashCode();
                    if (SponsorNotes != null)
                    hashCode = hashCode * 59 + SponsorNotes.GetHashCode();
                    
                    hashCode = hashCode * 59 + SponsorApproved.GetHashCode();
                    if (ParentSignatures != null)
                    hashCode = hashCode * 59 + ParentSignatures.GetHashCode();
                    if (FormSubmission != null)
                    hashCode = hashCode * 59 + FormSubmission.GetHashCode();
                    if (SponsorSignatureUrl != null)
                    hashCode = hashCode * 59 + SponsorSignatureUrl.GetHashCode();
                    if (ExternalForm != null)
                    hashCode = hashCode * 59 + ExternalForm.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExternalActivityDataResponse left, ExternalActivityDataResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExternalActivityDataResponse left, ExternalActivityDataResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
