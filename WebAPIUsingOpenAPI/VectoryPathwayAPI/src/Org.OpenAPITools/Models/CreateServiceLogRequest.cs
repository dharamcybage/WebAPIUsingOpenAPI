/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateServiceLogRequest : IEquatable<CreateServiceLogRequest>
    {
        /// <summary>
        /// Gets or Sets VarLong
        /// </summary>
        [DataMember(Name="long", EmitDefaultValue=true)]
        public string VarLong { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="group_id", EmitDefaultValue=true)]
        public long? GroupId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Sponsor
        /// </summary>
        [DataMember(Name="sponsor", EmitDefaultValue=false)]
        public CreateServiceLogRequestSponsor Sponsor { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [Required]
        [DataMember(Name="organization", EmitDefaultValue=true)]
        public long Organization { get; set; }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [Required]
        [DataMember(Name="days", EmitDefaultValue=false)]
        public List<CreateServiceLogRequestDay> Days { get; set; }

        /// <summary>
        /// Gets or Sets SignatureData
        /// </summary>
        [DataMember(Name="signatureData", EmitDefaultValue=true)]
        public string SignatureData { get; set; }

        /// <summary>
        /// Gets or Sets Lat
        /// </summary>
        [DataMember(Name="lat", EmitDefaultValue=true)]
        public string Lat { get; set; }

        /// <summary>
        /// Gets or Sets ProposalId
        /// </summary>
        [DataMember(Name="proposal_id", EmitDefaultValue=true)]
        public long? ProposalId { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [Required]
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets TagIds
        /// </summary>
        [DataMember(Name="tagIds", EmitDefaultValue=true)]
        public List<long> TagIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateServiceLogRequest {\n");
            sb.Append("  VarLong: ").Append(VarLong).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Sponsor: ").Append(Sponsor).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  SignatureData: ").Append(SignatureData).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  ProposalId: ").Append(ProposalId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateServiceLogRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateServiceLogRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateServiceLogRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateServiceLogRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VarLong == other.VarLong ||
                    VarLong != null &&
                    VarLong.Equals(other.VarLong)
                ) && 
                (
                    GroupId == other.GroupId ||
                    GroupId != null &&
                    GroupId.Equals(other.GroupId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Sponsor == other.Sponsor ||
                    Sponsor != null &&
                    Sponsor.Equals(other.Sponsor)
                ) && 
                (
                    Organization == other.Organization ||
                    
                    Organization.Equals(other.Organization)
                ) && 
                (
                    Days == other.Days ||
                    Days != null &&
                    other.Days != null &&
                    Days.SequenceEqual(other.Days)
                ) && 
                (
                    SignatureData == other.SignatureData ||
                    SignatureData != null &&
                    SignatureData.Equals(other.SignatureData)
                ) && 
                (
                    Lat == other.Lat ||
                    Lat != null &&
                    Lat.Equals(other.Lat)
                ) && 
                (
                    ProposalId == other.ProposalId ||
                    ProposalId != null &&
                    ProposalId.Equals(other.ProposalId)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    TagIds == other.TagIds ||
                    TagIds != null &&
                    other.TagIds != null &&
                    TagIds.SequenceEqual(other.TagIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VarLong != null)
                    hashCode = hashCode * 59 + VarLong.GetHashCode();
                    if (GroupId != null)
                    hashCode = hashCode * 59 + GroupId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Sponsor != null)
                    hashCode = hashCode * 59 + Sponsor.GetHashCode();
                    
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (Days != null)
                    hashCode = hashCode * 59 + Days.GetHashCode();
                    if (SignatureData != null)
                    hashCode = hashCode * 59 + SignatureData.GetHashCode();
                    if (Lat != null)
                    hashCode = hashCode * 59 + Lat.GetHashCode();
                    if (ProposalId != null)
                    hashCode = hashCode * 59 + ProposalId.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (TagIds != null)
                    hashCode = hashCode * 59 + TagIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateServiceLogRequest left, CreateServiceLogRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateServiceLogRequest left, CreateServiceLogRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
