/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ManageCoCurricularEventsControllerStudentViewCoCurricularEventResponse : IEquatable<ManageCoCurricularEventsControllerStudentViewCoCurricularEventResponse>
    {
        /// <summary>
        /// Gets or Sets Form
        /// </summary>
        [DataMember(Name="form", EmitDefaultValue=false)]
        public FormResponse Form { get; set; }

        /// <summary>
        /// Gets or Sets EventDateId
        /// </summary>
        [Required]
        [DataMember(Name="eventDateId", EmitDefaultValue=true)]
        public long EventDateId { get; set; }

        /// <summary>
        /// Gets or Sets FileUrl
        /// </summary>
        [DataMember(Name="fileUrl", EmitDefaultValue=true)]
        public string FileUrl { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [Required]
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets AttendeeId
        /// </summary>
        [DataMember(Name="attendeeId", EmitDefaultValue=true)]
        public long? AttendeeId { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationType
        /// </summary>
        [Required]
        [DataMember(Name="registrationType", EmitDefaultValue=true)]
        public long RegistrationType { get; set; }

        /// <summary>
        /// Gets or Sets Shifts
        /// </summary>
        [Required]
        [DataMember(Name="shifts", EmitDefaultValue=false)]
        public List<ManageCoCurricularEventsControllerCoCurricularEventShiftDTO> Shifts { get; set; }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [Required]
        [DataMember(Name="eventId", EmitDefaultValue=true)]
        public long EventId { get; set; }

        /// <summary>
        /// Gets or Sets HasSignedUp
        /// </summary>
        [Required]
        [DataMember(Name="hasSignedUp", EmitDefaultValue=true)]
        public bool HasSignedUp { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [Required]
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [Required]
        [DataMember(Name="contactName", EmitDefaultValue=false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="group_id", EmitDefaultValue=true)]
        public long? GroupId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfSpotsTaken
        /// </summary>
        [Required]
        [DataMember(Name="numberOfSpotsTaken", EmitDefaultValue=true)]
        public long NumberOfSpotsTaken { get; set; }

        /// <summary>
        /// Gets or Sets MaxNumberOfStudents
        /// </summary>
        [DataMember(Name="maxNumberOfStudents", EmitDefaultValue=true)]
        public long? MaxNumberOfStudents { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationCodeRequired
        /// </summary>
        [Required]
        [DataMember(Name="registrationCodeRequired", EmitDefaultValue=true)]
        public bool RegistrationCodeRequired { get; set; }

        /// <summary>
        /// Gets or Sets Shift
        /// </summary>
        [DataMember(Name="shift", EmitDefaultValue=false)]
        public Object Shift { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [Required]
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Announcements
        /// </summary>
        [Required]
        [DataMember(Name="announcements", EmitDefaultValue=false)]
        public List<Object> Announcements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManageCoCurricularEventsControllerStudentViewCoCurricularEventResponse {\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("  EventDateId: ").Append(EventDateId).Append("\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  AttendeeId: ").Append(AttendeeId).Append("\n");
            sb.Append("  RegistrationType: ").Append(RegistrationType).Append("\n");
            sb.Append("  Shifts: ").Append(Shifts).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  HasSignedUp: ").Append(HasSignedUp).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  NumberOfSpotsTaken: ").Append(NumberOfSpotsTaken).Append("\n");
            sb.Append("  MaxNumberOfStudents: ").Append(MaxNumberOfStudents).Append("\n");
            sb.Append("  RegistrationCodeRequired: ").Append(RegistrationCodeRequired).Append("\n");
            sb.Append("  Shift: ").Append(Shift).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Announcements: ").Append(Announcements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ManageCoCurricularEventsControllerStudentViewCoCurricularEventResponse)obj);
        }

        /// <summary>
        /// Returns true if ManageCoCurricularEventsControllerStudentViewCoCurricularEventResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ManageCoCurricularEventsControllerStudentViewCoCurricularEventResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManageCoCurricularEventsControllerStudentViewCoCurricularEventResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Form == other.Form ||
                    Form != null &&
                    Form.Equals(other.Form)
                ) && 
                (
                    EventDateId == other.EventDateId ||
                    
                    EventDateId.Equals(other.EventDateId)
                ) && 
                (
                    FileUrl == other.FileUrl ||
                    FileUrl != null &&
                    FileUrl.Equals(other.FileUrl)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    AttendeeId == other.AttendeeId ||
                    AttendeeId != null &&
                    AttendeeId.Equals(other.AttendeeId)
                ) && 
                (
                    RegistrationType == other.RegistrationType ||
                    
                    RegistrationType.Equals(other.RegistrationType)
                ) && 
                (
                    Shifts == other.Shifts ||
                    Shifts != null &&
                    other.Shifts != null &&
                    Shifts.SequenceEqual(other.Shifts)
                ) && 
                (
                    EventId == other.EventId ||
                    
                    EventId.Equals(other.EventId)
                ) && 
                (
                    HasSignedUp == other.HasSignedUp ||
                    
                    HasSignedUp.Equals(other.HasSignedUp)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ContactName == other.ContactName ||
                    ContactName != null &&
                    ContactName.Equals(other.ContactName)
                ) && 
                (
                    GroupId == other.GroupId ||
                    GroupId != null &&
                    GroupId.Equals(other.GroupId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    NumberOfSpotsTaken == other.NumberOfSpotsTaken ||
                    
                    NumberOfSpotsTaken.Equals(other.NumberOfSpotsTaken)
                ) && 
                (
                    MaxNumberOfStudents == other.MaxNumberOfStudents ||
                    MaxNumberOfStudents != null &&
                    MaxNumberOfStudents.Equals(other.MaxNumberOfStudents)
                ) && 
                (
                    RegistrationCodeRequired == other.RegistrationCodeRequired ||
                    
                    RegistrationCodeRequired.Equals(other.RegistrationCodeRequired)
                ) && 
                (
                    Shift == other.Shift ||
                    Shift != null &&
                    Shift.Equals(other.Shift)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    Announcements == other.Announcements ||
                    Announcements != null &&
                    other.Announcements != null &&
                    Announcements.SequenceEqual(other.Announcements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Form != null)
                    hashCode = hashCode * 59 + Form.GetHashCode();
                    
                    hashCode = hashCode * 59 + EventDateId.GetHashCode();
                    if (FileUrl != null)
                    hashCode = hashCode * 59 + FileUrl.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (AttendeeId != null)
                    hashCode = hashCode * 59 + AttendeeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + RegistrationType.GetHashCode();
                    if (Shifts != null)
                    hashCode = hashCode * 59 + Shifts.GetHashCode();
                    
                    hashCode = hashCode * 59 + EventId.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasSignedUp.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ContactName != null)
                    hashCode = hashCode * 59 + ContactName.GetHashCode();
                    if (GroupId != null)
                    hashCode = hashCode * 59 + GroupId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumberOfSpotsTaken.GetHashCode();
                    if (MaxNumberOfStudents != null)
                    hashCode = hashCode * 59 + MaxNumberOfStudents.GetHashCode();
                    
                    hashCode = hashCode * 59 + RegistrationCodeRequired.GetHashCode();
                    if (Shift != null)
                    hashCode = hashCode * 59 + Shift.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (Announcements != null)
                    hashCode = hashCode * 59 + Announcements.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ManageCoCurricularEventsControllerStudentViewCoCurricularEventResponse left, ManageCoCurricularEventsControllerStudentViewCoCurricularEventResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ManageCoCurricularEventsControllerStudentViewCoCurricularEventResponse left, ManageCoCurricularEventsControllerStudentViewCoCurricularEventResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
