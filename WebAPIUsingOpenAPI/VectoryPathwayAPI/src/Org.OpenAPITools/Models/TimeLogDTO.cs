/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TimeLogDTO : IEquatable<TimeLogDTO>
    {
        /// <summary>
        /// Gets or Sets IsEnded
        /// </summary>
        [Required]
        [DataMember(Name="isEnded", EmitDefaultValue=true)]
        public bool IsEnded { get; set; }

        /// <summary>
        /// Gets or Sets TimeIn
        /// </summary>
        [Required]
        [DataMember(Name="timeIn", EmitDefaultValue=false)]
        public string TimeIn { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets TimeOut
        /// </summary>
        [Required]
        [DataMember(Name="timeOut", EmitDefaultValue=false)]
        public string TimeOut { get; set; }

        /// <summary>
        /// Gets or Sets CheckOutLong
        /// </summary>
        [DataMember(Name="checkOutLong", EmitDefaultValue=true)]
        public string CheckOutLong { get; set; }

        /// <summary>
        /// Gets or Sets UserExperienceId
        /// </summary>
        [Required]
        [DataMember(Name="user_experience_id", EmitDefaultValue=true)]
        public long UserExperienceId { get; set; }

        /// <summary>
        /// Gets or Sets SponsorApproved
        /// </summary>
        [Required]
        [DataMember(Name="sponsorApproved", EmitDefaultValue=true)]
        public bool SponsorApproved { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deletedAt", EmitDefaultValue=true)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [Required]
        [DataMember(Name="approved", EmitDefaultValue=true)]
        public bool Approved { get; set; }

        /// <summary>
        /// Gets or Sets GeoCheckinStart
        /// </summary>
        [DataMember(Name="geoCheckinStart", EmitDefaultValue=true)]
        public DateTime? GeoCheckinStart { get; set; }

        /// <summary>
        /// Gets or Sets SponsorToken
        /// </summary>
        [DataMember(Name="sponsorToken", EmitDefaultValue=true)]
        public string SponsorToken { get; set; }

        /// <summary>
        /// Gets or Sets CheckOutLat
        /// </summary>
        [DataMember(Name="checkOutLat", EmitDefaultValue=true)]
        public string CheckOutLat { get; set; }

        /// <summary>
        /// Gets or Sets GeoCheckInEnd
        /// </summary>
        [DataMember(Name="geoCheckInEnd", EmitDefaultValue=true)]
        public DateTime? GeoCheckInEnd { get; set; }

        /// <summary>
        /// Gets or Sets Hours
        /// </summary>
        [Required]
        [DataMember(Name="hours", EmitDefaultValue=true)]
        public double Hours { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CheckInLong
        /// </summary>
        [DataMember(Name="checkInLong", EmitDefaultValue=true)]
        public string CheckInLong { get; set; }

        /// <summary>
        /// Gets or Sets PayPeriodId
        /// </summary>
        [DataMember(Name="pay_period_id", EmitDefaultValue=true)]
        public long? PayPeriodId { get; set; }

        /// <summary>
        /// Gets or Sets SponsorSignatureUrl
        /// </summary>
        [DataMember(Name="sponsorSignatureUrl", EmitDefaultValue=true)]
        public string SponsorSignatureUrl { get; set; }

        /// <summary>
        /// Gets or Sets SponsorRejected
        /// </summary>
        [Required]
        [DataMember(Name="sponsorRejected", EmitDefaultValue=true)]
        public bool SponsorRejected { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [Required]
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets SponsorComment
        /// </summary>
        [DataMember(Name="sponsorComment", EmitDefaultValue=true)]
        public string SponsorComment { get; set; }

        /// <summary>
        /// Gets or Sets CheckInLat
        /// </summary>
        [DataMember(Name="checkInLat", EmitDefaultValue=true)]
        public string CheckInLat { get; set; }

        /// <summary>
        /// Gets or Sets StudentReflectionText
        /// </summary>
        [DataMember(Name="studentReflectionText", EmitDefaultValue=true)]
        public string StudentReflectionText { get; set; }

        /// <summary>
        /// Gets or Sets ReflectionFormSubmissionId
        /// </summary>
        [DataMember(Name="reflection_form_submission_id", EmitDefaultValue=true)]
        public long? ReflectionFormSubmissionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeLogDTO {\n");
            sb.Append("  IsEnded: ").Append(IsEnded).Append("\n");
            sb.Append("  TimeIn: ").Append(TimeIn).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  TimeOut: ").Append(TimeOut).Append("\n");
            sb.Append("  CheckOutLong: ").Append(CheckOutLong).Append("\n");
            sb.Append("  UserExperienceId: ").Append(UserExperienceId).Append("\n");
            sb.Append("  SponsorApproved: ").Append(SponsorApproved).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  GeoCheckinStart: ").Append(GeoCheckinStart).Append("\n");
            sb.Append("  SponsorToken: ").Append(SponsorToken).Append("\n");
            sb.Append("  CheckOutLat: ").Append(CheckOutLat).Append("\n");
            sb.Append("  GeoCheckInEnd: ").Append(GeoCheckInEnd).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CheckInLong: ").Append(CheckInLong).Append("\n");
            sb.Append("  PayPeriodId: ").Append(PayPeriodId).Append("\n");
            sb.Append("  SponsorSignatureUrl: ").Append(SponsorSignatureUrl).Append("\n");
            sb.Append("  SponsorRejected: ").Append(SponsorRejected).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  SponsorComment: ").Append(SponsorComment).Append("\n");
            sb.Append("  CheckInLat: ").Append(CheckInLat).Append("\n");
            sb.Append("  StudentReflectionText: ").Append(StudentReflectionText).Append("\n");
            sb.Append("  ReflectionFormSubmissionId: ").Append(ReflectionFormSubmissionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TimeLogDTO)obj);
        }

        /// <summary>
        /// Returns true if TimeLogDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of TimeLogDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeLogDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsEnded == other.IsEnded ||
                    
                    IsEnded.Equals(other.IsEnded)
                ) && 
                (
                    TimeIn == other.TimeIn ||
                    TimeIn != null &&
                    TimeIn.Equals(other.TimeIn)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    TimeOut == other.TimeOut ||
                    TimeOut != null &&
                    TimeOut.Equals(other.TimeOut)
                ) && 
                (
                    CheckOutLong == other.CheckOutLong ||
                    CheckOutLong != null &&
                    CheckOutLong.Equals(other.CheckOutLong)
                ) && 
                (
                    UserExperienceId == other.UserExperienceId ||
                    
                    UserExperienceId.Equals(other.UserExperienceId)
                ) && 
                (
                    SponsorApproved == other.SponsorApproved ||
                    
                    SponsorApproved.Equals(other.SponsorApproved)
                ) && 
                (
                    DeletedAt == other.DeletedAt ||
                    DeletedAt != null &&
                    DeletedAt.Equals(other.DeletedAt)
                ) && 
                (
                    Approved == other.Approved ||
                    
                    Approved.Equals(other.Approved)
                ) && 
                (
                    GeoCheckinStart == other.GeoCheckinStart ||
                    GeoCheckinStart != null &&
                    GeoCheckinStart.Equals(other.GeoCheckinStart)
                ) && 
                (
                    SponsorToken == other.SponsorToken ||
                    SponsorToken != null &&
                    SponsorToken.Equals(other.SponsorToken)
                ) && 
                (
                    CheckOutLat == other.CheckOutLat ||
                    CheckOutLat != null &&
                    CheckOutLat.Equals(other.CheckOutLat)
                ) && 
                (
                    GeoCheckInEnd == other.GeoCheckInEnd ||
                    GeoCheckInEnd != null &&
                    GeoCheckInEnd.Equals(other.GeoCheckInEnd)
                ) && 
                (
                    Hours == other.Hours ||
                    
                    Hours.Equals(other.Hours)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    CheckInLong == other.CheckInLong ||
                    CheckInLong != null &&
                    CheckInLong.Equals(other.CheckInLong)
                ) && 
                (
                    PayPeriodId == other.PayPeriodId ||
                    PayPeriodId != null &&
                    PayPeriodId.Equals(other.PayPeriodId)
                ) && 
                (
                    SponsorSignatureUrl == other.SponsorSignatureUrl ||
                    SponsorSignatureUrl != null &&
                    SponsorSignatureUrl.Equals(other.SponsorSignatureUrl)
                ) && 
                (
                    SponsorRejected == other.SponsorRejected ||
                    
                    SponsorRejected.Equals(other.SponsorRejected)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    SponsorComment == other.SponsorComment ||
                    SponsorComment != null &&
                    SponsorComment.Equals(other.SponsorComment)
                ) && 
                (
                    CheckInLat == other.CheckInLat ||
                    CheckInLat != null &&
                    CheckInLat.Equals(other.CheckInLat)
                ) && 
                (
                    StudentReflectionText == other.StudentReflectionText ||
                    StudentReflectionText != null &&
                    StudentReflectionText.Equals(other.StudentReflectionText)
                ) && 
                (
                    ReflectionFormSubmissionId == other.ReflectionFormSubmissionId ||
                    ReflectionFormSubmissionId != null &&
                    ReflectionFormSubmissionId.Equals(other.ReflectionFormSubmissionId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + IsEnded.GetHashCode();
                    if (TimeIn != null)
                    hashCode = hashCode * 59 + TimeIn.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (TimeOut != null)
                    hashCode = hashCode * 59 + TimeOut.GetHashCode();
                    if (CheckOutLong != null)
                    hashCode = hashCode * 59 + CheckOutLong.GetHashCode();
                    
                    hashCode = hashCode * 59 + UserExperienceId.GetHashCode();
                    
                    hashCode = hashCode * 59 + SponsorApproved.GetHashCode();
                    if (DeletedAt != null)
                    hashCode = hashCode * 59 + DeletedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Approved.GetHashCode();
                    if (GeoCheckinStart != null)
                    hashCode = hashCode * 59 + GeoCheckinStart.GetHashCode();
                    if (SponsorToken != null)
                    hashCode = hashCode * 59 + SponsorToken.GetHashCode();
                    if (CheckOutLat != null)
                    hashCode = hashCode * 59 + CheckOutLat.GetHashCode();
                    if (GeoCheckInEnd != null)
                    hashCode = hashCode * 59 + GeoCheckInEnd.GetHashCode();
                    
                    hashCode = hashCode * 59 + Hours.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CheckInLong != null)
                    hashCode = hashCode * 59 + CheckInLong.GetHashCode();
                    if (PayPeriodId != null)
                    hashCode = hashCode * 59 + PayPeriodId.GetHashCode();
                    if (SponsorSignatureUrl != null)
                    hashCode = hashCode * 59 + SponsorSignatureUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + SponsorRejected.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (SponsorComment != null)
                    hashCode = hashCode * 59 + SponsorComment.GetHashCode();
                    if (CheckInLat != null)
                    hashCode = hashCode * 59 + CheckInLat.GetHashCode();
                    if (StudentReflectionText != null)
                    hashCode = hashCode * 59 + StudentReflectionText.GetHashCode();
                    if (ReflectionFormSubmissionId != null)
                    hashCode = hashCode * 59 + ReflectionFormSubmissionId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TimeLogDTO left, TimeLogDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TimeLogDTO left, TimeLogDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
