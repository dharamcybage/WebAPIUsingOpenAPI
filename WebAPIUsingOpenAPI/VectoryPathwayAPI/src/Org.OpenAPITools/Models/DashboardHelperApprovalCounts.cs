/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DashboardHelperApprovalCounts : IEquatable<DashboardHelperApprovalCounts>
    {
        /// <summary>
        /// Gets or Sets ServiceLogs
        /// </summary>
        [Required]
        [DataMember(Name="serviceLogs", EmitDefaultValue=true)]
        public long ServiceLogs { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [Required]
        [DataMember(Name="total", EmitDefaultValue=true)]
        public long Total { get; set; }

        /// <summary>
        /// Gets or Sets Activities
        /// </summary>
        [Required]
        [DataMember(Name="activities", EmitDefaultValue=true)]
        public long Activities { get; set; }

        /// <summary>
        /// Gets or Sets Orgs
        /// </summary>
        [Required]
        [DataMember(Name="orgs", EmitDefaultValue=true)]
        public long Orgs { get; set; }

        /// <summary>
        /// Gets or Sets ServiceProposals
        /// </summary>
        [Required]
        [DataMember(Name="serviceProposals", EmitDefaultValue=true)]
        public long ServiceProposals { get; set; }

        /// <summary>
        /// Gets or Sets CareerPlans
        /// </summary>
        [Required]
        [DataMember(Name="careerPlans", EmitDefaultValue=true)]
        public long CareerPlans { get; set; }

        /// <summary>
        /// Gets or Sets EventProposals
        /// </summary>
        [Required]
        [DataMember(Name="eventProposals", EmitDefaultValue=true)]
        public long EventProposals { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [Required]
        [DataMember(Name="contacts", EmitDefaultValue=true)]
        public long Contacts { get; set; }

        /// <summary>
        /// Gets or Sets Applications
        /// </summary>
        [Required]
        [DataMember(Name="applications", EmitDefaultValue=true)]
        public long Applications { get; set; }

        /// <summary>
        /// Gets or Sets TimeLogs
        /// </summary>
        [Required]
        [DataMember(Name="timeLogs", EmitDefaultValue=true)]
        public long TimeLogs { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceProposals
        /// </summary>
        [Required]
        [DataMember(Name="experienceProposals", EmitDefaultValue=true)]
        public long ExperienceProposals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DashboardHelperApprovalCounts {\n");
            sb.Append("  ServiceLogs: ").Append(ServiceLogs).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  Orgs: ").Append(Orgs).Append("\n");
            sb.Append("  ServiceProposals: ").Append(ServiceProposals).Append("\n");
            sb.Append("  CareerPlans: ").Append(CareerPlans).Append("\n");
            sb.Append("  EventProposals: ").Append(EventProposals).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Applications: ").Append(Applications).Append("\n");
            sb.Append("  TimeLogs: ").Append(TimeLogs).Append("\n");
            sb.Append("  ExperienceProposals: ").Append(ExperienceProposals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DashboardHelperApprovalCounts)obj);
        }

        /// <summary>
        /// Returns true if DashboardHelperApprovalCounts instances are equal
        /// </summary>
        /// <param name="other">Instance of DashboardHelperApprovalCounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DashboardHelperApprovalCounts other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ServiceLogs == other.ServiceLogs ||
                    
                    ServiceLogs.Equals(other.ServiceLogs)
                ) && 
                (
                    Total == other.Total ||
                    
                    Total.Equals(other.Total)
                ) && 
                (
                    Activities == other.Activities ||
                    
                    Activities.Equals(other.Activities)
                ) && 
                (
                    Orgs == other.Orgs ||
                    
                    Orgs.Equals(other.Orgs)
                ) && 
                (
                    ServiceProposals == other.ServiceProposals ||
                    
                    ServiceProposals.Equals(other.ServiceProposals)
                ) && 
                (
                    CareerPlans == other.CareerPlans ||
                    
                    CareerPlans.Equals(other.CareerPlans)
                ) && 
                (
                    EventProposals == other.EventProposals ||
                    
                    EventProposals.Equals(other.EventProposals)
                ) && 
                (
                    Contacts == other.Contacts ||
                    
                    Contacts.Equals(other.Contacts)
                ) && 
                (
                    Applications == other.Applications ||
                    
                    Applications.Equals(other.Applications)
                ) && 
                (
                    TimeLogs == other.TimeLogs ||
                    
                    TimeLogs.Equals(other.TimeLogs)
                ) && 
                (
                    ExperienceProposals == other.ExperienceProposals ||
                    
                    ExperienceProposals.Equals(other.ExperienceProposals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ServiceLogs.GetHashCode();
                    
                    hashCode = hashCode * 59 + Total.GetHashCode();
                    
                    hashCode = hashCode * 59 + Activities.GetHashCode();
                    
                    hashCode = hashCode * 59 + Orgs.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServiceProposals.GetHashCode();
                    
                    hashCode = hashCode * 59 + CareerPlans.GetHashCode();
                    
                    hashCode = hashCode * 59 + EventProposals.GetHashCode();
                    
                    hashCode = hashCode * 59 + Contacts.GetHashCode();
                    
                    hashCode = hashCode * 59 + Applications.GetHashCode();
                    
                    hashCode = hashCode * 59 + TimeLogs.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExperienceProposals.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DashboardHelperApprovalCounts left, DashboardHelperApprovalCounts right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DashboardHelperApprovalCounts left, DashboardHelperApprovalCounts right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
