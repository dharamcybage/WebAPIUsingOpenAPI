/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CoCurricularGroupDTO : IEquatable<CoCurricularGroupDTO>
    {
        /// <summary>
        /// Gets or Sets MaxStudentsAllowed
        /// </summary>
        [DataMember(Name="maxStudentsAllowed", EmitDefaultValue=true)]
        public long? MaxStudentsAllowed { get; set; }

        /// <summary>
        /// Gets or Sets ExternalEventToken
        /// </summary>
        [DataMember(Name="externalEventToken", EmitDefaultValue=true)]
        public string ExternalEventToken { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deletedAt", EmitDefaultValue=true)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSchoolId
        /// </summary>
        [DataMember(Name="default_school_id", EmitDefaultValue=true)]
        public long? DefaultSchoolId { get; set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name="admin", EmitDefaultValue=true)]
        public long? Admin { get; set; }

        /// <summary>
        /// Gets or Sets HasEngage
        /// </summary>
        [Required]
        [DataMember(Name="hasEngage", EmitDefaultValue=true)]
        public bool HasEngage { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets TwitterHandle
        /// </summary>
        [DataMember(Name="twitterHandle", EmitDefaultValue=true)]
        public string TwitterHandle { get; set; }

        /// <summary>
        /// Gets or Sets IndividualGoal
        /// </summary>
        [DataMember(Name="individualGoal", EmitDefaultValue=true)]
        public double? IndividualGoal { get; set; }

        /// <summary>
        /// Gets or Sets AcceptingStudents
        /// </summary>
        [Required]
        [DataMember(Name="acceptingStudents", EmitDefaultValue=true)]
        public bool AcceptingStudents { get; set; }

        /// <summary>
        /// Gets or Sets GroupGoal
        /// </summary>
        [DataMember(Name="groupGoal", EmitDefaultValue=true)]
        public double? GroupGoal { get; set; }

        /// <summary>
        /// Gets or Sets JoinCode
        /// </summary>
        [Required]
        [DataMember(Name="joinCode", EmitDefaultValue=false)]
        public string JoinCode { get; set; }

        /// <summary>
        /// Gets or Sets IsDefaultSchoolGroup
        /// </summary>
        [Required]
        [DataMember(Name="isDefaultSchoolGroup", EmitDefaultValue=true)]
        public bool IsDefaultSchoolGroup { get; set; }

        /// <summary>
        /// Gets or Sets YoutubeLink
        /// </summary>
        [DataMember(Name="youtubeLink", EmitDefaultValue=true)]
        public string YoutubeLink { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AllowsExternalSubmission
        /// </summary>
        [Required]
        [DataMember(Name="allowsExternalSubmission", EmitDefaultValue=true)]
        public bool AllowsExternalSubmission { get; set; }

        /// <summary>
        /// Gets or Sets RequiresVerification
        /// </summary>
        [Required]
        [DataMember(Name="requiresVerification", EmitDefaultValue=true)]
        public bool RequiresVerification { get; set; }

        /// <summary>
        /// Gets or Sets HasService
        /// </summary>
        [Required]
        [DataMember(Name="hasService", EmitDefaultValue=true)]
        public bool HasService { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoCurricularGroupDTO {\n");
            sb.Append("  MaxStudentsAllowed: ").Append(MaxStudentsAllowed).Append("\n");
            sb.Append("  ExternalEventToken: ").Append(ExternalEventToken).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  DefaultSchoolId: ").Append(DefaultSchoolId).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  HasEngage: ").Append(HasEngage).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TwitterHandle: ").Append(TwitterHandle).Append("\n");
            sb.Append("  IndividualGoal: ").Append(IndividualGoal).Append("\n");
            sb.Append("  AcceptingStudents: ").Append(AcceptingStudents).Append("\n");
            sb.Append("  GroupGoal: ").Append(GroupGoal).Append("\n");
            sb.Append("  JoinCode: ").Append(JoinCode).Append("\n");
            sb.Append("  IsDefaultSchoolGroup: ").Append(IsDefaultSchoolGroup).Append("\n");
            sb.Append("  YoutubeLink: ").Append(YoutubeLink).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AllowsExternalSubmission: ").Append(AllowsExternalSubmission).Append("\n");
            sb.Append("  RequiresVerification: ").Append(RequiresVerification).Append("\n");
            sb.Append("  HasService: ").Append(HasService).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CoCurricularGroupDTO)obj);
        }

        /// <summary>
        /// Returns true if CoCurricularGroupDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of CoCurricularGroupDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoCurricularGroupDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MaxStudentsAllowed == other.MaxStudentsAllowed ||
                    MaxStudentsAllowed != null &&
                    MaxStudentsAllowed.Equals(other.MaxStudentsAllowed)
                ) && 
                (
                    ExternalEventToken == other.ExternalEventToken ||
                    ExternalEventToken != null &&
                    ExternalEventToken.Equals(other.ExternalEventToken)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    DeletedAt == other.DeletedAt ||
                    DeletedAt != null &&
                    DeletedAt.Equals(other.DeletedAt)
                ) && 
                (
                    DefaultSchoolId == other.DefaultSchoolId ||
                    DefaultSchoolId != null &&
                    DefaultSchoolId.Equals(other.DefaultSchoolId)
                ) && 
                (
                    Admin == other.Admin ||
                    Admin != null &&
                    Admin.Equals(other.Admin)
                ) && 
                (
                    HasEngage == other.HasEngage ||
                    
                    HasEngage.Equals(other.HasEngage)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    TwitterHandle == other.TwitterHandle ||
                    TwitterHandle != null &&
                    TwitterHandle.Equals(other.TwitterHandle)
                ) && 
                (
                    IndividualGoal == other.IndividualGoal ||
                    IndividualGoal != null &&
                    IndividualGoal.Equals(other.IndividualGoal)
                ) && 
                (
                    AcceptingStudents == other.AcceptingStudents ||
                    
                    AcceptingStudents.Equals(other.AcceptingStudents)
                ) && 
                (
                    GroupGoal == other.GroupGoal ||
                    GroupGoal != null &&
                    GroupGoal.Equals(other.GroupGoal)
                ) && 
                (
                    JoinCode == other.JoinCode ||
                    JoinCode != null &&
                    JoinCode.Equals(other.JoinCode)
                ) && 
                (
                    IsDefaultSchoolGroup == other.IsDefaultSchoolGroup ||
                    
                    IsDefaultSchoolGroup.Equals(other.IsDefaultSchoolGroup)
                ) && 
                (
                    YoutubeLink == other.YoutubeLink ||
                    YoutubeLink != null &&
                    YoutubeLink.Equals(other.YoutubeLink)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    AllowsExternalSubmission == other.AllowsExternalSubmission ||
                    
                    AllowsExternalSubmission.Equals(other.AllowsExternalSubmission)
                ) && 
                (
                    RequiresVerification == other.RequiresVerification ||
                    
                    RequiresVerification.Equals(other.RequiresVerification)
                ) && 
                (
                    HasService == other.HasService ||
                    
                    HasService.Equals(other.HasService)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MaxStudentsAllowed != null)
                    hashCode = hashCode * 59 + MaxStudentsAllowed.GetHashCode();
                    if (ExternalEventToken != null)
                    hashCode = hashCode * 59 + ExternalEventToken.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (DeletedAt != null)
                    hashCode = hashCode * 59 + DeletedAt.GetHashCode();
                    if (DefaultSchoolId != null)
                    hashCode = hashCode * 59 + DefaultSchoolId.GetHashCode();
                    if (Admin != null)
                    hashCode = hashCode * 59 + Admin.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasEngage.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (TwitterHandle != null)
                    hashCode = hashCode * 59 + TwitterHandle.GetHashCode();
                    if (IndividualGoal != null)
                    hashCode = hashCode * 59 + IndividualGoal.GetHashCode();
                    
                    hashCode = hashCode * 59 + AcceptingStudents.GetHashCode();
                    if (GroupGoal != null)
                    hashCode = hashCode * 59 + GroupGoal.GetHashCode();
                    if (JoinCode != null)
                    hashCode = hashCode * 59 + JoinCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsDefaultSchoolGroup.GetHashCode();
                    if (YoutubeLink != null)
                    hashCode = hashCode * 59 + YoutubeLink.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowsExternalSubmission.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequiresVerification.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasService.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CoCurricularGroupDTO left, CoCurricularGroupDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CoCurricularGroupDTO left, CoCurricularGroupDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
