/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProgressTrackerData : IEquatable<ProgressTrackerData>
    {
        /// <summary>
        /// Gets or Sets AcademicTests
        /// </summary>
        [Required]
        [DataMember(Name="academicTests", EmitDefaultValue=false)]
        public Dictionary<string, Object> AcademicTests { get; set; }

        /// <summary>
        /// Gets or Sets Journey
        /// </summary>
        [DataMember(Name="journey", EmitDefaultValue=false)]
        public ProgressTrackerDataJourney Journey { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets College
        /// </summary>
        [DataMember(Name="college", EmitDefaultValue=false)]
        public ProgressTrackerDataCollege College { get; set; }

        /// <summary>
        /// Gets or Sets Jobs
        /// </summary>
        [DataMember(Name="jobs", EmitDefaultValue=false)]
        public ProgressTrackerDataJobs Jobs { get; set; }

        /// <summary>
        /// Gets or Sets Ecosystem
        /// </summary>
        [Required]
        [DataMember(Name="ecosystem", EmitDefaultValue=false)]
        public ProgressTrackerDataEcosystem Ecosystem { get; set; }

        /// <summary>
        /// Gets or Sets Serve
        /// </summary>
        [DataMember(Name="serve", EmitDefaultValue=false)]
        public ProgressTrackerDataServe Serve { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProgressTrackerData {\n");
            sb.Append("  AcademicTests: ").Append(AcademicTests).Append("\n");
            sb.Append("  Journey: ").Append(Journey).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  College: ").Append(College).Append("\n");
            sb.Append("  Jobs: ").Append(Jobs).Append("\n");
            sb.Append("  Ecosystem: ").Append(Ecosystem).Append("\n");
            sb.Append("  Serve: ").Append(Serve).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProgressTrackerData)obj);
        }

        /// <summary>
        /// Returns true if ProgressTrackerData instances are equal
        /// </summary>
        /// <param name="other">Instance of ProgressTrackerData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProgressTrackerData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AcademicTests == other.AcademicTests ||
                    AcademicTests != null &&
                    other.AcademicTests != null &&
                    AcademicTests.SequenceEqual(other.AcademicTests)
                ) && 
                (
                    Journey == other.Journey ||
                    Journey != null &&
                    Journey.Equals(other.Journey)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    College == other.College ||
                    College != null &&
                    College.Equals(other.College)
                ) && 
                (
                    Jobs == other.Jobs ||
                    Jobs != null &&
                    Jobs.Equals(other.Jobs)
                ) && 
                (
                    Ecosystem == other.Ecosystem ||
                    Ecosystem != null &&
                    Ecosystem.Equals(other.Ecosystem)
                ) && 
                (
                    Serve == other.Serve ||
                    Serve != null &&
                    Serve.Equals(other.Serve)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AcademicTests != null)
                    hashCode = hashCode * 59 + AcademicTests.GetHashCode();
                    if (Journey != null)
                    hashCode = hashCode * 59 + Journey.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (College != null)
                    hashCode = hashCode * 59 + College.GetHashCode();
                    if (Jobs != null)
                    hashCode = hashCode * 59 + Jobs.GetHashCode();
                    if (Ecosystem != null)
                    hashCode = hashCode * 59 + Ecosystem.GetHashCode();
                    if (Serve != null)
                    hashCode = hashCode * 59 + Serve.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProgressTrackerData left, ProgressTrackerData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProgressTrackerData left, ProgressTrackerData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
