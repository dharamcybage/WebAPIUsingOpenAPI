/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FormSubmissionFieldValue : IEquatable<FormSubmissionFieldValue>
    {
        /// <summary>
        /// Gets or Sets MultiValues
        /// </summary>
        [DataMember(Name="multiValues", EmitDefaultValue=true)]
        public List<long> MultiValues { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets FormFieldId
        /// </summary>
        [Required]
        [DataMember(Name="form_field_id", EmitDefaultValue=true)]
        public long FormFieldId { get; set; }

        /// <summary>
        /// Gets or Sets SingleValue
        /// </summary>
        [DataMember(Name="singleValue", EmitDefaultValue=true)]
        public long? SingleValue { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=true)]
        public string FileName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormSubmissionFieldValue {\n");
            sb.Append("  MultiValues: ").Append(MultiValues).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  FormFieldId: ").Append(FormFieldId).Append("\n");
            sb.Append("  SingleValue: ").Append(SingleValue).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FormSubmissionFieldValue)obj);
        }

        /// <summary>
        /// Returns true if FormSubmissionFieldValue instances are equal
        /// </summary>
        /// <param name="other">Instance of FormSubmissionFieldValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormSubmissionFieldValue other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MultiValues == other.MultiValues ||
                    MultiValues != null &&
                    other.MultiValues != null &&
                    MultiValues.SequenceEqual(other.MultiValues)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    FormFieldId == other.FormFieldId ||
                    
                    FormFieldId.Equals(other.FormFieldId)
                ) && 
                (
                    SingleValue == other.SingleValue ||
                    SingleValue != null &&
                    SingleValue.Equals(other.SingleValue)
                ) && 
                (
                    FileName == other.FileName ||
                    FileName != null &&
                    FileName.Equals(other.FileName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MultiValues != null)
                    hashCode = hashCode * 59 + MultiValues.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    
                    hashCode = hashCode * 59 + FormFieldId.GetHashCode();
                    if (SingleValue != null)
                    hashCode = hashCode * 59 + SingleValue.GetHashCode();
                    if (FileName != null)
                    hashCode = hashCode * 59 + FileName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FormSubmissionFieldValue left, FormSubmissionFieldValue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FormSubmissionFieldValue left, FormSubmissionFieldValue right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
