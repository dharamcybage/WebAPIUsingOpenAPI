/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StudentExperienceDataDashboardResponseData : IEquatable<StudentExperienceDataDashboardResponseData>
    {
        /// <summary>
        /// Gets or Sets CaseloadManagers
        /// </summary>
        [Required]
        [DataMember(Name="caseloadManagers", EmitDefaultValue=false)]
        public string CaseloadManagers { get; set; }

        /// <summary>
        /// Gets or Sets Badges
        /// </summary>
        [Required]
        [DataMember(Name="badges", EmitDefaultValue=false)]
        public List<StudentExperienceDataDashboardResponseDataBadgeData> Badges { get; set; }

        /// <summary>
        /// Gets or Sets ContactPhone
        /// </summary>
        [Required]
        [DataMember(Name="contactPhone", EmitDefaultValue=false)]
        public string ContactPhone { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [Required]
        [DataMember(Name="contactName", EmitDefaultValue=false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets OrgFields
        /// </summary>
        [Required]
        [DataMember(Name="orgFields", EmitDefaultValue=false)]
        public List<StudentExperienceDataDashboardResponseDataField> OrgFields { get; set; }

        /// <summary>
        /// Gets or Sets OrgName
        /// </summary>
        [Required]
        [DataMember(Name="orgName", EmitDefaultValue=false)]
        public string OrgName { get; set; }

        /// <summary>
        /// Gets or Sets ParentEmails
        /// </summary>
        [Required]
        [DataMember(Name="parentEmails", EmitDefaultValue=false)]
        public string ParentEmails { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceFields
        /// </summary>
        [Required]
        [DataMember(Name="experienceFields", EmitDefaultValue=false)]
        public List<StudentExperienceDataDashboardResponseDataField> ExperienceFields { get; set; }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade", EmitDefaultValue=true)]
        public long? Grade { get; set; }

        /// <summary>
        /// Gets or Sets ContactEmail
        /// </summary>
        [Required]
        [DataMember(Name="contactEmail", EmitDefaultValue=false)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// Gets or Sets Segments
        /// </summary>
        [Required]
        [DataMember(Name="segments", EmitDefaultValue=false)]
        public string Segments { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [Required]
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [Required]
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets ContactFields
        /// </summary>
        [Required]
        [DataMember(Name="contactFields", EmitDefaultValue=false)]
        public List<StudentExperienceDataDashboardResponseDataField> ContactFields { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceName
        /// </summary>
        [Required]
        [DataMember(Name="experienceName", EmitDefaultValue=false)]
        public string ExperienceName { get; set; }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [Required]
        [DataMember(Name="school", EmitDefaultValue=false)]
        public string School { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentExperienceDataDashboardResponseData {\n");
            sb.Append("  CaseloadManagers: ").Append(CaseloadManagers).Append("\n");
            sb.Append("  Badges: ").Append(Badges).Append("\n");
            sb.Append("  ContactPhone: ").Append(ContactPhone).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  OrgFields: ").Append(OrgFields).Append("\n");
            sb.Append("  OrgName: ").Append(OrgName).Append("\n");
            sb.Append("  ParentEmails: ").Append(ParentEmails).Append("\n");
            sb.Append("  ExperienceFields: ").Append(ExperienceFields).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  ContactFields: ").Append(ContactFields).Append("\n");
            sb.Append("  ExperienceName: ").Append(ExperienceName).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StudentExperienceDataDashboardResponseData)obj);
        }

        /// <summary>
        /// Returns true if StudentExperienceDataDashboardResponseData instances are equal
        /// </summary>
        /// <param name="other">Instance of StudentExperienceDataDashboardResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentExperienceDataDashboardResponseData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CaseloadManagers == other.CaseloadManagers ||
                    CaseloadManagers != null &&
                    CaseloadManagers.Equals(other.CaseloadManagers)
                ) && 
                (
                    Badges == other.Badges ||
                    Badges != null &&
                    other.Badges != null &&
                    Badges.SequenceEqual(other.Badges)
                ) && 
                (
                    ContactPhone == other.ContactPhone ||
                    ContactPhone != null &&
                    ContactPhone.Equals(other.ContactPhone)
                ) && 
                (
                    ContactName == other.ContactName ||
                    ContactName != null &&
                    ContactName.Equals(other.ContactName)
                ) && 
                (
                    OrgFields == other.OrgFields ||
                    OrgFields != null &&
                    other.OrgFields != null &&
                    OrgFields.SequenceEqual(other.OrgFields)
                ) && 
                (
                    OrgName == other.OrgName ||
                    OrgName != null &&
                    OrgName.Equals(other.OrgName)
                ) && 
                (
                    ParentEmails == other.ParentEmails ||
                    ParentEmails != null &&
                    ParentEmails.Equals(other.ParentEmails)
                ) && 
                (
                    ExperienceFields == other.ExperienceFields ||
                    ExperienceFields != null &&
                    other.ExperienceFields != null &&
                    ExperienceFields.SequenceEqual(other.ExperienceFields)
                ) && 
                (
                    Grade == other.Grade ||
                    Grade != null &&
                    Grade.Equals(other.Grade)
                ) && 
                (
                    ContactEmail == other.ContactEmail ||
                    ContactEmail != null &&
                    ContactEmail.Equals(other.ContactEmail)
                ) && 
                (
                    Segments == other.Segments ||
                    Segments != null &&
                    Segments.Equals(other.Segments)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    ContactFields == other.ContactFields ||
                    ContactFields != null &&
                    other.ContactFields != null &&
                    ContactFields.SequenceEqual(other.ContactFields)
                ) && 
                (
                    ExperienceName == other.ExperienceName ||
                    ExperienceName != null &&
                    ExperienceName.Equals(other.ExperienceName)
                ) && 
                (
                    School == other.School ||
                    School != null &&
                    School.Equals(other.School)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CaseloadManagers != null)
                    hashCode = hashCode * 59 + CaseloadManagers.GetHashCode();
                    if (Badges != null)
                    hashCode = hashCode * 59 + Badges.GetHashCode();
                    if (ContactPhone != null)
                    hashCode = hashCode * 59 + ContactPhone.GetHashCode();
                    if (ContactName != null)
                    hashCode = hashCode * 59 + ContactName.GetHashCode();
                    if (OrgFields != null)
                    hashCode = hashCode * 59 + OrgFields.GetHashCode();
                    if (OrgName != null)
                    hashCode = hashCode * 59 + OrgName.GetHashCode();
                    if (ParentEmails != null)
                    hashCode = hashCode * 59 + ParentEmails.GetHashCode();
                    if (ExperienceFields != null)
                    hashCode = hashCode * 59 + ExperienceFields.GetHashCode();
                    if (Grade != null)
                    hashCode = hashCode * 59 + Grade.GetHashCode();
                    if (ContactEmail != null)
                    hashCode = hashCode * 59 + ContactEmail.GetHashCode();
                    if (Segments != null)
                    hashCode = hashCode * 59 + Segments.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (ContactFields != null)
                    hashCode = hashCode * 59 + ContactFields.GetHashCode();
                    if (ExperienceName != null)
                    hashCode = hashCode * 59 + ExperienceName.GetHashCode();
                    if (School != null)
                    hashCode = hashCode * 59 + School.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StudentExperienceDataDashboardResponseData left, StudentExperienceDataDashboardResponseData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StudentExperienceDataDashboardResponseData left, StudentExperienceDataDashboardResponseData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
