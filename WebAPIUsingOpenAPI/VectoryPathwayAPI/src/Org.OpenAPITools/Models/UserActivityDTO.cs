/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserActivityDTO : IEquatable<UserActivityDTO>
    {
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ActivityId
        /// </summary>
        [Required]
        [DataMember(Name="activity_id", EmitDefaultValue=true)]
        public long ActivityId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deletedAt", EmitDefaultValue=true)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets EmailToken
        /// </summary>
        [DataMember(Name="emailToken", EmitDefaultValue=true)]
        public string EmailToken { get; set; }

        /// <summary>
        /// Gets or Sets HasCheckedIn
        /// </summary>
        [Required]
        [DataMember(Name="hasCheckedIn", EmitDefaultValue=true)]
        public bool HasCheckedIn { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=true)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets SponsorFormSubmissionId
        /// </summary>
        [DataMember(Name="sponsor_form_submission_id", EmitDefaultValue=true)]
        public long? SponsorFormSubmissionId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets SponsorRejected
        /// </summary>
        [Required]
        [DataMember(Name="sponsorRejected", EmitDefaultValue=true)]
        public bool SponsorRejected { get; set; }

        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [Required]
        [DataMember(Name="approved", EmitDefaultValue=true)]
        public bool Approved { get; set; }

        /// <summary>
        /// Gets or Sets SponsorApproved
        /// </summary>
        [Required]
        [DataMember(Name="sponsorApproved", EmitDefaultValue=true)]
        public bool SponsorApproved { get; set; }

        /// <summary>
        /// Gets or Sets SignatureUrl
        /// </summary>
        [DataMember(Name="signatureUrl", EmitDefaultValue=true)]
        public string SignatureUrl { get; set; }

        /// <summary>
        /// Gets or Sets SponsorNotes
        /// </summary>
        [DataMember(Name="sponsorNotes", EmitDefaultValue=true)]
        public string SponsorNotes { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [Required]
        [DataMember(Name="user_id", EmitDefaultValue=true)]
        public long UserId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalApprovalData
        /// </summary>
        [DataMember(Name="externalApprovalData", EmitDefaultValue=false)]
        public ExternalApprovalData ExternalApprovalData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserActivityDTO {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  EmailToken: ").Append(EmailToken).Append("\n");
            sb.Append("  HasCheckedIn: ").Append(HasCheckedIn).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  SponsorFormSubmissionId: ").Append(SponsorFormSubmissionId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SponsorRejected: ").Append(SponsorRejected).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  SponsorApproved: ").Append(SponsorApproved).Append("\n");
            sb.Append("  SignatureUrl: ").Append(SignatureUrl).Append("\n");
            sb.Append("  SponsorNotes: ").Append(SponsorNotes).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ExternalApprovalData: ").Append(ExternalApprovalData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserActivityDTO)obj);
        }

        /// <summary>
        /// Returns true if UserActivityDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of UserActivityDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserActivityDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    ActivityId == other.ActivityId ||
                    
                    ActivityId.Equals(other.ActivityId)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    DeletedAt == other.DeletedAt ||
                    DeletedAt != null &&
                    DeletedAt.Equals(other.DeletedAt)
                ) && 
                (
                    EmailToken == other.EmailToken ||
                    EmailToken != null &&
                    EmailToken.Equals(other.EmailToken)
                ) && 
                (
                    HasCheckedIn == other.HasCheckedIn ||
                    
                    HasCheckedIn.Equals(other.HasCheckedIn)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    SponsorFormSubmissionId == other.SponsorFormSubmissionId ||
                    SponsorFormSubmissionId != null &&
                    SponsorFormSubmissionId.Equals(other.SponsorFormSubmissionId)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    SponsorRejected == other.SponsorRejected ||
                    
                    SponsorRejected.Equals(other.SponsorRejected)
                ) && 
                (
                    Approved == other.Approved ||
                    
                    Approved.Equals(other.Approved)
                ) && 
                (
                    SponsorApproved == other.SponsorApproved ||
                    
                    SponsorApproved.Equals(other.SponsorApproved)
                ) && 
                (
                    SignatureUrl == other.SignatureUrl ||
                    SignatureUrl != null &&
                    SignatureUrl.Equals(other.SignatureUrl)
                ) && 
                (
                    SponsorNotes == other.SponsorNotes ||
                    SponsorNotes != null &&
                    SponsorNotes.Equals(other.SponsorNotes)
                ) && 
                (
                    UserId == other.UserId ||
                    
                    UserId.Equals(other.UserId)
                ) && 
                (
                    ExternalApprovalData == other.ExternalApprovalData ||
                    ExternalApprovalData != null &&
                    ExternalApprovalData.Equals(other.ExternalApprovalData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + ActivityId.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (DeletedAt != null)
                    hashCode = hashCode * 59 + DeletedAt.GetHashCode();
                    if (EmailToken != null)
                    hashCode = hashCode * 59 + EmailToken.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasCheckedIn.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    if (SponsorFormSubmissionId != null)
                    hashCode = hashCode * 59 + SponsorFormSubmissionId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + SponsorRejected.GetHashCode();
                    
                    hashCode = hashCode * 59 + Approved.GetHashCode();
                    
                    hashCode = hashCode * 59 + SponsorApproved.GetHashCode();
                    if (SignatureUrl != null)
                    hashCode = hashCode * 59 + SignatureUrl.GetHashCode();
                    if (SponsorNotes != null)
                    hashCode = hashCode * 59 + SponsorNotes.GetHashCode();
                    
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (ExternalApprovalData != null)
                    hashCode = hashCode * 59 + ExternalApprovalData.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserActivityDTO left, UserActivityDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserActivityDTO left, UserActivityDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
