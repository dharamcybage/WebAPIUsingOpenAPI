/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BackgroundCheckDTO : IEquatable<BackgroundCheckDTO>
    {
        /// <summary>
        /// Gets or Sets Convictions
        /// </summary>
        [DataMember(Name="convictions", EmitDefaultValue=true)]
        public string Convictions { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public long Status { get; set; }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [Required]
        [DataMember(Name="contact_id", EmitDefaultValue=true)]
        public long ContactId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalConsentUrl
        /// </summary>
        [DataMember(Name="externalConsentUrl", EmitDefaultValue=true)]
        public string ExternalConsentUrl { get; set; }

        /// <summary>
        /// Gets or Sets ExternalReferenceId
        /// </summary>
        [DataMember(Name="externalReferenceId", EmitDefaultValue=true)]
        public string ExternalReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deletedAt", EmitDefaultValue=true)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public long Type { get; set; }

        /// <summary>
        /// Gets or Sets ExternalWorkerReference
        /// </summary>
        [DataMember(Name="externalWorkerReference", EmitDefaultValue=true)]
        public string ExternalWorkerReference { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets RunBy
        /// </summary>
        [Required]
        [DataMember(Name="runBy", EmitDefaultValue=true)]
        public long RunBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BackgroundCheckDTO {\n");
            sb.Append("  Convictions: ").Append(Convictions).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  ExternalConsentUrl: ").Append(ExternalConsentUrl).Append("\n");
            sb.Append("  ExternalReferenceId: ").Append(ExternalReferenceId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ExternalWorkerReference: ").Append(ExternalWorkerReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  RunBy: ").Append(RunBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BackgroundCheckDTO)obj);
        }

        /// <summary>
        /// Returns true if BackgroundCheckDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of BackgroundCheckDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BackgroundCheckDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Convictions == other.Convictions ||
                    Convictions != null &&
                    Convictions.Equals(other.Convictions)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    ContactId == other.ContactId ||
                    
                    ContactId.Equals(other.ContactId)
                ) && 
                (
                    ExternalConsentUrl == other.ExternalConsentUrl ||
                    ExternalConsentUrl != null &&
                    ExternalConsentUrl.Equals(other.ExternalConsentUrl)
                ) && 
                (
                    ExternalReferenceId == other.ExternalReferenceId ||
                    ExternalReferenceId != null &&
                    ExternalReferenceId.Equals(other.ExternalReferenceId)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    DeletedAt == other.DeletedAt ||
                    DeletedAt != null &&
                    DeletedAt.Equals(other.DeletedAt)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    ExternalWorkerReference == other.ExternalWorkerReference ||
                    ExternalWorkerReference != null &&
                    ExternalWorkerReference.Equals(other.ExternalWorkerReference)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    RunBy == other.RunBy ||
                    
                    RunBy.Equals(other.RunBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Convictions != null)
                    hashCode = hashCode * 59 + Convictions.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + ContactId.GetHashCode();
                    if (ExternalConsentUrl != null)
                    hashCode = hashCode * 59 + ExternalConsentUrl.GetHashCode();
                    if (ExternalReferenceId != null)
                    hashCode = hashCode * 59 + ExternalReferenceId.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (DeletedAt != null)
                    hashCode = hashCode * 59 + DeletedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (ExternalWorkerReference != null)
                    hashCode = hashCode * 59 + ExternalWorkerReference.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + RunBy.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BackgroundCheckDTO left, BackgroundCheckDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BackgroundCheckDTO left, BackgroundCheckDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
