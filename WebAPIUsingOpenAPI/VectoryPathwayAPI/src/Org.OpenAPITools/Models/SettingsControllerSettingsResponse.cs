/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SettingsControllerSettingsResponse : IEquatable<SettingsControllerSettingsResponse>
    {
        /// <summary>
        /// Gets or Sets OrganizationCustomFormId
        /// </summary>
        [DataMember(Name="organizationCustomFormId", EmitDefaultValue=true)]
        public long? OrganizationCustomFormId { get; set; }

        /// <summary>
        /// Gets or Sets ContactsName
        /// </summary>
        [Required]
        [DataMember(Name="contactsName", EmitDefaultValue=false)]
        public string ContactsName { get; set; }

        /// <summary>
        /// Gets or Sets ExternalJobPageShortName
        /// </summary>
        [DataMember(Name="externalJobPageShortName", EmitDefaultValue=true)]
        public string ExternalJobPageShortName { get; set; }

        /// <summary>
        /// Gets or Sets TasksTurnedOn
        /// </summary>
        [Required]
        [DataMember(Name="tasksTurnedOn", EmitDefaultValue=true)]
        public bool TasksTurnedOn { get; set; }

        /// <summary>
        /// Gets or Sets IsTranseoContentBundleOnlyAdmin
        /// </summary>
        [Required]
        [DataMember(Name="isTranseoContentBundleOnlyAdmin", EmitDefaultValue=true)]
        public bool IsTranseoContentBundleOnlyAdmin { get; set; }

        /// <summary>
        /// Gets or Sets ShowsPlanInSidebar
        /// </summary>
        [Required]
        [DataMember(Name="showsPlanInSidebar", EmitDefaultValue=true)]
        public bool ShowsPlanInSidebar { get; set; }

        /// <summary>
        /// Gets or Sets DashboardBadgesName
        /// </summary>
        [Required]
        [DataMember(Name="dashboardBadgesName", EmitDefaultValue=false)]
        public string DashboardBadgesName { get; set; }

        /// <summary>
        /// Gets or Sets SendsParentEmail
        /// </summary>
        [Required]
        [DataMember(Name="sendsParentEmail", EmitDefaultValue=true)]
        public bool SendsParentEmail { get; set; }

        /// <summary>
        /// Gets or Sets TranscriptsName
        /// </summary>
        [Required]
        [DataMember(Name="transcriptsName", EmitDefaultValue=false)]
        public string TranscriptsName { get; set; }

        /// <summary>
        /// Gets or Sets PlansName
        /// </summary>
        [Required]
        [DataMember(Name="plansName", EmitDefaultValue=false)]
        public string PlansName { get; set; }

        /// <summary>
        /// Gets or Sets HideContactOnExperienceCard
        /// </summary>
        [Required]
        [DataMember(Name="hideContactOnExperienceCard", EmitDefaultValue=true)]
        public bool HideContactOnExperienceCard { get; set; }

        /// <summary>
        /// Gets or Sets ShowServiceGradeLevelDashboardData
        /// </summary>
        [Required]
        [DataMember(Name="showServiceGradeLevelDashboardData", EmitDefaultValue=true)]
        public bool ShowServiceGradeLevelDashboardData { get; set; }

        /// <summary>
        /// Gets or Sets ShowServiceGoals
        /// </summary>
        [Required]
        [DataMember(Name="showServiceGoals", EmitDefaultValue=true)]
        public bool ShowServiceGoals { get; set; }

        /// <summary>
        /// Gets or Sets BadgesName
        /// </summary>
        [Required]
        [DataMember(Name="badgesName", EmitDefaultValue=false)]
        public string BadgesName { get; set; }

        /// <summary>
        /// Gets or Sets RedirectBPPCreationToExternal
        /// </summary>
        [Required]
        [DataMember(Name="redirectBPPCreationToExternal", EmitDefaultValue=true)]
        public bool RedirectBPPCreationToExternal { get; set; }

        /// <summary>
        /// Gets or Sets UseEarnedCreditsForBadgeCalculations
        /// </summary>
        [Required]
        [DataMember(Name="useEarnedCreditsForBadgeCalculations", EmitDefaultValue=true)]
        public bool UseEarnedCreditsForBadgeCalculations { get; set; }

        /// <summary>
        /// Gets or Sets ServiceProposalRequired
        /// </summary>
        [Required]
        [DataMember(Name="serviceProposalRequired", EmitDefaultValue=true)]
        public bool ServiceProposalRequired { get; set; }

        /// <summary>
        /// Gets or Sets ExperiencesName
        /// </summary>
        [Required]
        [DataMember(Name="experiencesName", EmitDefaultValue=false)]
        public string ExperiencesName { get; set; }

        /// <summary>
        /// Gets or Sets GeoCheckinEnabled
        /// </summary>
        [Required]
        [DataMember(Name="geoCheckinEnabled", EmitDefaultValue=true)]
        public bool GeoCheckinEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AuthType
        /// </summary>
        [Required]
        [DataMember(Name="authType", EmitDefaultValue=true)]
        public long AuthType { get; set; }

        /// <summary>
        /// Gets or Sets ShowParentsOnStudentProfile
        /// </summary>
        [Required]
        [DataMember(Name="showParentsOnStudentProfile", EmitDefaultValue=true)]
        public bool ShowParentsOnStudentProfile { get; set; }

        /// <summary>
        /// Gets or Sets HasBusinessPartnerPortal
        /// </summary>
        [Required]
        [DataMember(Name="hasBusinessPartnerPortal", EmitDefaultValue=true)]
        public bool HasBusinessPartnerPortal { get; set; }

        /// <summary>
        /// Gets or Sets NumericalGradeMappings
        /// </summary>
        [Required]
        [DataMember(Name="numericalGradeMappings", EmitDefaultValue=false)]
        public List<SettingsControllerGradeMappingResponse> NumericalGradeMappings { get; set; }

        /// <summary>
        /// Gets or Sets AttendanceEnabled
        /// </summary>
        [Required]
        [DataMember(Name="attendanceEnabled", EmitDefaultValue=true)]
        public bool AttendanceEnabled { get; set; }

        /// <summary>
        /// Gets or Sets DisableStudentSeals
        /// </summary>
        [Required]
        [DataMember(Name="disableStudentSeals", EmitDefaultValue=true)]
        public bool DisableStudentSeals { get; set; }

        /// <summary>
        /// Gets or Sets ServeSponsorEmailsInTable
        /// </summary>
        [Required]
        [DataMember(Name="serveSponsorEmailsInTable", EmitDefaultValue=true)]
        public bool ServeSponsorEmailsInTable { get; set; }

        /// <summary>
        /// Gets or Sets MaximumTagsOnServiceEvent
        /// </summary>
        [DataMember(Name="maximumTagsOnServiceEvent", EmitDefaultValue=true)]
        public long? MaximumTagsOnServiceEvent { get; set; }

        /// <summary>
        /// Gets or Sets ShouldShowEventsInBusinessPartnerPortal
        /// </summary>
        [Required]
        [DataMember(Name="shouldShowEventsInBusinessPartnerPortal", EmitDefaultValue=true)]
        public bool ShouldShowEventsInBusinessPartnerPortal { get; set; }

        /// <summary>
        /// Gets or Sets ContactCustomFormId
        /// </summary>
        [DataMember(Name="contactCustomFormId", EmitDefaultValue=true)]
        public long? ContactCustomFormId { get; set; }

        /// <summary>
        /// Gets or Sets JourneyIsShutDown
        /// </summary>
        [Required]
        [DataMember(Name="journeyIsShutDown", EmitDefaultValue=true)]
        public bool JourneyIsShutDown { get; set; }

        /// <summary>
        /// Gets or Sets JourneyIsSunset
        /// </summary>
        [Required]
        [DataMember(Name="journeyIsSunset", EmitDefaultValue=true)]
        public bool JourneyIsSunset { get; set; }

        /// <summary>
        /// Gets or Sets ActivityApplicationFormId
        /// </summary>
        [DataMember(Name="activityApplicationFormId", EmitDefaultValue=true)]
        public long? ActivityApplicationFormId { get; set; }

        /// <summary>
        /// Gets or Sets CollegeIsSunset
        /// </summary>
        [Required]
        [DataMember(Name="collegeIsSunset", EmitDefaultValue=true)]
        public bool CollegeIsSunset { get; set; }

        /// <summary>
        /// Gets or Sets DashboardText
        /// </summary>
        [DataMember(Name="dashboardText", EmitDefaultValue=true)]
        public string DashboardText { get; set; }

        /// <summary>
        /// Gets or Sets ExternalAccountReferenceId
        /// </summary>
        [Required]
        [DataMember(Name="externalAccountReferenceId", EmitDefaultValue=false)]
        public string ExternalAccountReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets TeachersCanViewEntities
        /// </summary>
        [Required]
        [DataMember(Name="teachersCanViewEntities", EmitDefaultValue=true)]
        public bool TeachersCanViewEntities { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationsName
        /// </summary>
        [Required]
        [DataMember(Name="organizationsName", EmitDefaultValue=false)]
        public string OrganizationsName { get; set; }

        /// <summary>
        /// Gets or Sets Products
        /// </summary>
        [Required]
        [DataMember(Name="products", EmitDefaultValue=false)]
        public List<DistrictProductProduct> Products { get; set; }

        /// <summary>
        /// Gets or Sets OptionalFormId
        /// </summary>
        [DataMember(Name="optionalFormId", EmitDefaultValue=true)]
        public long? OptionalFormId { get; set; }

        /// <summary>
        /// Gets or Sets IsCollegeCounselor
        /// </summary>
        [Required]
        [DataMember(Name="isCollegeCounselor", EmitDefaultValue=true)]
        public bool IsCollegeCounselor { get; set; }

        /// <summary>
        /// Gets or Sets CanDeleteStudents
        /// </summary>
        [Required]
        [DataMember(Name="canDeleteStudents", EmitDefaultValue=true)]
        public bool CanDeleteStudents { get; set; }

        /// <summary>
        /// Gets or Sets ShowStudentOverallMetrics
        /// </summary>
        [Required]
        [DataMember(Name="showStudentOverallMetrics", EmitDefaultValue=true)]
        public bool ShowStudentOverallMetrics { get; set; }

        /// <summary>
        /// Gets or Sets ServiceProposalEnabled
        /// </summary>
        [Required]
        [DataMember(Name="serviceProposalEnabled", EmitDefaultValue=true)]
        public bool ServiceProposalEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceCustomFormId
        /// </summary>
        [DataMember(Name="experienceCustomFormId", EmitDefaultValue=true)]
        public long? ExperienceCustomFormId { get; set; }

        /// <summary>
        /// Gets or Sets DistrictName
        /// </summary>
        [Required]
        [DataMember(Name="districtName", EmitDefaultValue=false)]
        public string DistrictName { get; set; }

        /// <summary>
        /// Gets or Sets ShowStudentReports
        /// </summary>
        [Required]
        [DataMember(Name="showStudentReports", EmitDefaultValue=true)]
        public bool ShowStudentReports { get; set; }

        /// <summary>
        /// Gets or Sets StudentsCanSubmitEntities
        /// </summary>
        [Required]
        [DataMember(Name="studentsCanSubmitEntities", EmitDefaultValue=true)]
        public bool StudentsCanSubmitEntities { get; set; }

        /// <summary>
        /// Gets or Sets CustomQueriesEnabled
        /// </summary>
        [Required]
        [DataMember(Name="customQueriesEnabled", EmitDefaultValue=true)]
        public bool CustomQueriesEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsTranseoAdmin
        /// </summary>
        [Required]
        [DataMember(Name="isTranseoAdmin", EmitDefaultValue=true)]
        public bool IsTranseoAdmin { get; set; }

        /// <summary>
        /// Gets or Sets DistrictId
        /// </summary>
        [DataMember(Name="districtId", EmitDefaultValue=true)]
        public long? DistrictId { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceReflectionFormId
        /// </summary>
        [DataMember(Name="experienceReflectionFormId", EmitDefaultValue=true)]
        public long? ExperienceReflectionFormId { get; set; }

        /// <summary>
        /// Gets or Sets JourneyTier
        /// </summary>
        [DataMember(Name="journeyTier", EmitDefaultValue=true)]
        public long? JourneyTier { get; set; }

        /// <summary>
        /// Gets or Sets DisableShiftsOnStudentSide
        /// </summary>
        [Required]
        [DataMember(Name="disableShiftsOnStudentSide", EmitDefaultValue=true)]
        public bool DisableShiftsOnStudentSide { get; set; }

        /// <summary>
        /// Gets or Sets ParchmentEnabled
        /// </summary>
        [Required]
        [DataMember(Name="parchmentEnabled", EmitDefaultValue=true)]
        public bool ParchmentEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsDistrictSuperUser
        /// </summary>
        [Required]
        [DataMember(Name="isDistrictSuperUser", EmitDefaultValue=true)]
        public bool IsDistrictSuperUser { get; set; }

        /// <summary>
        /// Gets or Sets TasksBelowBadges
        /// </summary>
        [Required]
        [DataMember(Name="tasksBelowBadges", EmitDefaultValue=true)]
        public bool TasksBelowBadges { get; set; }

        /// <summary>
        /// Gets or Sets IntercomToken
        /// </summary>
        [Required]
        [DataMember(Name="intercomToken", EmitDefaultValue=false)]
        public string IntercomToken { get; set; }

        /// <summary>
        /// Gets or Sets RequiredFormId
        /// </summary>
        [DataMember(Name="requiredFormId", EmitDefaultValue=true)]
        public long? RequiredFormId { get; set; }

        /// <summary>
        /// Gets or Sets GeoCheckInForServeEnabled
        /// </summary>
        [Required]
        [DataMember(Name="geoCheckInForServeEnabled", EmitDefaultValue=true)]
        public bool GeoCheckInForServeEnabled { get; set; }

        /// <summary>
        /// Gets or Sets BadgeLibraryName
        /// </summary>
        [Required]
        [DataMember(Name="badgeLibraryName", EmitDefaultValue=false)]
        public string BadgeLibraryName { get; set; }

        /// <summary>
        /// Gets or Sets AdminSealsEnabled
        /// </summary>
        [Required]
        [DataMember(Name="adminSealsEnabled", EmitDefaultValue=true)]
        public bool AdminSealsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets CanViewDeliveryCenter
        /// </summary>
        [Required]
        [DataMember(Name="canViewDeliveryCenter", EmitDefaultValue=true)]
        public bool CanViewDeliveryCenter { get; set; }

        /// <summary>
        /// Gets or Sets CanSetEvaluationGoalsOnWorkflowForm
        /// </summary>
        [Required]
        [DataMember(Name="canSetEvaluationGoalsOnWorkflowForm", EmitDefaultValue=true)]
        public bool CanSetEvaluationGoalsOnWorkflowForm { get; set; }

        /// <summary>
        /// Gets or Sets BragSheetsFormId
        /// </summary>
        [DataMember(Name="bragSheetsFormId", EmitDefaultValue=true)]
        public long? BragSheetsFormId { get; set; }

        /// <summary>
        /// Gets or Sets TranscriptMatchingKey
        /// </summary>
        [DataMember(Name="transcriptMatchingKey", EmitDefaultValue=true)]
        public string TranscriptMatchingKey { get; set; }

        /// <summary>
        /// Gets or Sets EntityPermissions
        /// </summary>
        [Required]
        [DataMember(Name="entityPermissions", EmitDefaultValue=false)]
        public UserEntityPermissions EntityPermissions { get; set; }

        /// <summary>
        /// Gets or Sets SuperUserCanAlsoViewPlatform
        /// </summary>
        [Required]
        [DataMember(Name="superUserCanAlsoViewPlatform", EmitDefaultValue=true)]
        public bool SuperUserCanAlsoViewPlatform { get; set; }

        /// <summary>
        /// Gets or Sets CollegeIsShutDown
        /// </summary>
        [Required]
        [DataMember(Name="collegeIsShutDown", EmitDefaultValue=true)]
        public bool CollegeIsShutDown { get; set; }

        /// <summary>
        /// Gets or Sets BusinessPartnerExperiencesText
        /// </summary>
        [DataMember(Name="businessPartnerExperiencesText", EmitDefaultValue=true)]
        public string BusinessPartnerExperiencesText { get; set; }

        /// <summary>
        /// Gets or Sets HasCommonApp
        /// </summary>
        [Required]
        [DataMember(Name="hasCommonApp", EmitDefaultValue=true)]
        public bool HasCommonApp { get; set; }

        /// <summary>
        /// Gets or Sets GatedJobsBadge
        /// </summary>
        [DataMember(Name="gatedJobsBadge", EmitDefaultValue=false)]
        public BadgeDTO GatedJobsBadge { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceApplicationFormId
        /// </summary>
        [DataMember(Name="experienceApplicationFormId", EmitDefaultValue=true)]
        public long? ExperienceApplicationFormId { get; set; }

        /// <summary>
        /// Gets or Sets ActivitiesName
        /// </summary>
        [Required]
        [DataMember(Name="activitiesName", EmitDefaultValue=false)]
        public string ActivitiesName { get; set; }

        /// <summary>
        /// Gets or Sets HideShareToLinkedin
        /// </summary>
        [Required]
        [DataMember(Name="hideShareToLinkedin", EmitDefaultValue=true)]
        public bool HideShareToLinkedin { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name="logoUrl", EmitDefaultValue=true)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsTranseoDemoDistrict
        /// </summary>
        [Required]
        [DataMember(Name="isTranseoDemoDistrict", EmitDefaultValue=true)]
        public bool IsTranseoDemoDistrict { get; set; }

        /// <summary>
        /// Gets or Sets BypassCollegeGradeRequirement
        /// </summary>
        [Required]
        [DataMember(Name="bypassCollegeGradeRequirement", EmitDefaultValue=true)]
        public bool BypassCollegeGradeRequirement { get; set; }

        /// <summary>
        /// Gets or Sets ShowStudentJourneySidebar
        /// </summary>
        [Required]
        [DataMember(Name="showStudentJourneySidebar", EmitDefaultValue=true)]
        public bool ShowStudentJourneySidebar { get; set; }

        /// <summary>
        /// Gets or Sets IsDistrictAdmin
        /// </summary>
        [Required]
        [DataMember(Name="isDistrictAdmin", EmitDefaultValue=true)]
        public bool IsDistrictAdmin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SettingsControllerSettingsResponse {\n");
            sb.Append("  OrganizationCustomFormId: ").Append(OrganizationCustomFormId).Append("\n");
            sb.Append("  ContactsName: ").Append(ContactsName).Append("\n");
            sb.Append("  ExternalJobPageShortName: ").Append(ExternalJobPageShortName).Append("\n");
            sb.Append("  TasksTurnedOn: ").Append(TasksTurnedOn).Append("\n");
            sb.Append("  IsTranseoContentBundleOnlyAdmin: ").Append(IsTranseoContentBundleOnlyAdmin).Append("\n");
            sb.Append("  ShowsPlanInSidebar: ").Append(ShowsPlanInSidebar).Append("\n");
            sb.Append("  DashboardBadgesName: ").Append(DashboardBadgesName).Append("\n");
            sb.Append("  SendsParentEmail: ").Append(SendsParentEmail).Append("\n");
            sb.Append("  TranscriptsName: ").Append(TranscriptsName).Append("\n");
            sb.Append("  PlansName: ").Append(PlansName).Append("\n");
            sb.Append("  HideContactOnExperienceCard: ").Append(HideContactOnExperienceCard).Append("\n");
            sb.Append("  ShowServiceGradeLevelDashboardData: ").Append(ShowServiceGradeLevelDashboardData).Append("\n");
            sb.Append("  ShowServiceGoals: ").Append(ShowServiceGoals).Append("\n");
            sb.Append("  BadgesName: ").Append(BadgesName).Append("\n");
            sb.Append("  RedirectBPPCreationToExternal: ").Append(RedirectBPPCreationToExternal).Append("\n");
            sb.Append("  UseEarnedCreditsForBadgeCalculations: ").Append(UseEarnedCreditsForBadgeCalculations).Append("\n");
            sb.Append("  ServiceProposalRequired: ").Append(ServiceProposalRequired).Append("\n");
            sb.Append("  ExperiencesName: ").Append(ExperiencesName).Append("\n");
            sb.Append("  GeoCheckinEnabled: ").Append(GeoCheckinEnabled).Append("\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  ShowParentsOnStudentProfile: ").Append(ShowParentsOnStudentProfile).Append("\n");
            sb.Append("  HasBusinessPartnerPortal: ").Append(HasBusinessPartnerPortal).Append("\n");
            sb.Append("  NumericalGradeMappings: ").Append(NumericalGradeMappings).Append("\n");
            sb.Append("  AttendanceEnabled: ").Append(AttendanceEnabled).Append("\n");
            sb.Append("  DisableStudentSeals: ").Append(DisableStudentSeals).Append("\n");
            sb.Append("  ServeSponsorEmailsInTable: ").Append(ServeSponsorEmailsInTable).Append("\n");
            sb.Append("  MaximumTagsOnServiceEvent: ").Append(MaximumTagsOnServiceEvent).Append("\n");
            sb.Append("  ShouldShowEventsInBusinessPartnerPortal: ").Append(ShouldShowEventsInBusinessPartnerPortal).Append("\n");
            sb.Append("  ContactCustomFormId: ").Append(ContactCustomFormId).Append("\n");
            sb.Append("  JourneyIsShutDown: ").Append(JourneyIsShutDown).Append("\n");
            sb.Append("  JourneyIsSunset: ").Append(JourneyIsSunset).Append("\n");
            sb.Append("  ActivityApplicationFormId: ").Append(ActivityApplicationFormId).Append("\n");
            sb.Append("  CollegeIsSunset: ").Append(CollegeIsSunset).Append("\n");
            sb.Append("  DashboardText: ").Append(DashboardText).Append("\n");
            sb.Append("  ExternalAccountReferenceId: ").Append(ExternalAccountReferenceId).Append("\n");
            sb.Append("  TeachersCanViewEntities: ").Append(TeachersCanViewEntities).Append("\n");
            sb.Append("  OrganizationsName: ").Append(OrganizationsName).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  OptionalFormId: ").Append(OptionalFormId).Append("\n");
            sb.Append("  IsCollegeCounselor: ").Append(IsCollegeCounselor).Append("\n");
            sb.Append("  CanDeleteStudents: ").Append(CanDeleteStudents).Append("\n");
            sb.Append("  ShowStudentOverallMetrics: ").Append(ShowStudentOverallMetrics).Append("\n");
            sb.Append("  ServiceProposalEnabled: ").Append(ServiceProposalEnabled).Append("\n");
            sb.Append("  ExperienceCustomFormId: ").Append(ExperienceCustomFormId).Append("\n");
            sb.Append("  DistrictName: ").Append(DistrictName).Append("\n");
            sb.Append("  ShowStudentReports: ").Append(ShowStudentReports).Append("\n");
            sb.Append("  StudentsCanSubmitEntities: ").Append(StudentsCanSubmitEntities).Append("\n");
            sb.Append("  CustomQueriesEnabled: ").Append(CustomQueriesEnabled).Append("\n");
            sb.Append("  IsTranseoAdmin: ").Append(IsTranseoAdmin).Append("\n");
            sb.Append("  DistrictId: ").Append(DistrictId).Append("\n");
            sb.Append("  ExperienceReflectionFormId: ").Append(ExperienceReflectionFormId).Append("\n");
            sb.Append("  JourneyTier: ").Append(JourneyTier).Append("\n");
            sb.Append("  DisableShiftsOnStudentSide: ").Append(DisableShiftsOnStudentSide).Append("\n");
            sb.Append("  ParchmentEnabled: ").Append(ParchmentEnabled).Append("\n");
            sb.Append("  IsDistrictSuperUser: ").Append(IsDistrictSuperUser).Append("\n");
            sb.Append("  TasksBelowBadges: ").Append(TasksBelowBadges).Append("\n");
            sb.Append("  IntercomToken: ").Append(IntercomToken).Append("\n");
            sb.Append("  RequiredFormId: ").Append(RequiredFormId).Append("\n");
            sb.Append("  GeoCheckInForServeEnabled: ").Append(GeoCheckInForServeEnabled).Append("\n");
            sb.Append("  BadgeLibraryName: ").Append(BadgeLibraryName).Append("\n");
            sb.Append("  AdminSealsEnabled: ").Append(AdminSealsEnabled).Append("\n");
            sb.Append("  CanViewDeliveryCenter: ").Append(CanViewDeliveryCenter).Append("\n");
            sb.Append("  CanSetEvaluationGoalsOnWorkflowForm: ").Append(CanSetEvaluationGoalsOnWorkflowForm).Append("\n");
            sb.Append("  BragSheetsFormId: ").Append(BragSheetsFormId).Append("\n");
            sb.Append("  TranscriptMatchingKey: ").Append(TranscriptMatchingKey).Append("\n");
            sb.Append("  EntityPermissions: ").Append(EntityPermissions).Append("\n");
            sb.Append("  SuperUserCanAlsoViewPlatform: ").Append(SuperUserCanAlsoViewPlatform).Append("\n");
            sb.Append("  CollegeIsShutDown: ").Append(CollegeIsShutDown).Append("\n");
            sb.Append("  BusinessPartnerExperiencesText: ").Append(BusinessPartnerExperiencesText).Append("\n");
            sb.Append("  HasCommonApp: ").Append(HasCommonApp).Append("\n");
            sb.Append("  GatedJobsBadge: ").Append(GatedJobsBadge).Append("\n");
            sb.Append("  ExperienceApplicationFormId: ").Append(ExperienceApplicationFormId).Append("\n");
            sb.Append("  ActivitiesName: ").Append(ActivitiesName).Append("\n");
            sb.Append("  HideShareToLinkedin: ").Append(HideShareToLinkedin).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  IsTranseoDemoDistrict: ").Append(IsTranseoDemoDistrict).Append("\n");
            sb.Append("  BypassCollegeGradeRequirement: ").Append(BypassCollegeGradeRequirement).Append("\n");
            sb.Append("  ShowStudentJourneySidebar: ").Append(ShowStudentJourneySidebar).Append("\n");
            sb.Append("  IsDistrictAdmin: ").Append(IsDistrictAdmin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SettingsControllerSettingsResponse)obj);
        }

        /// <summary>
        /// Returns true if SettingsControllerSettingsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SettingsControllerSettingsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettingsControllerSettingsResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OrganizationCustomFormId == other.OrganizationCustomFormId ||
                    OrganizationCustomFormId != null &&
                    OrganizationCustomFormId.Equals(other.OrganizationCustomFormId)
                ) && 
                (
                    ContactsName == other.ContactsName ||
                    ContactsName != null &&
                    ContactsName.Equals(other.ContactsName)
                ) && 
                (
                    ExternalJobPageShortName == other.ExternalJobPageShortName ||
                    ExternalJobPageShortName != null &&
                    ExternalJobPageShortName.Equals(other.ExternalJobPageShortName)
                ) && 
                (
                    TasksTurnedOn == other.TasksTurnedOn ||
                    
                    TasksTurnedOn.Equals(other.TasksTurnedOn)
                ) && 
                (
                    IsTranseoContentBundleOnlyAdmin == other.IsTranseoContentBundleOnlyAdmin ||
                    
                    IsTranseoContentBundleOnlyAdmin.Equals(other.IsTranseoContentBundleOnlyAdmin)
                ) && 
                (
                    ShowsPlanInSidebar == other.ShowsPlanInSidebar ||
                    
                    ShowsPlanInSidebar.Equals(other.ShowsPlanInSidebar)
                ) && 
                (
                    DashboardBadgesName == other.DashboardBadgesName ||
                    DashboardBadgesName != null &&
                    DashboardBadgesName.Equals(other.DashboardBadgesName)
                ) && 
                (
                    SendsParentEmail == other.SendsParentEmail ||
                    
                    SendsParentEmail.Equals(other.SendsParentEmail)
                ) && 
                (
                    TranscriptsName == other.TranscriptsName ||
                    TranscriptsName != null &&
                    TranscriptsName.Equals(other.TranscriptsName)
                ) && 
                (
                    PlansName == other.PlansName ||
                    PlansName != null &&
                    PlansName.Equals(other.PlansName)
                ) && 
                (
                    HideContactOnExperienceCard == other.HideContactOnExperienceCard ||
                    
                    HideContactOnExperienceCard.Equals(other.HideContactOnExperienceCard)
                ) && 
                (
                    ShowServiceGradeLevelDashboardData == other.ShowServiceGradeLevelDashboardData ||
                    
                    ShowServiceGradeLevelDashboardData.Equals(other.ShowServiceGradeLevelDashboardData)
                ) && 
                (
                    ShowServiceGoals == other.ShowServiceGoals ||
                    
                    ShowServiceGoals.Equals(other.ShowServiceGoals)
                ) && 
                (
                    BadgesName == other.BadgesName ||
                    BadgesName != null &&
                    BadgesName.Equals(other.BadgesName)
                ) && 
                (
                    RedirectBPPCreationToExternal == other.RedirectBPPCreationToExternal ||
                    
                    RedirectBPPCreationToExternal.Equals(other.RedirectBPPCreationToExternal)
                ) && 
                (
                    UseEarnedCreditsForBadgeCalculations == other.UseEarnedCreditsForBadgeCalculations ||
                    
                    UseEarnedCreditsForBadgeCalculations.Equals(other.UseEarnedCreditsForBadgeCalculations)
                ) && 
                (
                    ServiceProposalRequired == other.ServiceProposalRequired ||
                    
                    ServiceProposalRequired.Equals(other.ServiceProposalRequired)
                ) && 
                (
                    ExperiencesName == other.ExperiencesName ||
                    ExperiencesName != null &&
                    ExperiencesName.Equals(other.ExperiencesName)
                ) && 
                (
                    GeoCheckinEnabled == other.GeoCheckinEnabled ||
                    
                    GeoCheckinEnabled.Equals(other.GeoCheckinEnabled)
                ) && 
                (
                    AuthType == other.AuthType ||
                    
                    AuthType.Equals(other.AuthType)
                ) && 
                (
                    ShowParentsOnStudentProfile == other.ShowParentsOnStudentProfile ||
                    
                    ShowParentsOnStudentProfile.Equals(other.ShowParentsOnStudentProfile)
                ) && 
                (
                    HasBusinessPartnerPortal == other.HasBusinessPartnerPortal ||
                    
                    HasBusinessPartnerPortal.Equals(other.HasBusinessPartnerPortal)
                ) && 
                (
                    NumericalGradeMappings == other.NumericalGradeMappings ||
                    NumericalGradeMappings != null &&
                    other.NumericalGradeMappings != null &&
                    NumericalGradeMappings.SequenceEqual(other.NumericalGradeMappings)
                ) && 
                (
                    AttendanceEnabled == other.AttendanceEnabled ||
                    
                    AttendanceEnabled.Equals(other.AttendanceEnabled)
                ) && 
                (
                    DisableStudentSeals == other.DisableStudentSeals ||
                    
                    DisableStudentSeals.Equals(other.DisableStudentSeals)
                ) && 
                (
                    ServeSponsorEmailsInTable == other.ServeSponsorEmailsInTable ||
                    
                    ServeSponsorEmailsInTable.Equals(other.ServeSponsorEmailsInTable)
                ) && 
                (
                    MaximumTagsOnServiceEvent == other.MaximumTagsOnServiceEvent ||
                    MaximumTagsOnServiceEvent != null &&
                    MaximumTagsOnServiceEvent.Equals(other.MaximumTagsOnServiceEvent)
                ) && 
                (
                    ShouldShowEventsInBusinessPartnerPortal == other.ShouldShowEventsInBusinessPartnerPortal ||
                    
                    ShouldShowEventsInBusinessPartnerPortal.Equals(other.ShouldShowEventsInBusinessPartnerPortal)
                ) && 
                (
                    ContactCustomFormId == other.ContactCustomFormId ||
                    ContactCustomFormId != null &&
                    ContactCustomFormId.Equals(other.ContactCustomFormId)
                ) && 
                (
                    JourneyIsShutDown == other.JourneyIsShutDown ||
                    
                    JourneyIsShutDown.Equals(other.JourneyIsShutDown)
                ) && 
                (
                    JourneyIsSunset == other.JourneyIsSunset ||
                    
                    JourneyIsSunset.Equals(other.JourneyIsSunset)
                ) && 
                (
                    ActivityApplicationFormId == other.ActivityApplicationFormId ||
                    ActivityApplicationFormId != null &&
                    ActivityApplicationFormId.Equals(other.ActivityApplicationFormId)
                ) && 
                (
                    CollegeIsSunset == other.CollegeIsSunset ||
                    
                    CollegeIsSunset.Equals(other.CollegeIsSunset)
                ) && 
                (
                    DashboardText == other.DashboardText ||
                    DashboardText != null &&
                    DashboardText.Equals(other.DashboardText)
                ) && 
                (
                    ExternalAccountReferenceId == other.ExternalAccountReferenceId ||
                    ExternalAccountReferenceId != null &&
                    ExternalAccountReferenceId.Equals(other.ExternalAccountReferenceId)
                ) && 
                (
                    TeachersCanViewEntities == other.TeachersCanViewEntities ||
                    
                    TeachersCanViewEntities.Equals(other.TeachersCanViewEntities)
                ) && 
                (
                    OrganizationsName == other.OrganizationsName ||
                    OrganizationsName != null &&
                    OrganizationsName.Equals(other.OrganizationsName)
                ) && 
                (
                    Products == other.Products ||
                    Products != null &&
                    other.Products != null &&
                    Products.SequenceEqual(other.Products)
                ) && 
                (
                    OptionalFormId == other.OptionalFormId ||
                    OptionalFormId != null &&
                    OptionalFormId.Equals(other.OptionalFormId)
                ) && 
                (
                    IsCollegeCounselor == other.IsCollegeCounselor ||
                    
                    IsCollegeCounselor.Equals(other.IsCollegeCounselor)
                ) && 
                (
                    CanDeleteStudents == other.CanDeleteStudents ||
                    
                    CanDeleteStudents.Equals(other.CanDeleteStudents)
                ) && 
                (
                    ShowStudentOverallMetrics == other.ShowStudentOverallMetrics ||
                    
                    ShowStudentOverallMetrics.Equals(other.ShowStudentOverallMetrics)
                ) && 
                (
                    ServiceProposalEnabled == other.ServiceProposalEnabled ||
                    
                    ServiceProposalEnabled.Equals(other.ServiceProposalEnabled)
                ) && 
                (
                    ExperienceCustomFormId == other.ExperienceCustomFormId ||
                    ExperienceCustomFormId != null &&
                    ExperienceCustomFormId.Equals(other.ExperienceCustomFormId)
                ) && 
                (
                    DistrictName == other.DistrictName ||
                    DistrictName != null &&
                    DistrictName.Equals(other.DistrictName)
                ) && 
                (
                    ShowStudentReports == other.ShowStudentReports ||
                    
                    ShowStudentReports.Equals(other.ShowStudentReports)
                ) && 
                (
                    StudentsCanSubmitEntities == other.StudentsCanSubmitEntities ||
                    
                    StudentsCanSubmitEntities.Equals(other.StudentsCanSubmitEntities)
                ) && 
                (
                    CustomQueriesEnabled == other.CustomQueriesEnabled ||
                    
                    CustomQueriesEnabled.Equals(other.CustomQueriesEnabled)
                ) && 
                (
                    IsTranseoAdmin == other.IsTranseoAdmin ||
                    
                    IsTranseoAdmin.Equals(other.IsTranseoAdmin)
                ) && 
                (
                    DistrictId == other.DistrictId ||
                    DistrictId != null &&
                    DistrictId.Equals(other.DistrictId)
                ) && 
                (
                    ExperienceReflectionFormId == other.ExperienceReflectionFormId ||
                    ExperienceReflectionFormId != null &&
                    ExperienceReflectionFormId.Equals(other.ExperienceReflectionFormId)
                ) && 
                (
                    JourneyTier == other.JourneyTier ||
                    JourneyTier != null &&
                    JourneyTier.Equals(other.JourneyTier)
                ) && 
                (
                    DisableShiftsOnStudentSide == other.DisableShiftsOnStudentSide ||
                    
                    DisableShiftsOnStudentSide.Equals(other.DisableShiftsOnStudentSide)
                ) && 
                (
                    ParchmentEnabled == other.ParchmentEnabled ||
                    
                    ParchmentEnabled.Equals(other.ParchmentEnabled)
                ) && 
                (
                    IsDistrictSuperUser == other.IsDistrictSuperUser ||
                    
                    IsDistrictSuperUser.Equals(other.IsDistrictSuperUser)
                ) && 
                (
                    TasksBelowBadges == other.TasksBelowBadges ||
                    
                    TasksBelowBadges.Equals(other.TasksBelowBadges)
                ) && 
                (
                    IntercomToken == other.IntercomToken ||
                    IntercomToken != null &&
                    IntercomToken.Equals(other.IntercomToken)
                ) && 
                (
                    RequiredFormId == other.RequiredFormId ||
                    RequiredFormId != null &&
                    RequiredFormId.Equals(other.RequiredFormId)
                ) && 
                (
                    GeoCheckInForServeEnabled == other.GeoCheckInForServeEnabled ||
                    
                    GeoCheckInForServeEnabled.Equals(other.GeoCheckInForServeEnabled)
                ) && 
                (
                    BadgeLibraryName == other.BadgeLibraryName ||
                    BadgeLibraryName != null &&
                    BadgeLibraryName.Equals(other.BadgeLibraryName)
                ) && 
                (
                    AdminSealsEnabled == other.AdminSealsEnabled ||
                    
                    AdminSealsEnabled.Equals(other.AdminSealsEnabled)
                ) && 
                (
                    CanViewDeliveryCenter == other.CanViewDeliveryCenter ||
                    
                    CanViewDeliveryCenter.Equals(other.CanViewDeliveryCenter)
                ) && 
                (
                    CanSetEvaluationGoalsOnWorkflowForm == other.CanSetEvaluationGoalsOnWorkflowForm ||
                    
                    CanSetEvaluationGoalsOnWorkflowForm.Equals(other.CanSetEvaluationGoalsOnWorkflowForm)
                ) && 
                (
                    BragSheetsFormId == other.BragSheetsFormId ||
                    BragSheetsFormId != null &&
                    BragSheetsFormId.Equals(other.BragSheetsFormId)
                ) && 
                (
                    TranscriptMatchingKey == other.TranscriptMatchingKey ||
                    TranscriptMatchingKey != null &&
                    TranscriptMatchingKey.Equals(other.TranscriptMatchingKey)
                ) && 
                (
                    EntityPermissions == other.EntityPermissions ||
                    EntityPermissions != null &&
                    EntityPermissions.Equals(other.EntityPermissions)
                ) && 
                (
                    SuperUserCanAlsoViewPlatform == other.SuperUserCanAlsoViewPlatform ||
                    
                    SuperUserCanAlsoViewPlatform.Equals(other.SuperUserCanAlsoViewPlatform)
                ) && 
                (
                    CollegeIsShutDown == other.CollegeIsShutDown ||
                    
                    CollegeIsShutDown.Equals(other.CollegeIsShutDown)
                ) && 
                (
                    BusinessPartnerExperiencesText == other.BusinessPartnerExperiencesText ||
                    BusinessPartnerExperiencesText != null &&
                    BusinessPartnerExperiencesText.Equals(other.BusinessPartnerExperiencesText)
                ) && 
                (
                    HasCommonApp == other.HasCommonApp ||
                    
                    HasCommonApp.Equals(other.HasCommonApp)
                ) && 
                (
                    GatedJobsBadge == other.GatedJobsBadge ||
                    GatedJobsBadge != null &&
                    GatedJobsBadge.Equals(other.GatedJobsBadge)
                ) && 
                (
                    ExperienceApplicationFormId == other.ExperienceApplicationFormId ||
                    ExperienceApplicationFormId != null &&
                    ExperienceApplicationFormId.Equals(other.ExperienceApplicationFormId)
                ) && 
                (
                    ActivitiesName == other.ActivitiesName ||
                    ActivitiesName != null &&
                    ActivitiesName.Equals(other.ActivitiesName)
                ) && 
                (
                    HideShareToLinkedin == other.HideShareToLinkedin ||
                    
                    HideShareToLinkedin.Equals(other.HideShareToLinkedin)
                ) && 
                (
                    LogoUrl == other.LogoUrl ||
                    LogoUrl != null &&
                    LogoUrl.Equals(other.LogoUrl)
                ) && 
                (
                    IsTranseoDemoDistrict == other.IsTranseoDemoDistrict ||
                    
                    IsTranseoDemoDistrict.Equals(other.IsTranseoDemoDistrict)
                ) && 
                (
                    BypassCollegeGradeRequirement == other.BypassCollegeGradeRequirement ||
                    
                    BypassCollegeGradeRequirement.Equals(other.BypassCollegeGradeRequirement)
                ) && 
                (
                    ShowStudentJourneySidebar == other.ShowStudentJourneySidebar ||
                    
                    ShowStudentJourneySidebar.Equals(other.ShowStudentJourneySidebar)
                ) && 
                (
                    IsDistrictAdmin == other.IsDistrictAdmin ||
                    
                    IsDistrictAdmin.Equals(other.IsDistrictAdmin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OrganizationCustomFormId != null)
                    hashCode = hashCode * 59 + OrganizationCustomFormId.GetHashCode();
                    if (ContactsName != null)
                    hashCode = hashCode * 59 + ContactsName.GetHashCode();
                    if (ExternalJobPageShortName != null)
                    hashCode = hashCode * 59 + ExternalJobPageShortName.GetHashCode();
                    
                    hashCode = hashCode * 59 + TasksTurnedOn.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsTranseoContentBundleOnlyAdmin.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowsPlanInSidebar.GetHashCode();
                    if (DashboardBadgesName != null)
                    hashCode = hashCode * 59 + DashboardBadgesName.GetHashCode();
                    
                    hashCode = hashCode * 59 + SendsParentEmail.GetHashCode();
                    if (TranscriptsName != null)
                    hashCode = hashCode * 59 + TranscriptsName.GetHashCode();
                    if (PlansName != null)
                    hashCode = hashCode * 59 + PlansName.GetHashCode();
                    
                    hashCode = hashCode * 59 + HideContactOnExperienceCard.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowServiceGradeLevelDashboardData.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowServiceGoals.GetHashCode();
                    if (BadgesName != null)
                    hashCode = hashCode * 59 + BadgesName.GetHashCode();
                    
                    hashCode = hashCode * 59 + RedirectBPPCreationToExternal.GetHashCode();
                    
                    hashCode = hashCode * 59 + UseEarnedCreditsForBadgeCalculations.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServiceProposalRequired.GetHashCode();
                    if (ExperiencesName != null)
                    hashCode = hashCode * 59 + ExperiencesName.GetHashCode();
                    
                    hashCode = hashCode * 59 + GeoCheckinEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + AuthType.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowParentsOnStudentProfile.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasBusinessPartnerPortal.GetHashCode();
                    if (NumericalGradeMappings != null)
                    hashCode = hashCode * 59 + NumericalGradeMappings.GetHashCode();
                    
                    hashCode = hashCode * 59 + AttendanceEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + DisableStudentSeals.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServeSponsorEmailsInTable.GetHashCode();
                    if (MaximumTagsOnServiceEvent != null)
                    hashCode = hashCode * 59 + MaximumTagsOnServiceEvent.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShouldShowEventsInBusinessPartnerPortal.GetHashCode();
                    if (ContactCustomFormId != null)
                    hashCode = hashCode * 59 + ContactCustomFormId.GetHashCode();
                    
                    hashCode = hashCode * 59 + JourneyIsShutDown.GetHashCode();
                    
                    hashCode = hashCode * 59 + JourneyIsSunset.GetHashCode();
                    if (ActivityApplicationFormId != null)
                    hashCode = hashCode * 59 + ActivityApplicationFormId.GetHashCode();
                    
                    hashCode = hashCode * 59 + CollegeIsSunset.GetHashCode();
                    if (DashboardText != null)
                    hashCode = hashCode * 59 + DashboardText.GetHashCode();
                    if (ExternalAccountReferenceId != null)
                    hashCode = hashCode * 59 + ExternalAccountReferenceId.GetHashCode();
                    
                    hashCode = hashCode * 59 + TeachersCanViewEntities.GetHashCode();
                    if (OrganizationsName != null)
                    hashCode = hashCode * 59 + OrganizationsName.GetHashCode();
                    if (Products != null)
                    hashCode = hashCode * 59 + Products.GetHashCode();
                    if (OptionalFormId != null)
                    hashCode = hashCode * 59 + OptionalFormId.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsCollegeCounselor.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanDeleteStudents.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowStudentOverallMetrics.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServiceProposalEnabled.GetHashCode();
                    if (ExperienceCustomFormId != null)
                    hashCode = hashCode * 59 + ExperienceCustomFormId.GetHashCode();
                    if (DistrictName != null)
                    hashCode = hashCode * 59 + DistrictName.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowStudentReports.GetHashCode();
                    
                    hashCode = hashCode * 59 + StudentsCanSubmitEntities.GetHashCode();
                    
                    hashCode = hashCode * 59 + CustomQueriesEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsTranseoAdmin.GetHashCode();
                    if (DistrictId != null)
                    hashCode = hashCode * 59 + DistrictId.GetHashCode();
                    if (ExperienceReflectionFormId != null)
                    hashCode = hashCode * 59 + ExperienceReflectionFormId.GetHashCode();
                    if (JourneyTier != null)
                    hashCode = hashCode * 59 + JourneyTier.GetHashCode();
                    
                    hashCode = hashCode * 59 + DisableShiftsOnStudentSide.GetHashCode();
                    
                    hashCode = hashCode * 59 + ParchmentEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsDistrictSuperUser.GetHashCode();
                    
                    hashCode = hashCode * 59 + TasksBelowBadges.GetHashCode();
                    if (IntercomToken != null)
                    hashCode = hashCode * 59 + IntercomToken.GetHashCode();
                    if (RequiredFormId != null)
                    hashCode = hashCode * 59 + RequiredFormId.GetHashCode();
                    
                    hashCode = hashCode * 59 + GeoCheckInForServeEnabled.GetHashCode();
                    if (BadgeLibraryName != null)
                    hashCode = hashCode * 59 + BadgeLibraryName.GetHashCode();
                    
                    hashCode = hashCode * 59 + AdminSealsEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanViewDeliveryCenter.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanSetEvaluationGoalsOnWorkflowForm.GetHashCode();
                    if (BragSheetsFormId != null)
                    hashCode = hashCode * 59 + BragSheetsFormId.GetHashCode();
                    if (TranscriptMatchingKey != null)
                    hashCode = hashCode * 59 + TranscriptMatchingKey.GetHashCode();
                    if (EntityPermissions != null)
                    hashCode = hashCode * 59 + EntityPermissions.GetHashCode();
                    
                    hashCode = hashCode * 59 + SuperUserCanAlsoViewPlatform.GetHashCode();
                    
                    hashCode = hashCode * 59 + CollegeIsShutDown.GetHashCode();
                    if (BusinessPartnerExperiencesText != null)
                    hashCode = hashCode * 59 + BusinessPartnerExperiencesText.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasCommonApp.GetHashCode();
                    if (GatedJobsBadge != null)
                    hashCode = hashCode * 59 + GatedJobsBadge.GetHashCode();
                    if (ExperienceApplicationFormId != null)
                    hashCode = hashCode * 59 + ExperienceApplicationFormId.GetHashCode();
                    if (ActivitiesName != null)
                    hashCode = hashCode * 59 + ActivitiesName.GetHashCode();
                    
                    hashCode = hashCode * 59 + HideShareToLinkedin.GetHashCode();
                    if (LogoUrl != null)
                    hashCode = hashCode * 59 + LogoUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsTranseoDemoDistrict.GetHashCode();
                    
                    hashCode = hashCode * 59 + BypassCollegeGradeRequirement.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowStudentJourneySidebar.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsDistrictAdmin.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SettingsControllerSettingsResponse left, SettingsControllerSettingsResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SettingsControllerSettingsResponse left, SettingsControllerSettingsResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
