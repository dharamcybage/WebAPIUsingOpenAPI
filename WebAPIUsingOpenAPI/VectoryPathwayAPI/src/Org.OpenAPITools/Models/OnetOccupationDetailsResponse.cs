/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OnetOccupationDetailsResponse : IEquatable<OnetOccupationDetailsResponse>
    {
        /// <summary>
        /// Gets or Sets Tasks
        /// </summary>
        [Required]
        [DataMember(Name="tasks", EmitDefaultValue=false)]
        public OnetOccupationDetailsResponseTasks Tasks { get; set; }

        /// <summary>
        /// Gets or Sets JobZone
        /// </summary>
        [Required]
        [DataMember(Name="job_zone", EmitDefaultValue=false)]
        public OnetOccupationDetailsResponseJobZone JobZone { get; set; }

        /// <summary>
        /// Gets or Sets Occupation
        /// </summary>
        [Required]
        [DataMember(Name="occupation", EmitDefaultValue=false)]
        public OnetOccupationDetailsResponseOccupation Occupation { get; set; }

        /// <summary>
        /// Gets or Sets RelatedOccupations
        /// </summary>
        [Required]
        [DataMember(Name="related_occupations", EmitDefaultValue=false)]
        public OnetOccupationDetailsResponseRelatedOccupation RelatedOccupations { get; set; }

        /// <summary>
        /// Gets or Sets DetailedWorkActivities
        /// </summary>
        [Required]
        [DataMember(Name="detailed_work_activities", EmitDefaultValue=false)]
        public OnetOccupationDetailsResponseDetailedWorkActivities DetailedWorkActivities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OnetOccupationDetailsResponse {\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("  JobZone: ").Append(JobZone).Append("\n");
            sb.Append("  Occupation: ").Append(Occupation).Append("\n");
            sb.Append("  RelatedOccupations: ").Append(RelatedOccupations).Append("\n");
            sb.Append("  DetailedWorkActivities: ").Append(DetailedWorkActivities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OnetOccupationDetailsResponse)obj);
        }

        /// <summary>
        /// Returns true if OnetOccupationDetailsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of OnetOccupationDetailsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnetOccupationDetailsResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Tasks == other.Tasks ||
                    Tasks != null &&
                    Tasks.Equals(other.Tasks)
                ) && 
                (
                    JobZone == other.JobZone ||
                    JobZone != null &&
                    JobZone.Equals(other.JobZone)
                ) && 
                (
                    Occupation == other.Occupation ||
                    Occupation != null &&
                    Occupation.Equals(other.Occupation)
                ) && 
                (
                    RelatedOccupations == other.RelatedOccupations ||
                    RelatedOccupations != null &&
                    RelatedOccupations.Equals(other.RelatedOccupations)
                ) && 
                (
                    DetailedWorkActivities == other.DetailedWorkActivities ||
                    DetailedWorkActivities != null &&
                    DetailedWorkActivities.Equals(other.DetailedWorkActivities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Tasks != null)
                    hashCode = hashCode * 59 + Tasks.GetHashCode();
                    if (JobZone != null)
                    hashCode = hashCode * 59 + JobZone.GetHashCode();
                    if (Occupation != null)
                    hashCode = hashCode * 59 + Occupation.GetHashCode();
                    if (RelatedOccupations != null)
                    hashCode = hashCode * 59 + RelatedOccupations.GetHashCode();
                    if (DetailedWorkActivities != null)
                    hashCode = hashCode * 59 + DetailedWorkActivities.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OnetOccupationDetailsResponse left, OnetOccupationDetailsResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OnetOccupationDetailsResponse left, OnetOccupationDetailsResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
