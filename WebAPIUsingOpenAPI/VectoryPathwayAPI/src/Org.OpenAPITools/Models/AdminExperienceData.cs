/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdminExperienceData : IEquatable<AdminExperienceData>
    {
        /// <summary>
        /// Gets or Sets IsTemplate
        /// </summary>
        [Required]
        [DataMember(Name="isTemplate", EmitDefaultValue=true)]
        public bool IsTemplate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByDistrict
        /// </summary>
        [Required]
        [DataMember(Name="createdByDistrict", EmitDefaultValue=false)]
        public string CreatedByDistrict { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public LocationDTO Location { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfStudents
        /// </summary>
        [Required]
        [DataMember(Name="numberOfStudents", EmitDefaultValue=true)]
        public long NumberOfStudents { get; set; }

        /// <summary>
        /// Gets or Sets AllowsTotalTimelogHoursSubmission
        /// </summary>
        [Required]
        [DataMember(Name="allowsTotalTimelogHoursSubmission", EmitDefaultValue=true)]
        public bool AllowsTotalTimelogHoursSubmission { get; set; }

        /// <summary>
        /// Gets or Sets AvailableDistrictIds
        /// </summary>
        [DataMember(Name="availableDistrictIds", EmitDefaultValue=true)]
        public List<long> AvailableDistrictIds { get; set; }

        /// <summary>
        /// Gets or Sets CareerClusters
        /// </summary>
        [Required]
        [DataMember(Name="careerClusters", EmitDefaultValue=false)]
        public List<CareerClusterDTO> CareerClusters { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets GeneralSkills
        /// </summary>
        [Required]
        [DataMember(Name="generalSkills", EmitDefaultValue=false)]
        public List<GeneralSkillDTO> GeneralSkills { get; set; }

        /// <summary>
        /// Gets or Sets AccommodationsAvailable
        /// </summary>
        [Required]
        [DataMember(Name="accommodationsAvailable", EmitDefaultValue=true)]
        public bool AccommodationsAvailable { get; set; }

        /// <summary>
        /// Gets or Sets ExternalCreatedByEmail
        /// </summary>
        [DataMember(Name="externalCreatedByEmail", EmitDefaultValue=true)]
        public string ExternalCreatedByEmail { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedHours
        /// </summary>
        [Required]
        [DataMember(Name="approvedHours", EmitDefaultValue=true)]
        public double ApprovedHours { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfSpots
        /// </summary>
        [DataMember(Name="numberOfSpots", EmitDefaultValue=true)]
        public long? NumberOfSpots { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceTemplateId
        /// </summary>
        [DataMember(Name="experience_template_id", EmitDefaultValue=true)]
        public long? ExperienceTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationFormId
        /// </summary>
        [DataMember(Name="application_form_id", EmitDefaultValue=true)]
        public long? ApplicationFormId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalCreatedByName
        /// </summary>
        [DataMember(Name="externalCreatedByName", EmitDefaultValue=true)]
        public string ExternalCreatedByName { get; set; }

        /// <summary>
        /// Gets or Sets AvailableSchoolIds
        /// </summary>
        [DataMember(Name="availableSchoolIds", EmitDefaultValue=true)]
        public List<long> AvailableSchoolIds { get; set; }

        /// <summary>
        /// Gets or Sets AllowStudentsToAddPayPeriods
        /// </summary>
        [Required]
        [DataMember(Name="allowStudentsToAddPayPeriods", EmitDefaultValue=true)]
        public bool AllowStudentsToAddPayPeriods { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [Required]
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public BasicContact Contact { get; set; }

        /// <summary>
        /// Gets or Sets ReflectionFormApproval
        /// </summary>
        [DataMember(Name="reflection_form_approval", EmitDefaultValue=true)]
        public long? ReflectionFormApproval { get; set; }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [Required]
        [DataMember(Name="archived", EmitDefaultValue=true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Gets or Sets ReflectionFormId
        /// </summary>
        [DataMember(Name="reflection_form_id", EmitDefaultValue=true)]
        public long? ReflectionFormId { get; set; }

        /// <summary>
        /// Gets or Sets Students
        /// </summary>
        [Required]
        [DataMember(Name="students", EmitDefaultValue=false)]
        public List<AdminExperienceDataUserData> Students { get; set; }

        /// <summary>
        /// Gets or Sets MaxNumberOfHours
        /// </summary>
        [DataMember(Name="maxNumberOfHours", EmitDefaultValue=true)]
        public double? MaxNumberOfHours { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets HideFromSearch
        /// </summary>
        [Required]
        [DataMember(Name="hideFromSearch", EmitDefaultValue=true)]
        public bool HideFromSearch { get; set; }

        /// <summary>
        /// Gets or Sets HasPayPeriods
        /// </summary>
        [Required]
        [DataMember(Name="hasPayPeriods", EmitDefaultValue=true)]
        public bool HasPayPeriods { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceText
        /// </summary>
        [DataMember(Name="experienceText", EmitDefaultValue=true)]
        public string ExperienceText { get; set; }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folder_id", EmitDefaultValue=true)]
        public long? FolderId { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [Required]
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public OrganizationDTO Organization { get; set; }

        /// <summary>
        /// Gets or Sets LearningTargetId
        /// </summary>
        [DataMember(Name="learning_target_id", EmitDefaultValue=true)]
        public long? LearningTargetId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ShowsOnExternalJobBoard
        /// </summary>
        [Required]
        [DataMember(Name="showsOnExternalJobBoard", EmitDefaultValue=true)]
        public bool ShowsOnExternalJobBoard { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public FormSubmissionResponse CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets SpecificSkills
        /// </summary>
        [Required]
        [DataMember(Name="specificSkills", EmitDefaultValue=false)]
        public List<SpecificSkillDTO> SpecificSkills { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets CompletedStudents
        /// </summary>
        [Required]
        [DataMember(Name="completedStudents", EmitDefaultValue=false)]
        public List<AdminExperienceDataUserData> CompletedStudents { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByName
        /// </summary>
        [Required]
        [DataMember(Name="createdByName", EmitDefaultValue=false)]
        public string CreatedByName { get; set; }

        /// <summary>
        /// Gets or Sets CanGeoLog
        /// </summary>
        [Required]
        [DataMember(Name="canGeoLog", EmitDefaultValue=true)]
        public bool CanGeoLog { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [Required]
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<TagDTO> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Licenses
        /// </summary>
        [Required]
        [DataMember(Name="licenses", EmitDefaultValue=false)]
        public List<LicenseDTO> Licenses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminExperienceData {\n");
            sb.Append("  IsTemplate: ").Append(IsTemplate).Append("\n");
            sb.Append("  CreatedByDistrict: ").Append(CreatedByDistrict).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  NumberOfStudents: ").Append(NumberOfStudents).Append("\n");
            sb.Append("  AllowsTotalTimelogHoursSubmission: ").Append(AllowsTotalTimelogHoursSubmission).Append("\n");
            sb.Append("  AvailableDistrictIds: ").Append(AvailableDistrictIds).Append("\n");
            sb.Append("  CareerClusters: ").Append(CareerClusters).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  GeneralSkills: ").Append(GeneralSkills).Append("\n");
            sb.Append("  AccommodationsAvailable: ").Append(AccommodationsAvailable).Append("\n");
            sb.Append("  ExternalCreatedByEmail: ").Append(ExternalCreatedByEmail).Append("\n");
            sb.Append("  ApprovedHours: ").Append(ApprovedHours).Append("\n");
            sb.Append("  NumberOfSpots: ").Append(NumberOfSpots).Append("\n");
            sb.Append("  ExperienceTemplateId: ").Append(ExperienceTemplateId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ApplicationFormId: ").Append(ApplicationFormId).Append("\n");
            sb.Append("  ExternalCreatedByName: ").Append(ExternalCreatedByName).Append("\n");
            sb.Append("  AvailableSchoolIds: ").Append(AvailableSchoolIds).Append("\n");
            sb.Append("  AllowStudentsToAddPayPeriods: ").Append(AllowStudentsToAddPayPeriods).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  ReflectionFormApproval: ").Append(ReflectionFormApproval).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  ReflectionFormId: ").Append(ReflectionFormId).Append("\n");
            sb.Append("  Students: ").Append(Students).Append("\n");
            sb.Append("  MaxNumberOfHours: ").Append(MaxNumberOfHours).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  HideFromSearch: ").Append(HideFromSearch).Append("\n");
            sb.Append("  HasPayPeriods: ").Append(HasPayPeriods).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ExperienceText: ").Append(ExperienceText).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  LearningTargetId: ").Append(LearningTargetId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ShowsOnExternalJobBoard: ").Append(ShowsOnExternalJobBoard).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  SpecificSkills: ").Append(SpecificSkills).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  CompletedStudents: ").Append(CompletedStudents).Append("\n");
            sb.Append("  CreatedByName: ").Append(CreatedByName).Append("\n");
            sb.Append("  CanGeoLog: ").Append(CanGeoLog).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Licenses: ").Append(Licenses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdminExperienceData)obj);
        }

        /// <summary>
        /// Returns true if AdminExperienceData instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminExperienceData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminExperienceData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsTemplate == other.IsTemplate ||
                    
                    IsTemplate.Equals(other.IsTemplate)
                ) && 
                (
                    CreatedByDistrict == other.CreatedByDistrict ||
                    CreatedByDistrict != null &&
                    CreatedByDistrict.Equals(other.CreatedByDistrict)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    NumberOfStudents == other.NumberOfStudents ||
                    
                    NumberOfStudents.Equals(other.NumberOfStudents)
                ) && 
                (
                    AllowsTotalTimelogHoursSubmission == other.AllowsTotalTimelogHoursSubmission ||
                    
                    AllowsTotalTimelogHoursSubmission.Equals(other.AllowsTotalTimelogHoursSubmission)
                ) && 
                (
                    AvailableDistrictIds == other.AvailableDistrictIds ||
                    AvailableDistrictIds != null &&
                    other.AvailableDistrictIds != null &&
                    AvailableDistrictIds.SequenceEqual(other.AvailableDistrictIds)
                ) && 
                (
                    CareerClusters == other.CareerClusters ||
                    CareerClusters != null &&
                    other.CareerClusters != null &&
                    CareerClusters.SequenceEqual(other.CareerClusters)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    GeneralSkills == other.GeneralSkills ||
                    GeneralSkills != null &&
                    other.GeneralSkills != null &&
                    GeneralSkills.SequenceEqual(other.GeneralSkills)
                ) && 
                (
                    AccommodationsAvailable == other.AccommodationsAvailable ||
                    
                    AccommodationsAvailable.Equals(other.AccommodationsAvailable)
                ) && 
                (
                    ExternalCreatedByEmail == other.ExternalCreatedByEmail ||
                    ExternalCreatedByEmail != null &&
                    ExternalCreatedByEmail.Equals(other.ExternalCreatedByEmail)
                ) && 
                (
                    ApprovedHours == other.ApprovedHours ||
                    
                    ApprovedHours.Equals(other.ApprovedHours)
                ) && 
                (
                    NumberOfSpots == other.NumberOfSpots ||
                    NumberOfSpots != null &&
                    NumberOfSpots.Equals(other.NumberOfSpots)
                ) && 
                (
                    ExperienceTemplateId == other.ExperienceTemplateId ||
                    ExperienceTemplateId != null &&
                    ExperienceTemplateId.Equals(other.ExperienceTemplateId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ApplicationFormId == other.ApplicationFormId ||
                    ApplicationFormId != null &&
                    ApplicationFormId.Equals(other.ApplicationFormId)
                ) && 
                (
                    ExternalCreatedByName == other.ExternalCreatedByName ||
                    ExternalCreatedByName != null &&
                    ExternalCreatedByName.Equals(other.ExternalCreatedByName)
                ) && 
                (
                    AvailableSchoolIds == other.AvailableSchoolIds ||
                    AvailableSchoolIds != null &&
                    other.AvailableSchoolIds != null &&
                    AvailableSchoolIds.SequenceEqual(other.AvailableSchoolIds)
                ) && 
                (
                    AllowStudentsToAddPayPeriods == other.AllowStudentsToAddPayPeriods ||
                    
                    AllowStudentsToAddPayPeriods.Equals(other.AllowStudentsToAddPayPeriods)
                ) && 
                (
                    Contact == other.Contact ||
                    Contact != null &&
                    Contact.Equals(other.Contact)
                ) && 
                (
                    ReflectionFormApproval == other.ReflectionFormApproval ||
                    ReflectionFormApproval != null &&
                    ReflectionFormApproval.Equals(other.ReflectionFormApproval)
                ) && 
                (
                    Archived == other.Archived ||
                    
                    Archived.Equals(other.Archived)
                ) && 
                (
                    ReflectionFormId == other.ReflectionFormId ||
                    ReflectionFormId != null &&
                    ReflectionFormId.Equals(other.ReflectionFormId)
                ) && 
                (
                    Students == other.Students ||
                    Students != null &&
                    other.Students != null &&
                    Students.SequenceEqual(other.Students)
                ) && 
                (
                    MaxNumberOfHours == other.MaxNumberOfHours ||
                    MaxNumberOfHours != null &&
                    MaxNumberOfHours.Equals(other.MaxNumberOfHours)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    HideFromSearch == other.HideFromSearch ||
                    
                    HideFromSearch.Equals(other.HideFromSearch)
                ) && 
                (
                    HasPayPeriods == other.HasPayPeriods ||
                    
                    HasPayPeriods.Equals(other.HasPayPeriods)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    ExperienceText == other.ExperienceText ||
                    ExperienceText != null &&
                    ExperienceText.Equals(other.ExperienceText)
                ) && 
                (
                    FolderId == other.FolderId ||
                    FolderId != null &&
                    FolderId.Equals(other.FolderId)
                ) && 
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.Equals(other.Organization)
                ) && 
                (
                    LearningTargetId == other.LearningTargetId ||
                    LearningTargetId != null &&
                    LearningTargetId.Equals(other.LearningTargetId)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    ShowsOnExternalJobBoard == other.ShowsOnExternalJobBoard ||
                    
                    ShowsOnExternalJobBoard.Equals(other.ShowsOnExternalJobBoard)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    SpecificSkills == other.SpecificSkills ||
                    SpecificSkills != null &&
                    other.SpecificSkills != null &&
                    SpecificSkills.SequenceEqual(other.SpecificSkills)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    CompletedStudents == other.CompletedStudents ||
                    CompletedStudents != null &&
                    other.CompletedStudents != null &&
                    CompletedStudents.SequenceEqual(other.CompletedStudents)
                ) && 
                (
                    CreatedByName == other.CreatedByName ||
                    CreatedByName != null &&
                    CreatedByName.Equals(other.CreatedByName)
                ) && 
                (
                    CanGeoLog == other.CanGeoLog ||
                    
                    CanGeoLog.Equals(other.CanGeoLog)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Licenses == other.Licenses ||
                    Licenses != null &&
                    other.Licenses != null &&
                    Licenses.SequenceEqual(other.Licenses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + IsTemplate.GetHashCode();
                    if (CreatedByDistrict != null)
                    hashCode = hashCode * 59 + CreatedByDistrict.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumberOfStudents.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowsTotalTimelogHoursSubmission.GetHashCode();
                    if (AvailableDistrictIds != null)
                    hashCode = hashCode * 59 + AvailableDistrictIds.GetHashCode();
                    if (CareerClusters != null)
                    hashCode = hashCode * 59 + CareerClusters.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (GeneralSkills != null)
                    hashCode = hashCode * 59 + GeneralSkills.GetHashCode();
                    
                    hashCode = hashCode * 59 + AccommodationsAvailable.GetHashCode();
                    if (ExternalCreatedByEmail != null)
                    hashCode = hashCode * 59 + ExternalCreatedByEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApprovedHours.GetHashCode();
                    if (NumberOfSpots != null)
                    hashCode = hashCode * 59 + NumberOfSpots.GetHashCode();
                    if (ExperienceTemplateId != null)
                    hashCode = hashCode * 59 + ExperienceTemplateId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ApplicationFormId != null)
                    hashCode = hashCode * 59 + ApplicationFormId.GetHashCode();
                    if (ExternalCreatedByName != null)
                    hashCode = hashCode * 59 + ExternalCreatedByName.GetHashCode();
                    if (AvailableSchoolIds != null)
                    hashCode = hashCode * 59 + AvailableSchoolIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowStudentsToAddPayPeriods.GetHashCode();
                    if (Contact != null)
                    hashCode = hashCode * 59 + Contact.GetHashCode();
                    if (ReflectionFormApproval != null)
                    hashCode = hashCode * 59 + ReflectionFormApproval.GetHashCode();
                    
                    hashCode = hashCode * 59 + Archived.GetHashCode();
                    if (ReflectionFormId != null)
                    hashCode = hashCode * 59 + ReflectionFormId.GetHashCode();
                    if (Students != null)
                    hashCode = hashCode * 59 + Students.GetHashCode();
                    if (MaxNumberOfHours != null)
                    hashCode = hashCode * 59 + MaxNumberOfHours.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + HideFromSearch.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasPayPeriods.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (ExperienceText != null)
                    hashCode = hashCode * 59 + ExperienceText.GetHashCode();
                    if (FolderId != null)
                    hashCode = hashCode * 59 + FolderId.GetHashCode();
                    if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (LearningTargetId != null)
                    hashCode = hashCode * 59 + LearningTargetId.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowsOnExternalJobBoard.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (SpecificSkills != null)
                    hashCode = hashCode * 59 + SpecificSkills.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (CompletedStudents != null)
                    hashCode = hashCode * 59 + CompletedStudents.GetHashCode();
                    if (CreatedByName != null)
                    hashCode = hashCode * 59 + CreatedByName.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanGeoLog.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (Licenses != null)
                    hashCode = hashCode * 59 + Licenses.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdminExperienceData left, AdminExperienceData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdminExperienceData left, AdminExperienceData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
