/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StudentSelfProfileResponse : IEquatable<StudentSelfProfileResponse>
    {
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [Required]
        [DataMember(Name="user", EmitDefaultValue=false)]
        public BasicUser User { get; set; }

        /// <summary>
        /// Gets or Sets Forms
        /// </summary>
        [Required]
        [DataMember(Name="forms", EmitDefaultValue=false)]
        public List<StudentProfileResponseFormData> Forms { get; set; }

        /// <summary>
        /// Gets or Sets CanUpdateCluster
        /// </summary>
        [Required]
        [DataMember(Name="canUpdateCluster", EmitDefaultValue=true)]
        public bool CanUpdateCluster { get; set; }

        /// <summary>
        /// Gets or Sets PendingHours
        /// </summary>
        [Required]
        [DataMember(Name="pendingHours", EmitDefaultValue=true)]
        public double PendingHours { get; set; }

        /// <summary>
        /// Gets or Sets OptionalProfileSubmission
        /// </summary>
        [DataMember(Name="optionalProfileSubmission", EmitDefaultValue=true)]
        public long? OptionalProfileSubmission { get; set; }

        /// <summary>
        /// Gets or Sets Parents
        /// </summary>
        [Required]
        [DataMember(Name="parents", EmitDefaultValue=false)]
        public List<UserParentDTO> Parents { get; set; }

        /// <summary>
        /// Gets or Sets RejectedActivities
        /// </summary>
        [Required]
        [DataMember(Name="rejectedActivities", EmitDefaultValue=false)]
        public List<ActivityDTO> RejectedActivities { get; set; }

        /// <summary>
        /// Gets or Sets PendingExperiences
        /// </summary>
        [Required]
        [DataMember(Name="pendingExperiences", EmitDefaultValue=false)]
        public List<ExperienceDTO> PendingExperiences { get; set; }

        /// <summary>
        /// Gets or Sets Cluster
        /// </summary>
        [Required]
        [DataMember(Name="cluster", EmitDefaultValue=false)]
        public string Cluster { get; set; }

        /// <summary>
        /// Gets or Sets Grades
        /// </summary>
        [Required]
        [DataMember(Name="grades", EmitDefaultValue=false)]
        public List<StudentProfileResponseAssignmentGrade> Grades { get; set; }

        /// <summary>
        /// Gets or Sets RejectedExperiences
        /// </summary>
        [Required]
        [DataMember(Name="rejectedExperiences", EmitDefaultValue=false)]
        public List<ExperienceDTO> RejectedExperiences { get; set; }

        /// <summary>
        /// Gets or Sets RequiredProfileSubmission
        /// </summary>
        [DataMember(Name="requiredProfileSubmission", EmitDefaultValue=true)]
        public long? RequiredProfileSubmission { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentSelfProfileResponse {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Forms: ").Append(Forms).Append("\n");
            sb.Append("  CanUpdateCluster: ").Append(CanUpdateCluster).Append("\n");
            sb.Append("  PendingHours: ").Append(PendingHours).Append("\n");
            sb.Append("  OptionalProfileSubmission: ").Append(OptionalProfileSubmission).Append("\n");
            sb.Append("  Parents: ").Append(Parents).Append("\n");
            sb.Append("  RejectedActivities: ").Append(RejectedActivities).Append("\n");
            sb.Append("  PendingExperiences: ").Append(PendingExperiences).Append("\n");
            sb.Append("  Cluster: ").Append(Cluster).Append("\n");
            sb.Append("  Grades: ").Append(Grades).Append("\n");
            sb.Append("  RejectedExperiences: ").Append(RejectedExperiences).Append("\n");
            sb.Append("  RequiredProfileSubmission: ").Append(RequiredProfileSubmission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StudentSelfProfileResponse)obj);
        }

        /// <summary>
        /// Returns true if StudentSelfProfileResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of StudentSelfProfileResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentSelfProfileResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    Forms == other.Forms ||
                    Forms != null &&
                    other.Forms != null &&
                    Forms.SequenceEqual(other.Forms)
                ) && 
                (
                    CanUpdateCluster == other.CanUpdateCluster ||
                    
                    CanUpdateCluster.Equals(other.CanUpdateCluster)
                ) && 
                (
                    PendingHours == other.PendingHours ||
                    
                    PendingHours.Equals(other.PendingHours)
                ) && 
                (
                    OptionalProfileSubmission == other.OptionalProfileSubmission ||
                    OptionalProfileSubmission != null &&
                    OptionalProfileSubmission.Equals(other.OptionalProfileSubmission)
                ) && 
                (
                    Parents == other.Parents ||
                    Parents != null &&
                    other.Parents != null &&
                    Parents.SequenceEqual(other.Parents)
                ) && 
                (
                    RejectedActivities == other.RejectedActivities ||
                    RejectedActivities != null &&
                    other.RejectedActivities != null &&
                    RejectedActivities.SequenceEqual(other.RejectedActivities)
                ) && 
                (
                    PendingExperiences == other.PendingExperiences ||
                    PendingExperiences != null &&
                    other.PendingExperiences != null &&
                    PendingExperiences.SequenceEqual(other.PendingExperiences)
                ) && 
                (
                    Cluster == other.Cluster ||
                    Cluster != null &&
                    Cluster.Equals(other.Cluster)
                ) && 
                (
                    Grades == other.Grades ||
                    Grades != null &&
                    other.Grades != null &&
                    Grades.SequenceEqual(other.Grades)
                ) && 
                (
                    RejectedExperiences == other.RejectedExperiences ||
                    RejectedExperiences != null &&
                    other.RejectedExperiences != null &&
                    RejectedExperiences.SequenceEqual(other.RejectedExperiences)
                ) && 
                (
                    RequiredProfileSubmission == other.RequiredProfileSubmission ||
                    RequiredProfileSubmission != null &&
                    RequiredProfileSubmission.Equals(other.RequiredProfileSubmission)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (Forms != null)
                    hashCode = hashCode * 59 + Forms.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanUpdateCluster.GetHashCode();
                    
                    hashCode = hashCode * 59 + PendingHours.GetHashCode();
                    if (OptionalProfileSubmission != null)
                    hashCode = hashCode * 59 + OptionalProfileSubmission.GetHashCode();
                    if (Parents != null)
                    hashCode = hashCode * 59 + Parents.GetHashCode();
                    if (RejectedActivities != null)
                    hashCode = hashCode * 59 + RejectedActivities.GetHashCode();
                    if (PendingExperiences != null)
                    hashCode = hashCode * 59 + PendingExperiences.GetHashCode();
                    if (Cluster != null)
                    hashCode = hashCode * 59 + Cluster.GetHashCode();
                    if (Grades != null)
                    hashCode = hashCode * 59 + Grades.GetHashCode();
                    if (RejectedExperiences != null)
                    hashCode = hashCode * 59 + RejectedExperiences.GetHashCode();
                    if (RequiredProfileSubmission != null)
                    hashCode = hashCode * 59 + RequiredProfileSubmission.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StudentSelfProfileResponse left, StudentSelfProfileResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StudentSelfProfileResponse left, StudentSelfProfileResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
