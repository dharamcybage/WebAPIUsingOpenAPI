/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CoCurricularEventsControllerCreateExternalCoCurricularEventRequest : IEquatable<CoCurricularEventsControllerCreateExternalCoCurricularEventRequest>
    {
        /// <summary>
        /// Gets or Sets SchoolIds
        /// </summary>
        [Required]
        [DataMember(Name="schoolIds", EmitDefaultValue=false)]
        public List<long> SchoolIds { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [Required]
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RepetitionIteration
        /// </summary>
        [DataMember(Name="repetitionIteration", EmitDefaultValue=true)]
        public long? RepetitionIteration { get; set; }

        /// <summary>
        /// Gets or Sets CoCurricularEventTypeID
        /// </summary>
        [DataMember(Name="coCurricularEventTypeID", EmitDefaultValue=true)]
        public long? CoCurricularEventTypeID { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [Required]
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Shifts
        /// </summary>
        [Required]
        [DataMember(Name="shifts", EmitDefaultValue=false)]
        public List<ExternalCoCurricularEventSubmissionShift> Shifts { get; set; }

        /// <summary>
        /// Gets or Sets MaxNumberOfStudents
        /// </summary>
        [DataMember(Name="maxNumberOfStudents", EmitDefaultValue=true)]
        public long? MaxNumberOfStudents { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [Required]
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationType
        /// </summary>
        [Required]
        [DataMember(Name="registrationType", EmitDefaultValue=true)]
        public long RegistrationType { get; set; }

        /// <summary>
        /// Gets or Sets RepetitionType
        /// </summary>
        [Required]
        [DataMember(Name="repetitionType", EmitDefaultValue=true)]
        public long RepetitionType { get; set; }

        /// <summary>
        /// Gets or Sets ExternalContactEmail
        /// </summary>
        [Required]
        [DataMember(Name="externalContactEmail", EmitDefaultValue=false)]
        public string ExternalContactEmail { get; set; }

        /// <summary>
        /// Gets or Sets IsAllDay
        /// </summary>
        [Required]
        [DataMember(Name="isAllDay", EmitDefaultValue=true)]
        public bool IsAllDay { get; set; }

        /// <summary>
        /// Gets or Sets ExternalContactName
        /// </summary>
        [Required]
        [DataMember(Name="externalContactName", EmitDefaultValue=false)]
        public string ExternalContactName { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationID
        /// </summary>
        [DataMember(Name="organizationID", EmitDefaultValue=true)]
        public long? OrganizationID { get; set; }

        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public CoCurricularEventsControllerCreateExternalCoCurricularEventRequestFile File { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoCurricularEventsControllerCreateExternalCoCurricularEventRequest {\n");
            sb.Append("  SchoolIds: ").Append(SchoolIds).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RepetitionIteration: ").Append(RepetitionIteration).Append("\n");
            sb.Append("  CoCurricularEventTypeID: ").Append(CoCurricularEventTypeID).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Shifts: ").Append(Shifts).Append("\n");
            sb.Append("  MaxNumberOfStudents: ").Append(MaxNumberOfStudents).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RegistrationType: ").Append(RegistrationType).Append("\n");
            sb.Append("  RepetitionType: ").Append(RepetitionType).Append("\n");
            sb.Append("  ExternalContactEmail: ").Append(ExternalContactEmail).Append("\n");
            sb.Append("  IsAllDay: ").Append(IsAllDay).Append("\n");
            sb.Append("  ExternalContactName: ").Append(ExternalContactName).Append("\n");
            sb.Append("  OrganizationID: ").Append(OrganizationID).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CoCurricularEventsControllerCreateExternalCoCurricularEventRequest)obj);
        }

        /// <summary>
        /// Returns true if CoCurricularEventsControllerCreateExternalCoCurricularEventRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CoCurricularEventsControllerCreateExternalCoCurricularEventRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoCurricularEventsControllerCreateExternalCoCurricularEventRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SchoolIds == other.SchoolIds ||
                    SchoolIds != null &&
                    other.SchoolIds != null &&
                    SchoolIds.SequenceEqual(other.SchoolIds)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    RepetitionIteration == other.RepetitionIteration ||
                    RepetitionIteration != null &&
                    RepetitionIteration.Equals(other.RepetitionIteration)
                ) && 
                (
                    CoCurricularEventTypeID == other.CoCurricularEventTypeID ||
                    CoCurricularEventTypeID != null &&
                    CoCurricularEventTypeID.Equals(other.CoCurricularEventTypeID)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    Shifts == other.Shifts ||
                    Shifts != null &&
                    other.Shifts != null &&
                    Shifts.SequenceEqual(other.Shifts)
                ) && 
                (
                    MaxNumberOfStudents == other.MaxNumberOfStudents ||
                    MaxNumberOfStudents != null &&
                    MaxNumberOfStudents.Equals(other.MaxNumberOfStudents)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    RegistrationType == other.RegistrationType ||
                    
                    RegistrationType.Equals(other.RegistrationType)
                ) && 
                (
                    RepetitionType == other.RepetitionType ||
                    
                    RepetitionType.Equals(other.RepetitionType)
                ) && 
                (
                    ExternalContactEmail == other.ExternalContactEmail ||
                    ExternalContactEmail != null &&
                    ExternalContactEmail.Equals(other.ExternalContactEmail)
                ) && 
                (
                    IsAllDay == other.IsAllDay ||
                    
                    IsAllDay.Equals(other.IsAllDay)
                ) && 
                (
                    ExternalContactName == other.ExternalContactName ||
                    ExternalContactName != null &&
                    ExternalContactName.Equals(other.ExternalContactName)
                ) && 
                (
                    OrganizationID == other.OrganizationID ||
                    OrganizationID != null &&
                    OrganizationID.Equals(other.OrganizationID)
                ) && 
                (
                    File == other.File ||
                    File != null &&
                    File.Equals(other.File)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SchoolIds != null)
                    hashCode = hashCode * 59 + SchoolIds.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (RepetitionIteration != null)
                    hashCode = hashCode * 59 + RepetitionIteration.GetHashCode();
                    if (CoCurricularEventTypeID != null)
                    hashCode = hashCode * 59 + CoCurricularEventTypeID.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (Shifts != null)
                    hashCode = hashCode * 59 + Shifts.GetHashCode();
                    if (MaxNumberOfStudents != null)
                    hashCode = hashCode * 59 + MaxNumberOfStudents.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + RegistrationType.GetHashCode();
                    
                    hashCode = hashCode * 59 + RepetitionType.GetHashCode();
                    if (ExternalContactEmail != null)
                    hashCode = hashCode * 59 + ExternalContactEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsAllDay.GetHashCode();
                    if (ExternalContactName != null)
                    hashCode = hashCode * 59 + ExternalContactName.GetHashCode();
                    if (OrganizationID != null)
                    hashCode = hashCode * 59 + OrganizationID.GetHashCode();
                    if (File != null)
                    hashCode = hashCode * 59 + File.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CoCurricularEventsControllerCreateExternalCoCurricularEventRequest left, CoCurricularEventsControllerCreateExternalCoCurricularEventRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CoCurricularEventsControllerCreateExternalCoCurricularEventRequest left, CoCurricularEventsControllerCreateExternalCoCurricularEventRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
