/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OccupationDetailsResponse : IEquatable<OccupationDetailsResponse>
    {
        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [Required]
        [DataMember(Name="details", EmitDefaultValue=false)]
        public OnetOccupationDetailsResponse Details { get; set; }

        /// <summary>
        /// Gets or Sets Map
        /// </summary>
        [Required]
        [DataMember(Name="map", EmitDefaultValue=false)]
        public OccupationDetailsResponseMapData Map { get; set; }

        /// <summary>
        /// Gets or Sets InList
        /// </summary>
        [Required]
        [DataMember(Name="inList", EmitDefaultValue=true)]
        public bool InList { get; set; }

        /// <summary>
        /// Gets or Sets ExtraVideoLinks
        /// </summary>
        [Required]
        [DataMember(Name="extraVideoLinks", EmitDefaultValue=false)]
        public List<OccupationDetailsResponseOccupationExtraVideoResponse> ExtraVideoLinks { get; set; }

        /// <summary>
        /// Gets or Sets VideoLink
        /// </summary>
        [DataMember(Name="videoLink", EmitDefaultValue=true)]
        public string VideoLink { get; set; }

        /// <summary>
        /// Gets or Sets Outlook
        /// </summary>
        [Required]
        [DataMember(Name="outlook", EmitDefaultValue=false)]
        public MyNextMoveOccupationResponse Outlook { get; set; }

        /// <summary>
        /// Gets or Sets RichText
        /// </summary>
        [DataMember(Name="richText", EmitDefaultValue=true)]
        public string RichText { get; set; }

        /// <summary>
        /// Gets or Sets CareerClusterId
        /// </summary>
        [DataMember(Name="careerClusterId", EmitDefaultValue=true)]
        public string CareerClusterId { get; set; }

        /// <summary>
        /// Gets or Sets FamilyCode
        /// </summary>
        [DataMember(Name="familyCode", EmitDefaultValue=true)]
        public string FamilyCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OccupationDetailsResponse {\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  InList: ").Append(InList).Append("\n");
            sb.Append("  ExtraVideoLinks: ").Append(ExtraVideoLinks).Append("\n");
            sb.Append("  VideoLink: ").Append(VideoLink).Append("\n");
            sb.Append("  Outlook: ").Append(Outlook).Append("\n");
            sb.Append("  RichText: ").Append(RichText).Append("\n");
            sb.Append("  CareerClusterId: ").Append(CareerClusterId).Append("\n");
            sb.Append("  FamilyCode: ").Append(FamilyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OccupationDetailsResponse)obj);
        }

        /// <summary>
        /// Returns true if OccupationDetailsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of OccupationDetailsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OccupationDetailsResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Details == other.Details ||
                    Details != null &&
                    Details.Equals(other.Details)
                ) && 
                (
                    Map == other.Map ||
                    Map != null &&
                    Map.Equals(other.Map)
                ) && 
                (
                    InList == other.InList ||
                    
                    InList.Equals(other.InList)
                ) && 
                (
                    ExtraVideoLinks == other.ExtraVideoLinks ||
                    ExtraVideoLinks != null &&
                    other.ExtraVideoLinks != null &&
                    ExtraVideoLinks.SequenceEqual(other.ExtraVideoLinks)
                ) && 
                (
                    VideoLink == other.VideoLink ||
                    VideoLink != null &&
                    VideoLink.Equals(other.VideoLink)
                ) && 
                (
                    Outlook == other.Outlook ||
                    Outlook != null &&
                    Outlook.Equals(other.Outlook)
                ) && 
                (
                    RichText == other.RichText ||
                    RichText != null &&
                    RichText.Equals(other.RichText)
                ) && 
                (
                    CareerClusterId == other.CareerClusterId ||
                    CareerClusterId != null &&
                    CareerClusterId.Equals(other.CareerClusterId)
                ) && 
                (
                    FamilyCode == other.FamilyCode ||
                    FamilyCode != null &&
                    FamilyCode.Equals(other.FamilyCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                    if (Map != null)
                    hashCode = hashCode * 59 + Map.GetHashCode();
                    
                    hashCode = hashCode * 59 + InList.GetHashCode();
                    if (ExtraVideoLinks != null)
                    hashCode = hashCode * 59 + ExtraVideoLinks.GetHashCode();
                    if (VideoLink != null)
                    hashCode = hashCode * 59 + VideoLink.GetHashCode();
                    if (Outlook != null)
                    hashCode = hashCode * 59 + Outlook.GetHashCode();
                    if (RichText != null)
                    hashCode = hashCode * 59 + RichText.GetHashCode();
                    if (CareerClusterId != null)
                    hashCode = hashCode * 59 + CareerClusterId.GetHashCode();
                    if (FamilyCode != null)
                    hashCode = hashCode * 59 + FamilyCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OccupationDetailsResponse left, OccupationDetailsResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OccupationDetailsResponse left, OccupationDetailsResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
