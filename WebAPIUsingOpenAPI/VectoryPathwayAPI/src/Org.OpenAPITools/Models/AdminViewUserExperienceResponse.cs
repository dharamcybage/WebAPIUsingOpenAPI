/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdminViewUserExperienceResponse : IEquatable<AdminViewUserExperienceResponse>
    {
        /// <summary>
        /// Gets or Sets IsEnded
        /// </summary>
        [Required]
        [DataMember(Name="isEnded", EmitDefaultValue=true)]
        public bool IsEnded { get; set; }

        /// <summary>
        /// Gets or Sets AllShifts
        /// </summary>
        [Required]
        [DataMember(Name="allShifts", EmitDefaultValue=false)]
        public List<ShiftDTO> AllShifts { get; set; }

        /// <summary>
        /// Gets or Sets CurrentlyRunningShift
        /// </summary>
        [DataMember(Name="currentlyRunningShift", EmitDefaultValue=false)]
        public TimeLogDTO CurrentlyRunningShift { get; set; }

        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [Required]
        [DataMember(Name="approved", EmitDefaultValue=true)]
        public bool Approved { get; set; }

        /// <summary>
        /// Gets or Sets Student
        /// </summary>
        [Required]
        [DataMember(Name="student", EmitDefaultValue=false)]
        public BasicUser Student { get; set; }

        /// <summary>
        /// Gets or Sets Experience
        /// </summary>
        [Required]
        [DataMember(Name="experience", EmitDefaultValue=false)]
        public ExperienceDTO Experience { get; set; }

        /// <summary>
        /// Gets or Sets SiteVisits
        /// </summary>
        [Required]
        [DataMember(Name="siteVisits", EmitDefaultValue=false)]
        public List<AdminViewUserExperienceResponseSiteVisitData> SiteVisits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminViewUserExperienceResponse {\n");
            sb.Append("  IsEnded: ").Append(IsEnded).Append("\n");
            sb.Append("  AllShifts: ").Append(AllShifts).Append("\n");
            sb.Append("  CurrentlyRunningShift: ").Append(CurrentlyRunningShift).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  Student: ").Append(Student).Append("\n");
            sb.Append("  Experience: ").Append(Experience).Append("\n");
            sb.Append("  SiteVisits: ").Append(SiteVisits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdminViewUserExperienceResponse)obj);
        }

        /// <summary>
        /// Returns true if AdminViewUserExperienceResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminViewUserExperienceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminViewUserExperienceResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsEnded == other.IsEnded ||
                    
                    IsEnded.Equals(other.IsEnded)
                ) && 
                (
                    AllShifts == other.AllShifts ||
                    AllShifts != null &&
                    other.AllShifts != null &&
                    AllShifts.SequenceEqual(other.AllShifts)
                ) && 
                (
                    CurrentlyRunningShift == other.CurrentlyRunningShift ||
                    CurrentlyRunningShift != null &&
                    CurrentlyRunningShift.Equals(other.CurrentlyRunningShift)
                ) && 
                (
                    Approved == other.Approved ||
                    
                    Approved.Equals(other.Approved)
                ) && 
                (
                    Student == other.Student ||
                    Student != null &&
                    Student.Equals(other.Student)
                ) && 
                (
                    Experience == other.Experience ||
                    Experience != null &&
                    Experience.Equals(other.Experience)
                ) && 
                (
                    SiteVisits == other.SiteVisits ||
                    SiteVisits != null &&
                    other.SiteVisits != null &&
                    SiteVisits.SequenceEqual(other.SiteVisits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + IsEnded.GetHashCode();
                    if (AllShifts != null)
                    hashCode = hashCode * 59 + AllShifts.GetHashCode();
                    if (CurrentlyRunningShift != null)
                    hashCode = hashCode * 59 + CurrentlyRunningShift.GetHashCode();
                    
                    hashCode = hashCode * 59 + Approved.GetHashCode();
                    if (Student != null)
                    hashCode = hashCode * 59 + Student.GetHashCode();
                    if (Experience != null)
                    hashCode = hashCode * 59 + Experience.GetHashCode();
                    if (SiteVisits != null)
                    hashCode = hashCode * 59 + SiteVisits.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdminViewUserExperienceResponse left, AdminViewUserExperienceResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdminViewUserExperienceResponse left, AdminViewUserExperienceResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
