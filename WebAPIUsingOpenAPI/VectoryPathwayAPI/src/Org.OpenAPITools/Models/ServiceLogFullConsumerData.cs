/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ServiceLogFullConsumerData : IEquatable<ServiceLogFullConsumerData>
    {
        /// <summary>
        /// Gets or Sets Sponsor
        /// </summary>
        [DataMember(Name="sponsor", EmitDefaultValue=false)]
        public ExternalSponsorStatusData Sponsor { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [Required]
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public string Organization { get; set; }

        /// <summary>
        /// Gets or Sets ProposalId
        /// </summary>
        [DataMember(Name="proposal_id", EmitDefaultValue=true)]
        public long? ProposalId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [Required]
        [DataMember(Name="days", EmitDefaultValue=false)]
        public List<ServiceLogDayJSON> Days { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [Required]
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<TagDTO> Tags { get; set; }

        /// <summary>
        /// Gets or Sets GeoCheckInLat
        /// </summary>
        [DataMember(Name="geoCheckInLat", EmitDefaultValue=true)]
        public string GeoCheckInLat { get; set; }

        /// <summary>
        /// Gets or Sets ServiceEvent
        /// </summary>
        [Required]
        [DataMember(Name="serviceEvent", EmitDefaultValue=false)]
        public GroupLogServiceEvent ServiceEvent { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [Required]
        [DataMember(Name="user", EmitDefaultValue=false)]
        public BasicUser User { get; set; }

        /// <summary>
        /// Gets or Sets NeedsRevision
        /// </summary>
        [Required]
        [DataMember(Name="needsRevision", EmitDefaultValue=true)]
        public bool NeedsRevision { get; set; }

        /// <summary>
        /// Gets or Sets TotalHours
        /// </summary>
        [Required]
        [DataMember(Name="totalHours", EmitDefaultValue=true)]
        public double TotalHours { get; set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [Required]
        [DataMember(Name="verified", EmitDefaultValue=true)]
        public bool Verified { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Feedback
        /// </summary>
        [Required]
        [DataMember(Name="feedback", EmitDefaultValue=false)]
        public List<FullLogFeedbackData> Feedback { get; set; }

        /// <summary>
        /// Gets or Sets Parents
        /// </summary>
        [Required]
        [DataMember(Name="parents", EmitDefaultValue=false)]
        public List<ServiceLogFullConsumerDataParentApprovalData> Parents { get; set; }

        /// <summary>
        /// Gets or Sets SignatureUrl
        /// </summary>
        [DataMember(Name="signatureUrl", EmitDefaultValue=true)]
        public string SignatureUrl { get; set; }

        /// <summary>
        /// Gets or Sets GeoCheckInLong
        /// </summary>
        [DataMember(Name="geoCheckInLong", EmitDefaultValue=true)]
        public string GeoCheckInLong { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceLogFullConsumerData {\n");
            sb.Append("  Sponsor: ").Append(Sponsor).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  ProposalId: ").Append(ProposalId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  GeoCheckInLat: ").Append(GeoCheckInLat).Append("\n");
            sb.Append("  ServiceEvent: ").Append(ServiceEvent).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  NeedsRevision: ").Append(NeedsRevision).Append("\n");
            sb.Append("  TotalHours: ").Append(TotalHours).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Feedback: ").Append(Feedback).Append("\n");
            sb.Append("  Parents: ").Append(Parents).Append("\n");
            sb.Append("  SignatureUrl: ").Append(SignatureUrl).Append("\n");
            sb.Append("  GeoCheckInLong: ").Append(GeoCheckInLong).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServiceLogFullConsumerData)obj);
        }

        /// <summary>
        /// Returns true if ServiceLogFullConsumerData instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceLogFullConsumerData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceLogFullConsumerData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Sponsor == other.Sponsor ||
                    Sponsor != null &&
                    Sponsor.Equals(other.Sponsor)
                ) && 
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.Equals(other.Organization)
                ) && 
                (
                    ProposalId == other.ProposalId ||
                    ProposalId != null &&
                    ProposalId.Equals(other.ProposalId)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Days == other.Days ||
                    Days != null &&
                    other.Days != null &&
                    Days.SequenceEqual(other.Days)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    GeoCheckInLat == other.GeoCheckInLat ||
                    GeoCheckInLat != null &&
                    GeoCheckInLat.Equals(other.GeoCheckInLat)
                ) && 
                (
                    ServiceEvent == other.ServiceEvent ||
                    ServiceEvent != null &&
                    ServiceEvent.Equals(other.ServiceEvent)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    NeedsRevision == other.NeedsRevision ||
                    
                    NeedsRevision.Equals(other.NeedsRevision)
                ) && 
                (
                    TotalHours == other.TotalHours ||
                    
                    TotalHours.Equals(other.TotalHours)
                ) && 
                (
                    Verified == other.Verified ||
                    
                    Verified.Equals(other.Verified)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    Feedback == other.Feedback ||
                    Feedback != null &&
                    other.Feedback != null &&
                    Feedback.SequenceEqual(other.Feedback)
                ) && 
                (
                    Parents == other.Parents ||
                    Parents != null &&
                    other.Parents != null &&
                    Parents.SequenceEqual(other.Parents)
                ) && 
                (
                    SignatureUrl == other.SignatureUrl ||
                    SignatureUrl != null &&
                    SignatureUrl.Equals(other.SignatureUrl)
                ) && 
                (
                    GeoCheckInLong == other.GeoCheckInLong ||
                    GeoCheckInLong != null &&
                    GeoCheckInLong.Equals(other.GeoCheckInLong)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Sponsor != null)
                    hashCode = hashCode * 59 + Sponsor.GetHashCode();
                    if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (ProposalId != null)
                    hashCode = hashCode * 59 + ProposalId.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Days != null)
                    hashCode = hashCode * 59 + Days.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (GeoCheckInLat != null)
                    hashCode = hashCode * 59 + GeoCheckInLat.GetHashCode();
                    if (ServiceEvent != null)
                    hashCode = hashCode * 59 + ServiceEvent.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    
                    hashCode = hashCode * 59 + NeedsRevision.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalHours.GetHashCode();
                    
                    hashCode = hashCode * 59 + Verified.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (Feedback != null)
                    hashCode = hashCode * 59 + Feedback.GetHashCode();
                    if (Parents != null)
                    hashCode = hashCode * 59 + Parents.GetHashCode();
                    if (SignatureUrl != null)
                    hashCode = hashCode * 59 + SignatureUrl.GetHashCode();
                    if (GeoCheckInLong != null)
                    hashCode = hashCode * 59 + GeoCheckInLong.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ServiceLogFullConsumerData left, ServiceLogFullConsumerData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServiceLogFullConsumerData left, ServiceLogFullConsumerData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
