/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EngagementAlertsResponse : IEquatable<EngagementAlertsResponse>
    {
        /// <summary>
        /// Gets or Sets RecentlyDismissed
        /// </summary>
        [Required]
        [DataMember(Name="recentlyDismissed", EmitDefaultValue=false)]
        public List<EngagementAlertsResponseAlert> RecentlyDismissed { get; set; }

        /// <summary>
        /// Gets or Sets MissedShift
        /// </summary>
        [Required]
        [DataMember(Name="missedShift", EmitDefaultValue=false)]
        public List<EngagementAlertsResponseAlert> MissedShift { get; set; }

        /// <summary>
        /// Gets or Sets OutOfGeoForShift
        /// </summary>
        [Required]
        [DataMember(Name="outOfGeoForShift", EmitDefaultValue=false)]
        public List<EngagementAlertsResponseAlert> OutOfGeoForShift { get; set; }

        /// <summary>
        /// Gets or Sets AbsentNow
        /// </summary>
        [Required]
        [DataMember(Name="absentNow", EmitDefaultValue=false)]
        public List<EngagementAlertsResponseAlert> AbsentNow { get; set; }

        /// <summary>
        /// Gets or Sets OutOfGeoNow
        /// </summary>
        [Required]
        [DataMember(Name="outOfGeoNow", EmitDefaultValue=false)]
        public List<EngagementAlertsResponseAlert> OutOfGeoNow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EngagementAlertsResponse {\n");
            sb.Append("  RecentlyDismissed: ").Append(RecentlyDismissed).Append("\n");
            sb.Append("  MissedShift: ").Append(MissedShift).Append("\n");
            sb.Append("  OutOfGeoForShift: ").Append(OutOfGeoForShift).Append("\n");
            sb.Append("  AbsentNow: ").Append(AbsentNow).Append("\n");
            sb.Append("  OutOfGeoNow: ").Append(OutOfGeoNow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EngagementAlertsResponse)obj);
        }

        /// <summary>
        /// Returns true if EngagementAlertsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of EngagementAlertsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EngagementAlertsResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RecentlyDismissed == other.RecentlyDismissed ||
                    RecentlyDismissed != null &&
                    other.RecentlyDismissed != null &&
                    RecentlyDismissed.SequenceEqual(other.RecentlyDismissed)
                ) && 
                (
                    MissedShift == other.MissedShift ||
                    MissedShift != null &&
                    other.MissedShift != null &&
                    MissedShift.SequenceEqual(other.MissedShift)
                ) && 
                (
                    OutOfGeoForShift == other.OutOfGeoForShift ||
                    OutOfGeoForShift != null &&
                    other.OutOfGeoForShift != null &&
                    OutOfGeoForShift.SequenceEqual(other.OutOfGeoForShift)
                ) && 
                (
                    AbsentNow == other.AbsentNow ||
                    AbsentNow != null &&
                    other.AbsentNow != null &&
                    AbsentNow.SequenceEqual(other.AbsentNow)
                ) && 
                (
                    OutOfGeoNow == other.OutOfGeoNow ||
                    OutOfGeoNow != null &&
                    other.OutOfGeoNow != null &&
                    OutOfGeoNow.SequenceEqual(other.OutOfGeoNow)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RecentlyDismissed != null)
                    hashCode = hashCode * 59 + RecentlyDismissed.GetHashCode();
                    if (MissedShift != null)
                    hashCode = hashCode * 59 + MissedShift.GetHashCode();
                    if (OutOfGeoForShift != null)
                    hashCode = hashCode * 59 + OutOfGeoForShift.GetHashCode();
                    if (AbsentNow != null)
                    hashCode = hashCode * 59 + AbsentNow.GetHashCode();
                    if (OutOfGeoNow != null)
                    hashCode = hashCode * 59 + OutOfGeoNow.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EngagementAlertsResponse left, EngagementAlertsResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EngagementAlertsResponse left, EngagementAlertsResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
