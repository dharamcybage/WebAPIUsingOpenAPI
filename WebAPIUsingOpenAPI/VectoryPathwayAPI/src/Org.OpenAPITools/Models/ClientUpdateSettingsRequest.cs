/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ClientUpdateSettingsRequest : IEquatable<ClientUpdateSettingsRequest>
    {
        /// <summary>
        /// Gets or Sets OrganizationsName
        /// </summary>
        [Required]
        [DataMember(Name="organizationsName", EmitDefaultValue=false)]
        public string OrganizationsName { get; set; }

        /// <summary>
        /// Gets or Sets ActivityApplicationFormId
        /// </summary>
        [DataMember(Name="activityApplicationFormId", EmitDefaultValue=true)]
        public long? ActivityApplicationFormId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalJobPageShortName
        /// </summary>
        [DataMember(Name="externalJobPageShortName", EmitDefaultValue=true)]
        public string ExternalJobPageShortName { get; set; }

        /// <summary>
        /// Gets or Sets GatedJobsBadgeId
        /// </summary>
        [DataMember(Name="gatedJobsBadgeId", EmitDefaultValue=true)]
        public long? GatedJobsBadgeId { get; set; }

        /// <summary>
        /// Gets or Sets DashboardText
        /// </summary>
        [DataMember(Name="dashboardText", EmitDefaultValue=true)]
        public string DashboardText { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceReflectionFormId
        /// </summary>
        [DataMember(Name="experienceReflectionFormId", EmitDefaultValue=true)]
        public long? ExperienceReflectionFormId { get; set; }

        /// <summary>
        /// Gets or Sets BragSheetsFormId
        /// </summary>
        [DataMember(Name="bragSheetsFormId", EmitDefaultValue=true)]
        public long? BragSheetsFormId { get; set; }

        /// <summary>
        /// Gets or Sets TranscriptMatchingKey
        /// </summary>
        [DataMember(Name="transcriptMatchingKey", EmitDefaultValue=true)]
        public string TranscriptMatchingKey { get; set; }

        /// <summary>
        /// Gets or Sets ShouldShowEventsInBusinessPartnerPortal
        /// </summary>
        [DataMember(Name="shouldShowEventsInBusinessPartnerPortal", EmitDefaultValue=true)]
        public bool? ShouldShowEventsInBusinessPartnerPortal { get; set; }

        /// <summary>
        /// Gets or Sets BusinessPartnerExperiencesText
        /// </summary>
        [DataMember(Name="businessPartnerExperiencesText", EmitDefaultValue=true)]
        public string BusinessPartnerExperiencesText { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceApplicationFormId
        /// </summary>
        [DataMember(Name="experienceApplicationFormId", EmitDefaultValue=true)]
        public long? ExperienceApplicationFormId { get; set; }

        /// <summary>
        /// Gets or Sets RedirectBPPCreationToExternal
        /// </summary>
        [DataMember(Name="redirectBPPCreationToExternal", EmitDefaultValue=true)]
        public bool? RedirectBPPCreationToExternal { get; set; }

        /// <summary>
        /// Gets or Sets ContactsName
        /// </summary>
        [Required]
        [DataMember(Name="contactsName", EmitDefaultValue=false)]
        public string ContactsName { get; set; }

        /// <summary>
        /// Gets or Sets ExperiencesName
        /// </summary>
        [Required]
        [DataMember(Name="experiencesName", EmitDefaultValue=false)]
        public string ExperiencesName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientUpdateSettingsRequest {\n");
            sb.Append("  OrganizationsName: ").Append(OrganizationsName).Append("\n");
            sb.Append("  ActivityApplicationFormId: ").Append(ActivityApplicationFormId).Append("\n");
            sb.Append("  ExternalJobPageShortName: ").Append(ExternalJobPageShortName).Append("\n");
            sb.Append("  GatedJobsBadgeId: ").Append(GatedJobsBadgeId).Append("\n");
            sb.Append("  DashboardText: ").Append(DashboardText).Append("\n");
            sb.Append("  ExperienceReflectionFormId: ").Append(ExperienceReflectionFormId).Append("\n");
            sb.Append("  BragSheetsFormId: ").Append(BragSheetsFormId).Append("\n");
            sb.Append("  TranscriptMatchingKey: ").Append(TranscriptMatchingKey).Append("\n");
            sb.Append("  ShouldShowEventsInBusinessPartnerPortal: ").Append(ShouldShowEventsInBusinessPartnerPortal).Append("\n");
            sb.Append("  BusinessPartnerExperiencesText: ").Append(BusinessPartnerExperiencesText).Append("\n");
            sb.Append("  ExperienceApplicationFormId: ").Append(ExperienceApplicationFormId).Append("\n");
            sb.Append("  RedirectBPPCreationToExternal: ").Append(RedirectBPPCreationToExternal).Append("\n");
            sb.Append("  ContactsName: ").Append(ContactsName).Append("\n");
            sb.Append("  ExperiencesName: ").Append(ExperiencesName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ClientUpdateSettingsRequest)obj);
        }

        /// <summary>
        /// Returns true if ClientUpdateSettingsRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ClientUpdateSettingsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientUpdateSettingsRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OrganizationsName == other.OrganizationsName ||
                    OrganizationsName != null &&
                    OrganizationsName.Equals(other.OrganizationsName)
                ) && 
                (
                    ActivityApplicationFormId == other.ActivityApplicationFormId ||
                    ActivityApplicationFormId != null &&
                    ActivityApplicationFormId.Equals(other.ActivityApplicationFormId)
                ) && 
                (
                    ExternalJobPageShortName == other.ExternalJobPageShortName ||
                    ExternalJobPageShortName != null &&
                    ExternalJobPageShortName.Equals(other.ExternalJobPageShortName)
                ) && 
                (
                    GatedJobsBadgeId == other.GatedJobsBadgeId ||
                    GatedJobsBadgeId != null &&
                    GatedJobsBadgeId.Equals(other.GatedJobsBadgeId)
                ) && 
                (
                    DashboardText == other.DashboardText ||
                    DashboardText != null &&
                    DashboardText.Equals(other.DashboardText)
                ) && 
                (
                    ExperienceReflectionFormId == other.ExperienceReflectionFormId ||
                    ExperienceReflectionFormId != null &&
                    ExperienceReflectionFormId.Equals(other.ExperienceReflectionFormId)
                ) && 
                (
                    BragSheetsFormId == other.BragSheetsFormId ||
                    BragSheetsFormId != null &&
                    BragSheetsFormId.Equals(other.BragSheetsFormId)
                ) && 
                (
                    TranscriptMatchingKey == other.TranscriptMatchingKey ||
                    TranscriptMatchingKey != null &&
                    TranscriptMatchingKey.Equals(other.TranscriptMatchingKey)
                ) && 
                (
                    ShouldShowEventsInBusinessPartnerPortal == other.ShouldShowEventsInBusinessPartnerPortal ||
                    ShouldShowEventsInBusinessPartnerPortal != null &&
                    ShouldShowEventsInBusinessPartnerPortal.Equals(other.ShouldShowEventsInBusinessPartnerPortal)
                ) && 
                (
                    BusinessPartnerExperiencesText == other.BusinessPartnerExperiencesText ||
                    BusinessPartnerExperiencesText != null &&
                    BusinessPartnerExperiencesText.Equals(other.BusinessPartnerExperiencesText)
                ) && 
                (
                    ExperienceApplicationFormId == other.ExperienceApplicationFormId ||
                    ExperienceApplicationFormId != null &&
                    ExperienceApplicationFormId.Equals(other.ExperienceApplicationFormId)
                ) && 
                (
                    RedirectBPPCreationToExternal == other.RedirectBPPCreationToExternal ||
                    RedirectBPPCreationToExternal != null &&
                    RedirectBPPCreationToExternal.Equals(other.RedirectBPPCreationToExternal)
                ) && 
                (
                    ContactsName == other.ContactsName ||
                    ContactsName != null &&
                    ContactsName.Equals(other.ContactsName)
                ) && 
                (
                    ExperiencesName == other.ExperiencesName ||
                    ExperiencesName != null &&
                    ExperiencesName.Equals(other.ExperiencesName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OrganizationsName != null)
                    hashCode = hashCode * 59 + OrganizationsName.GetHashCode();
                    if (ActivityApplicationFormId != null)
                    hashCode = hashCode * 59 + ActivityApplicationFormId.GetHashCode();
                    if (ExternalJobPageShortName != null)
                    hashCode = hashCode * 59 + ExternalJobPageShortName.GetHashCode();
                    if (GatedJobsBadgeId != null)
                    hashCode = hashCode * 59 + GatedJobsBadgeId.GetHashCode();
                    if (DashboardText != null)
                    hashCode = hashCode * 59 + DashboardText.GetHashCode();
                    if (ExperienceReflectionFormId != null)
                    hashCode = hashCode * 59 + ExperienceReflectionFormId.GetHashCode();
                    if (BragSheetsFormId != null)
                    hashCode = hashCode * 59 + BragSheetsFormId.GetHashCode();
                    if (TranscriptMatchingKey != null)
                    hashCode = hashCode * 59 + TranscriptMatchingKey.GetHashCode();
                    if (ShouldShowEventsInBusinessPartnerPortal != null)
                    hashCode = hashCode * 59 + ShouldShowEventsInBusinessPartnerPortal.GetHashCode();
                    if (BusinessPartnerExperiencesText != null)
                    hashCode = hashCode * 59 + BusinessPartnerExperiencesText.GetHashCode();
                    if (ExperienceApplicationFormId != null)
                    hashCode = hashCode * 59 + ExperienceApplicationFormId.GetHashCode();
                    if (RedirectBPPCreationToExternal != null)
                    hashCode = hashCode * 59 + RedirectBPPCreationToExternal.GetHashCode();
                    if (ContactsName != null)
                    hashCode = hashCode * 59 + ContactsName.GetHashCode();
                    if (ExperiencesName != null)
                    hashCode = hashCode * 59 + ExperiencesName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ClientUpdateSettingsRequest left, ClientUpdateSettingsRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ClientUpdateSettingsRequest left, ClientUpdateSettingsRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
