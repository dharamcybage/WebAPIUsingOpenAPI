/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdminUpdateSettingsRequestSettingsRequest : IEquatable<AdminUpdateSettingsRequestSettingsRequest>
    {
        /// <summary>
        /// Gets or Sets TeachersOnlySeeCaseloadExperiences
        /// </summary>
        [Required]
        [DataMember(Name="teachersOnlySeeCaseloadExperiences", EmitDefaultValue=true)]
        public bool TeachersOnlySeeCaseloadExperiences { get; set; }

        /// <summary>
        /// Gets or Sets TasksBelowBadges
        /// </summary>
        [Required]
        [DataMember(Name="tasksBelowBadges", EmitDefaultValue=true)]
        public bool TasksBelowBadges { get; set; }

        /// <summary>
        /// Gets or Sets HideStudentGoalsOnDashboard
        /// </summary>
        [Required]
        [DataMember(Name="hideStudentGoalsOnDashboard", EmitDefaultValue=true)]
        public bool HideStudentGoalsOnDashboard { get; set; }

        /// <summary>
        /// Gets or Sets BadgesName
        /// </summary>
        [Required]
        [DataMember(Name="badgesName", EmitDefaultValue=false)]
        public string BadgesName { get; set; }

        /// <summary>
        /// Gets or Sets ParchmentEnabled
        /// </summary>
        [Required]
        [DataMember(Name="parchmentEnabled", EmitDefaultValue=true)]
        public bool ParchmentEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TasksTurnedOn
        /// </summary>
        [Required]
        [DataMember(Name="tasksTurnedOn", EmitDefaultValue=true)]
        public bool TasksTurnedOn { get; set; }

        /// <summary>
        /// Gets or Sets PlansName
        /// </summary>
        [Required]
        [DataMember(Name="plansName", EmitDefaultValue=false)]
        public string PlansName { get; set; }

        /// <summary>
        /// Gets or Sets AutoSendWorkflows
        /// </summary>
        [Required]
        [DataMember(Name="autoSendWorkflows", EmitDefaultValue=true)]
        public bool AutoSendWorkflows { get; set; }

        /// <summary>
        /// Gets or Sets ServeSponsorEmailsInTable
        /// </summary>
        [Required]
        [DataMember(Name="serveSponsorEmailsInTable", EmitDefaultValue=true)]
        public bool ServeSponsorEmailsInTable { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceApprovedWhenAddedByStudent
        /// </summary>
        [Required]
        [DataMember(Name="experienceApprovedWhenAddedByStudent", EmitDefaultValue=true)]
        public bool ExperienceApprovedWhenAddedByStudent { get; set; }

        /// <summary>
        /// Gets or Sets RequirePhoneOnServe
        /// </summary>
        [Required]
        [DataMember(Name="requirePhoneOnServe", EmitDefaultValue=true)]
        public bool RequirePhoneOnServe { get; set; }

        /// <summary>
        /// Gets or Sets ShowStudentReports
        /// </summary>
        [Required]
        [DataMember(Name="showStudentReports", EmitDefaultValue=true)]
        public bool ShowStudentReports { get; set; }

        /// <summary>
        /// Gets or Sets DashboardText
        /// </summary>
        [DataMember(Name="dashboardText", EmitDefaultValue=true)]
        public string DashboardText { get; set; }

        /// <summary>
        /// Gets or Sets RequiresSponsorContactInfo
        /// </summary>
        [Required]
        [DataMember(Name="requiresSponsorContactInfo", EmitDefaultValue=true)]
        public bool RequiresSponsorContactInfo { get; set; }

        /// <summary>
        /// Gets or Sets ServiceProposalRequired
        /// </summary>
        [Required]
        [DataMember(Name="serviceProposalRequired", EmitDefaultValue=true)]
        public bool ServiceProposalRequired { get; set; }

        /// <summary>
        /// Gets or Sets BusinessPartnerExperiencesText
        /// </summary>
        [DataMember(Name="businessPartnerExperiencesText", EmitDefaultValue=true)]
        public string BusinessPartnerExperiencesText { get; set; }

        /// <summary>
        /// Gets or Sets ServiceEventApprovalTagId
        /// </summary>
        [DataMember(Name="serviceEventApprovalTagId", EmitDefaultValue=true)]
        public long? ServiceEventApprovalTagId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceLogSignatureAllowed
        /// </summary>
        [Required]
        [DataMember(Name="serviceLogSignatureAllowed", EmitDefaultValue=true)]
        public bool ServiceLogSignatureAllowed { get; set; }

        /// <summary>
        /// Gets or Sets JourneyTier
        /// </summary>
        [DataMember(Name="journeyTier", EmitDefaultValue=true)]
        public long? JourneyTier { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceApprovalEmailText
        /// </summary>
        [DataMember(Name="experienceApprovalEmailText", EmitDefaultValue=true)]
        public string ExperienceApprovalEmailText { get; set; }

        /// <summary>
        /// Gets or Sets ShowStudentJourneyDashboard
        /// </summary>
        [Required]
        [DataMember(Name="showStudentJourneyDashboard", EmitDefaultValue=true)]
        public bool ShowStudentJourneyDashboard { get; set; }

        /// <summary>
        /// Gets or Sets SiteVisitSettings
        /// </summary>
        [DataMember(Name="siteVisitSettings", EmitDefaultValue=false)]
        public SettingsSiteVisitSettings SiteVisitSettings { get; set; }

        /// <summary>
        /// Gets or Sets HideGroupField
        /// </summary>
        [Required]
        [DataMember(Name="hideGroupField", EmitDefaultValue=true)]
        public bool HideGroupField { get; set; }

        /// <summary>
        /// Gets or Sets SuppressCounselorJourneyEmail
        /// </summary>
        [Required]
        [DataMember(Name="suppressCounselorJourneyEmail", EmitDefaultValue=true)]
        public bool SuppressCounselorJourneyEmail { get; set; }

        /// <summary>
        /// Gets or Sets ServeAutoApproveViaSponsor
        /// </summary>
        [Required]
        [DataMember(Name="serveAutoApproveViaSponsor", EmitDefaultValue=true)]
        public bool ServeAutoApproveViaSponsor { get; set; }

        /// <summary>
        /// Gets or Sets DisableStudentSeals
        /// </summary>
        [Required]
        [DataMember(Name="disableStudentSeals", EmitDefaultValue=true)]
        public bool DisableStudentSeals { get; set; }

        /// <summary>
        /// Gets or Sets GeoCheckInForServeEnabled
        /// </summary>
        [Required]
        [DataMember(Name="geoCheckInForServeEnabled", EmitDefaultValue=true)]
        public bool GeoCheckInForServeEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TeachersCanViewEntities
        /// </summary>
        [Required]
        [DataMember(Name="teachersCanViewEntities", EmitDefaultValue=true)]
        public bool TeachersCanViewEntities { get; set; }

        /// <summary>
        /// Gets or Sets RequiresServeSponsorEmail
        /// </summary>
        [Required]
        [DataMember(Name="requiresServeSponsorEmail", EmitDefaultValue=true)]
        public bool RequiresServeSponsorEmail { get; set; }

        /// <summary>
        /// Gets or Sets ExperiencesName
        /// </summary>
        [Required]
        [DataMember(Name="experiencesName", EmitDefaultValue=false)]
        public string ExperiencesName { get; set; }

        /// <summary>
        /// Gets or Sets HourLimitPerDay
        /// </summary>
        [Required]
        [DataMember(Name="hourLimitPerDay", EmitDefaultValue=true)]
        public long HourLimitPerDay { get; set; }

        /// <summary>
        /// Gets or Sets AutoSSOLogin
        /// </summary>
        [Required]
        [DataMember(Name="autoSSOLogin", EmitDefaultValue=true)]
        public bool AutoSSOLogin { get; set; }

        /// <summary>
        /// Gets or Sets SuppressParentJourneyReviewEmail
        /// </summary>
        [Required]
        [DataMember(Name="suppressParentJourneyReviewEmail", EmitDefaultValue=true)]
        public bool SuppressParentJourneyReviewEmail { get; set; }

        /// <summary>
        /// Gets or Sets HasBusinessPartnerPortal
        /// </summary>
        [Required]
        [DataMember(Name="hasBusinessPartnerPortal", EmitDefaultValue=true)]
        public bool HasBusinessPartnerPortal { get; set; }

        /// <summary>
        /// Gets or Sets ShowServiceGradeLevelDashboardData
        /// </summary>
        [Required]
        [DataMember(Name="showServiceGradeLevelDashboardData", EmitDefaultValue=true)]
        public bool ShowServiceGradeLevelDashboardData { get; set; }

        /// <summary>
        /// Gets or Sets CollegeLetterOfRecTarget
        /// </summary>
        [DataMember(Name="collegeLetterOfRecTarget", EmitDefaultValue=true)]
        public long? CollegeLetterOfRecTarget { get; set; }

        /// <summary>
        /// Gets or Sets AdminSealsEnabled
        /// </summary>
        [Required]
        [DataMember(Name="adminSealsEnabled", EmitDefaultValue=true)]
        public bool AdminSealsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AttendanceEnabled
        /// </summary>
        [Required]
        [DataMember(Name="attendanceEnabled", EmitDefaultValue=true)]
        public bool AttendanceEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ActivityApplicationFormId
        /// </summary>
        [DataMember(Name="activityApplicationFormId", EmitDefaultValue=true)]
        public long? ActivityApplicationFormId { get; set; }

        /// <summary>
        /// Gets or Sets ShowParentsOnStudentProfile
        /// </summary>
        [Required]
        [DataMember(Name="showParentsOnStudentProfile", EmitDefaultValue=true)]
        public bool ShowParentsOnStudentProfile { get; set; }

        /// <summary>
        /// Gets or Sets HideContactOnExperienceCard
        /// </summary>
        [Required]
        [DataMember(Name="hideContactOnExperienceCard", EmitDefaultValue=true)]
        public bool HideContactOnExperienceCard { get; set; }

        /// <summary>
        /// Gets or Sets ShowStudentOverallMetrics
        /// </summary>
        [Required]
        [DataMember(Name="showStudentOverallMetrics", EmitDefaultValue=true)]
        public bool ShowStudentOverallMetrics { get; set; }

        /// <summary>
        /// Gets or Sets RedirectBPPCreationToExternal
        /// </summary>
        [Required]
        [DataMember(Name="redirectBPPCreationToExternal", EmitDefaultValue=true)]
        public bool RedirectBPPCreationToExternal { get; set; }

        /// <summary>
        /// Gets or Sets AllowStudentsToAddPayPeriods
        /// </summary>
        [Required]
        [DataMember(Name="allowStudentsToAddPayPeriods", EmitDefaultValue=true)]
        public bool AllowStudentsToAddPayPeriods { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceApplicationFormId
        /// </summary>
        [DataMember(Name="experienceApplicationFormId", EmitDefaultValue=true)]
        public long? ExperienceApplicationFormId { get; set; }

        /// <summary>
        /// Gets or Sets OutOfRangeDistance
        /// </summary>
        [Required]
        [DataMember(Name="outOfRangeDistance", EmitDefaultValue=true)]
        public long OutOfRangeDistance { get; set; }

        /// <summary>
        /// Gets or Sets ContactsName
        /// </summary>
        [Required]
        [DataMember(Name="contactsName", EmitDefaultValue=false)]
        public string ContactsName { get; set; }

        /// <summary>
        /// Gets or Sets ActivitiesName
        /// </summary>
        [Required]
        [DataMember(Name="activitiesName", EmitDefaultValue=false)]
        public string ActivitiesName { get; set; }

        /// <summary>
        /// Gets or Sets ServiceLogSignatureRequired
        /// </summary>
        [Required]
        [DataMember(Name="serviceLogSignatureRequired", EmitDefaultValue=true)]
        public bool ServiceLogSignatureRequired { get; set; }

        /// <summary>
        /// Gets or Sets UseEarnedCreditsForBadgeCalculations
        /// </summary>
        [Required]
        [DataMember(Name="useEarnedCreditsForBadgeCalculations", EmitDefaultValue=true)]
        public bool UseEarnedCreditsForBadgeCalculations { get; set; }

        /// <summary>
        /// Gets or Sets SendsParentEmail
        /// </summary>
        [Required]
        [DataMember(Name="sendsParentEmail", EmitDefaultValue=true)]
        public bool SendsParentEmail { get; set; }

        /// <summary>
        /// Gets or Sets ExternalJobPageShortName
        /// </summary>
        [DataMember(Name="externalJobPageShortName", EmitDefaultValue=true)]
        public string ExternalJobPageShortName { get; set; }

        /// <summary>
        /// Gets or Sets CollegeEssaysTarget
        /// </summary>
        [DataMember(Name="collegeEssaysTarget", EmitDefaultValue=true)]
        public long? CollegeEssaysTarget { get; set; }

        /// <summary>
        /// Gets or Sets TestScoreConfiguration
        /// </summary>
        [Required]
        [DataMember(Name="testScoreConfiguration", EmitDefaultValue=false)]
        public SettingsTestScoreConfiguration TestScoreConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets ShowServiceGoals
        /// </summary>
        [Required]
        [DataMember(Name="showServiceGoals", EmitDefaultValue=true)]
        public bool ShowServiceGoals { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionPlaceholder
        /// </summary>
        [Required]
        [DataMember(Name="descriptionPlaceholder", EmitDefaultValue=false)]
        public string DescriptionPlaceholder { get; set; }

        /// <summary>
        /// Gets or Sets ShowsPlanInSidebar
        /// </summary>
        [Required]
        [DataMember(Name="showsPlanInSidebar", EmitDefaultValue=true)]
        public bool ShowsPlanInSidebar { get; set; }

        /// <summary>
        /// Gets or Sets StudentsCanUploadFiles
        /// </summary>
        [Required]
        [DataMember(Name="studentsCanUploadFiles", EmitDefaultValue=true)]
        public bool StudentsCanUploadFiles { get; set; }

        /// <summary>
        /// Gets or Sets StudentsCanSubmitEntities
        /// </summary>
        [Required]
        [DataMember(Name="studentsCanSubmitEntities", EmitDefaultValue=true)]
        public bool StudentsCanSubmitEntities { get; set; }

        /// <summary>
        /// Gets or Sets ShowStudentJourneySidebar
        /// </summary>
        [Required]
        [DataMember(Name="showStudentJourneySidebar", EmitDefaultValue=true)]
        public bool ShowStudentJourneySidebar { get; set; }

        /// <summary>
        /// Gets or Sets DisableShiftsOnStudentSide
        /// </summary>
        [Required]
        [DataMember(Name="disableShiftsOnStudentSide", EmitDefaultValue=true)]
        public bool DisableShiftsOnStudentSide { get; set; }

        /// <summary>
        /// Gets or Sets ShowsHoursOnStudentsPage
        /// </summary>
        [Required]
        [DataMember(Name="showsHoursOnStudentsPage", EmitDefaultValue=true)]
        public bool ShowsHoursOnStudentsPage { get; set; }

        /// <summary>
        /// Gets or Sets InterestedCollegeTarget
        /// </summary>
        [DataMember(Name="interestedCollegeTarget", EmitDefaultValue=true)]
        public long? InterestedCollegeTarget { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationsName
        /// </summary>
        [Required]
        [DataMember(Name="organizationsName", EmitDefaultValue=false)]
        public string OrganizationsName { get; set; }

        /// <summary>
        /// Gets or Sets ServeSponsorEmailReminderDays
        /// </summary>
        [DataMember(Name="serveSponsorEmailReminderDays", EmitDefaultValue=true)]
        public long? ServeSponsorEmailReminderDays { get; set; }

        /// <summary>
        /// Gets or Sets StudentsCanAddTags
        /// </summary>
        [Required]
        [DataMember(Name="studentsCanAddTags", EmitDefaultValue=true)]
        public bool StudentsCanAddTags { get; set; }

        /// <summary>
        /// Gets or Sets DashboardBadgesName
        /// </summary>
        [Required]
        [DataMember(Name="dashboardBadgesName", EmitDefaultValue=false)]
        public string DashboardBadgesName { get; set; }

        /// <summary>
        /// Gets or Sets ShowStudentsInExperienceTable
        /// </summary>
        [Required]
        [DataMember(Name="showStudentsInExperienceTable", EmitDefaultValue=true)]
        public bool ShowStudentsInExperienceTable { get; set; }

        /// <summary>
        /// Gets or Sets ServiceProposalEnabled
        /// </summary>
        [Required]
        [DataMember(Name="serviceProposalEnabled", EmitDefaultValue=true)]
        public bool ServiceProposalEnabled { get; set; }

        /// <summary>
        /// Gets or Sets EnrollmentsFileControlsCaseload
        /// </summary>
        [Required]
        [DataMember(Name="enrollmentsFileControlsCaseload", EmitDefaultValue=true)]
        public bool EnrollmentsFileControlsCaseload { get; set; }

        /// <summary>
        /// Gets or Sets GeoCheckinEnabled
        /// </summary>
        [Required]
        [DataMember(Name="geoCheckinEnabled", EmitDefaultValue=true)]
        public bool GeoCheckinEnabled { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfWords
        /// </summary>
        [Required]
        [DataMember(Name="numberOfWords", EmitDefaultValue=true)]
        public long NumberOfWords { get; set; }

        /// <summary>
        /// Gets or Sets HideShareToLinkedin
        /// </summary>
        [Required]
        [DataMember(Name="hideShareToLinkedin", EmitDefaultValue=true)]
        public bool HideShareToLinkedin { get; set; }

        /// <summary>
        /// Gets or Sets BadgeLibraryName
        /// </summary>
        [Required]
        [DataMember(Name="badgeLibraryName", EmitDefaultValue=false)]
        public string BadgeLibraryName { get; set; }

        /// <summary>
        /// Gets or Sets TranscriptsName
        /// </summary>
        [Required]
        [DataMember(Name="transcriptsName", EmitDefaultValue=false)]
        public string TranscriptsName { get; set; }

        /// <summary>
        /// Gets or Sets ShouldHideGroupLogEntry
        /// </summary>
        [Required]
        [DataMember(Name="shouldHideGroupLogEntry", EmitDefaultValue=true)]
        public bool ShouldHideGroupLogEntry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminUpdateSettingsRequestSettingsRequest {\n");
            sb.Append("  TeachersOnlySeeCaseloadExperiences: ").Append(TeachersOnlySeeCaseloadExperiences).Append("\n");
            sb.Append("  TasksBelowBadges: ").Append(TasksBelowBadges).Append("\n");
            sb.Append("  HideStudentGoalsOnDashboard: ").Append(HideStudentGoalsOnDashboard).Append("\n");
            sb.Append("  BadgesName: ").Append(BadgesName).Append("\n");
            sb.Append("  ParchmentEnabled: ").Append(ParchmentEnabled).Append("\n");
            sb.Append("  TasksTurnedOn: ").Append(TasksTurnedOn).Append("\n");
            sb.Append("  PlansName: ").Append(PlansName).Append("\n");
            sb.Append("  AutoSendWorkflows: ").Append(AutoSendWorkflows).Append("\n");
            sb.Append("  ServeSponsorEmailsInTable: ").Append(ServeSponsorEmailsInTable).Append("\n");
            sb.Append("  ExperienceApprovedWhenAddedByStudent: ").Append(ExperienceApprovedWhenAddedByStudent).Append("\n");
            sb.Append("  RequirePhoneOnServe: ").Append(RequirePhoneOnServe).Append("\n");
            sb.Append("  ShowStudentReports: ").Append(ShowStudentReports).Append("\n");
            sb.Append("  DashboardText: ").Append(DashboardText).Append("\n");
            sb.Append("  RequiresSponsorContactInfo: ").Append(RequiresSponsorContactInfo).Append("\n");
            sb.Append("  ServiceProposalRequired: ").Append(ServiceProposalRequired).Append("\n");
            sb.Append("  BusinessPartnerExperiencesText: ").Append(BusinessPartnerExperiencesText).Append("\n");
            sb.Append("  ServiceEventApprovalTagId: ").Append(ServiceEventApprovalTagId).Append("\n");
            sb.Append("  ServiceLogSignatureAllowed: ").Append(ServiceLogSignatureAllowed).Append("\n");
            sb.Append("  JourneyTier: ").Append(JourneyTier).Append("\n");
            sb.Append("  ExperienceApprovalEmailText: ").Append(ExperienceApprovalEmailText).Append("\n");
            sb.Append("  ShowStudentJourneyDashboard: ").Append(ShowStudentJourneyDashboard).Append("\n");
            sb.Append("  SiteVisitSettings: ").Append(SiteVisitSettings).Append("\n");
            sb.Append("  HideGroupField: ").Append(HideGroupField).Append("\n");
            sb.Append("  SuppressCounselorJourneyEmail: ").Append(SuppressCounselorJourneyEmail).Append("\n");
            sb.Append("  ServeAutoApproveViaSponsor: ").Append(ServeAutoApproveViaSponsor).Append("\n");
            sb.Append("  DisableStudentSeals: ").Append(DisableStudentSeals).Append("\n");
            sb.Append("  GeoCheckInForServeEnabled: ").Append(GeoCheckInForServeEnabled).Append("\n");
            sb.Append("  TeachersCanViewEntities: ").Append(TeachersCanViewEntities).Append("\n");
            sb.Append("  RequiresServeSponsorEmail: ").Append(RequiresServeSponsorEmail).Append("\n");
            sb.Append("  ExperiencesName: ").Append(ExperiencesName).Append("\n");
            sb.Append("  HourLimitPerDay: ").Append(HourLimitPerDay).Append("\n");
            sb.Append("  AutoSSOLogin: ").Append(AutoSSOLogin).Append("\n");
            sb.Append("  SuppressParentJourneyReviewEmail: ").Append(SuppressParentJourneyReviewEmail).Append("\n");
            sb.Append("  HasBusinessPartnerPortal: ").Append(HasBusinessPartnerPortal).Append("\n");
            sb.Append("  ShowServiceGradeLevelDashboardData: ").Append(ShowServiceGradeLevelDashboardData).Append("\n");
            sb.Append("  CollegeLetterOfRecTarget: ").Append(CollegeLetterOfRecTarget).Append("\n");
            sb.Append("  AdminSealsEnabled: ").Append(AdminSealsEnabled).Append("\n");
            sb.Append("  AttendanceEnabled: ").Append(AttendanceEnabled).Append("\n");
            sb.Append("  ActivityApplicationFormId: ").Append(ActivityApplicationFormId).Append("\n");
            sb.Append("  ShowParentsOnStudentProfile: ").Append(ShowParentsOnStudentProfile).Append("\n");
            sb.Append("  HideContactOnExperienceCard: ").Append(HideContactOnExperienceCard).Append("\n");
            sb.Append("  ShowStudentOverallMetrics: ").Append(ShowStudentOverallMetrics).Append("\n");
            sb.Append("  RedirectBPPCreationToExternal: ").Append(RedirectBPPCreationToExternal).Append("\n");
            sb.Append("  AllowStudentsToAddPayPeriods: ").Append(AllowStudentsToAddPayPeriods).Append("\n");
            sb.Append("  ExperienceApplicationFormId: ").Append(ExperienceApplicationFormId).Append("\n");
            sb.Append("  OutOfRangeDistance: ").Append(OutOfRangeDistance).Append("\n");
            sb.Append("  ContactsName: ").Append(ContactsName).Append("\n");
            sb.Append("  ActivitiesName: ").Append(ActivitiesName).Append("\n");
            sb.Append("  ServiceLogSignatureRequired: ").Append(ServiceLogSignatureRequired).Append("\n");
            sb.Append("  UseEarnedCreditsForBadgeCalculations: ").Append(UseEarnedCreditsForBadgeCalculations).Append("\n");
            sb.Append("  SendsParentEmail: ").Append(SendsParentEmail).Append("\n");
            sb.Append("  ExternalJobPageShortName: ").Append(ExternalJobPageShortName).Append("\n");
            sb.Append("  CollegeEssaysTarget: ").Append(CollegeEssaysTarget).Append("\n");
            sb.Append("  TestScoreConfiguration: ").Append(TestScoreConfiguration).Append("\n");
            sb.Append("  ShowServiceGoals: ").Append(ShowServiceGoals).Append("\n");
            sb.Append("  DescriptionPlaceholder: ").Append(DescriptionPlaceholder).Append("\n");
            sb.Append("  ShowsPlanInSidebar: ").Append(ShowsPlanInSidebar).Append("\n");
            sb.Append("  StudentsCanUploadFiles: ").Append(StudentsCanUploadFiles).Append("\n");
            sb.Append("  StudentsCanSubmitEntities: ").Append(StudentsCanSubmitEntities).Append("\n");
            sb.Append("  ShowStudentJourneySidebar: ").Append(ShowStudentJourneySidebar).Append("\n");
            sb.Append("  DisableShiftsOnStudentSide: ").Append(DisableShiftsOnStudentSide).Append("\n");
            sb.Append("  ShowsHoursOnStudentsPage: ").Append(ShowsHoursOnStudentsPage).Append("\n");
            sb.Append("  InterestedCollegeTarget: ").Append(InterestedCollegeTarget).Append("\n");
            sb.Append("  OrganizationsName: ").Append(OrganizationsName).Append("\n");
            sb.Append("  ServeSponsorEmailReminderDays: ").Append(ServeSponsorEmailReminderDays).Append("\n");
            sb.Append("  StudentsCanAddTags: ").Append(StudentsCanAddTags).Append("\n");
            sb.Append("  DashboardBadgesName: ").Append(DashboardBadgesName).Append("\n");
            sb.Append("  ShowStudentsInExperienceTable: ").Append(ShowStudentsInExperienceTable).Append("\n");
            sb.Append("  ServiceProposalEnabled: ").Append(ServiceProposalEnabled).Append("\n");
            sb.Append("  EnrollmentsFileControlsCaseload: ").Append(EnrollmentsFileControlsCaseload).Append("\n");
            sb.Append("  GeoCheckinEnabled: ").Append(GeoCheckinEnabled).Append("\n");
            sb.Append("  NumberOfWords: ").Append(NumberOfWords).Append("\n");
            sb.Append("  HideShareToLinkedin: ").Append(HideShareToLinkedin).Append("\n");
            sb.Append("  BadgeLibraryName: ").Append(BadgeLibraryName).Append("\n");
            sb.Append("  TranscriptsName: ").Append(TranscriptsName).Append("\n");
            sb.Append("  ShouldHideGroupLogEntry: ").Append(ShouldHideGroupLogEntry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdminUpdateSettingsRequestSettingsRequest)obj);
        }

        /// <summary>
        /// Returns true if AdminUpdateSettingsRequestSettingsRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminUpdateSettingsRequestSettingsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminUpdateSettingsRequestSettingsRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TeachersOnlySeeCaseloadExperiences == other.TeachersOnlySeeCaseloadExperiences ||
                    
                    TeachersOnlySeeCaseloadExperiences.Equals(other.TeachersOnlySeeCaseloadExperiences)
                ) && 
                (
                    TasksBelowBadges == other.TasksBelowBadges ||
                    
                    TasksBelowBadges.Equals(other.TasksBelowBadges)
                ) && 
                (
                    HideStudentGoalsOnDashboard == other.HideStudentGoalsOnDashboard ||
                    
                    HideStudentGoalsOnDashboard.Equals(other.HideStudentGoalsOnDashboard)
                ) && 
                (
                    BadgesName == other.BadgesName ||
                    BadgesName != null &&
                    BadgesName.Equals(other.BadgesName)
                ) && 
                (
                    ParchmentEnabled == other.ParchmentEnabled ||
                    
                    ParchmentEnabled.Equals(other.ParchmentEnabled)
                ) && 
                (
                    TasksTurnedOn == other.TasksTurnedOn ||
                    
                    TasksTurnedOn.Equals(other.TasksTurnedOn)
                ) && 
                (
                    PlansName == other.PlansName ||
                    PlansName != null &&
                    PlansName.Equals(other.PlansName)
                ) && 
                (
                    AutoSendWorkflows == other.AutoSendWorkflows ||
                    
                    AutoSendWorkflows.Equals(other.AutoSendWorkflows)
                ) && 
                (
                    ServeSponsorEmailsInTable == other.ServeSponsorEmailsInTable ||
                    
                    ServeSponsorEmailsInTable.Equals(other.ServeSponsorEmailsInTable)
                ) && 
                (
                    ExperienceApprovedWhenAddedByStudent == other.ExperienceApprovedWhenAddedByStudent ||
                    
                    ExperienceApprovedWhenAddedByStudent.Equals(other.ExperienceApprovedWhenAddedByStudent)
                ) && 
                (
                    RequirePhoneOnServe == other.RequirePhoneOnServe ||
                    
                    RequirePhoneOnServe.Equals(other.RequirePhoneOnServe)
                ) && 
                (
                    ShowStudentReports == other.ShowStudentReports ||
                    
                    ShowStudentReports.Equals(other.ShowStudentReports)
                ) && 
                (
                    DashboardText == other.DashboardText ||
                    DashboardText != null &&
                    DashboardText.Equals(other.DashboardText)
                ) && 
                (
                    RequiresSponsorContactInfo == other.RequiresSponsorContactInfo ||
                    
                    RequiresSponsorContactInfo.Equals(other.RequiresSponsorContactInfo)
                ) && 
                (
                    ServiceProposalRequired == other.ServiceProposalRequired ||
                    
                    ServiceProposalRequired.Equals(other.ServiceProposalRequired)
                ) && 
                (
                    BusinessPartnerExperiencesText == other.BusinessPartnerExperiencesText ||
                    BusinessPartnerExperiencesText != null &&
                    BusinessPartnerExperiencesText.Equals(other.BusinessPartnerExperiencesText)
                ) && 
                (
                    ServiceEventApprovalTagId == other.ServiceEventApprovalTagId ||
                    ServiceEventApprovalTagId != null &&
                    ServiceEventApprovalTagId.Equals(other.ServiceEventApprovalTagId)
                ) && 
                (
                    ServiceLogSignatureAllowed == other.ServiceLogSignatureAllowed ||
                    
                    ServiceLogSignatureAllowed.Equals(other.ServiceLogSignatureAllowed)
                ) && 
                (
                    JourneyTier == other.JourneyTier ||
                    JourneyTier != null &&
                    JourneyTier.Equals(other.JourneyTier)
                ) && 
                (
                    ExperienceApprovalEmailText == other.ExperienceApprovalEmailText ||
                    ExperienceApprovalEmailText != null &&
                    ExperienceApprovalEmailText.Equals(other.ExperienceApprovalEmailText)
                ) && 
                (
                    ShowStudentJourneyDashboard == other.ShowStudentJourneyDashboard ||
                    
                    ShowStudentJourneyDashboard.Equals(other.ShowStudentJourneyDashboard)
                ) && 
                (
                    SiteVisitSettings == other.SiteVisitSettings ||
                    SiteVisitSettings != null &&
                    SiteVisitSettings.Equals(other.SiteVisitSettings)
                ) && 
                (
                    HideGroupField == other.HideGroupField ||
                    
                    HideGroupField.Equals(other.HideGroupField)
                ) && 
                (
                    SuppressCounselorJourneyEmail == other.SuppressCounselorJourneyEmail ||
                    
                    SuppressCounselorJourneyEmail.Equals(other.SuppressCounselorJourneyEmail)
                ) && 
                (
                    ServeAutoApproveViaSponsor == other.ServeAutoApproveViaSponsor ||
                    
                    ServeAutoApproveViaSponsor.Equals(other.ServeAutoApproveViaSponsor)
                ) && 
                (
                    DisableStudentSeals == other.DisableStudentSeals ||
                    
                    DisableStudentSeals.Equals(other.DisableStudentSeals)
                ) && 
                (
                    GeoCheckInForServeEnabled == other.GeoCheckInForServeEnabled ||
                    
                    GeoCheckInForServeEnabled.Equals(other.GeoCheckInForServeEnabled)
                ) && 
                (
                    TeachersCanViewEntities == other.TeachersCanViewEntities ||
                    
                    TeachersCanViewEntities.Equals(other.TeachersCanViewEntities)
                ) && 
                (
                    RequiresServeSponsorEmail == other.RequiresServeSponsorEmail ||
                    
                    RequiresServeSponsorEmail.Equals(other.RequiresServeSponsorEmail)
                ) && 
                (
                    ExperiencesName == other.ExperiencesName ||
                    ExperiencesName != null &&
                    ExperiencesName.Equals(other.ExperiencesName)
                ) && 
                (
                    HourLimitPerDay == other.HourLimitPerDay ||
                    
                    HourLimitPerDay.Equals(other.HourLimitPerDay)
                ) && 
                (
                    AutoSSOLogin == other.AutoSSOLogin ||
                    
                    AutoSSOLogin.Equals(other.AutoSSOLogin)
                ) && 
                (
                    SuppressParentJourneyReviewEmail == other.SuppressParentJourneyReviewEmail ||
                    
                    SuppressParentJourneyReviewEmail.Equals(other.SuppressParentJourneyReviewEmail)
                ) && 
                (
                    HasBusinessPartnerPortal == other.HasBusinessPartnerPortal ||
                    
                    HasBusinessPartnerPortal.Equals(other.HasBusinessPartnerPortal)
                ) && 
                (
                    ShowServiceGradeLevelDashboardData == other.ShowServiceGradeLevelDashboardData ||
                    
                    ShowServiceGradeLevelDashboardData.Equals(other.ShowServiceGradeLevelDashboardData)
                ) && 
                (
                    CollegeLetterOfRecTarget == other.CollegeLetterOfRecTarget ||
                    CollegeLetterOfRecTarget != null &&
                    CollegeLetterOfRecTarget.Equals(other.CollegeLetterOfRecTarget)
                ) && 
                (
                    AdminSealsEnabled == other.AdminSealsEnabled ||
                    
                    AdminSealsEnabled.Equals(other.AdminSealsEnabled)
                ) && 
                (
                    AttendanceEnabled == other.AttendanceEnabled ||
                    
                    AttendanceEnabled.Equals(other.AttendanceEnabled)
                ) && 
                (
                    ActivityApplicationFormId == other.ActivityApplicationFormId ||
                    ActivityApplicationFormId != null &&
                    ActivityApplicationFormId.Equals(other.ActivityApplicationFormId)
                ) && 
                (
                    ShowParentsOnStudentProfile == other.ShowParentsOnStudentProfile ||
                    
                    ShowParentsOnStudentProfile.Equals(other.ShowParentsOnStudentProfile)
                ) && 
                (
                    HideContactOnExperienceCard == other.HideContactOnExperienceCard ||
                    
                    HideContactOnExperienceCard.Equals(other.HideContactOnExperienceCard)
                ) && 
                (
                    ShowStudentOverallMetrics == other.ShowStudentOverallMetrics ||
                    
                    ShowStudentOverallMetrics.Equals(other.ShowStudentOverallMetrics)
                ) && 
                (
                    RedirectBPPCreationToExternal == other.RedirectBPPCreationToExternal ||
                    
                    RedirectBPPCreationToExternal.Equals(other.RedirectBPPCreationToExternal)
                ) && 
                (
                    AllowStudentsToAddPayPeriods == other.AllowStudentsToAddPayPeriods ||
                    
                    AllowStudentsToAddPayPeriods.Equals(other.AllowStudentsToAddPayPeriods)
                ) && 
                (
                    ExperienceApplicationFormId == other.ExperienceApplicationFormId ||
                    ExperienceApplicationFormId != null &&
                    ExperienceApplicationFormId.Equals(other.ExperienceApplicationFormId)
                ) && 
                (
                    OutOfRangeDistance == other.OutOfRangeDistance ||
                    
                    OutOfRangeDistance.Equals(other.OutOfRangeDistance)
                ) && 
                (
                    ContactsName == other.ContactsName ||
                    ContactsName != null &&
                    ContactsName.Equals(other.ContactsName)
                ) && 
                (
                    ActivitiesName == other.ActivitiesName ||
                    ActivitiesName != null &&
                    ActivitiesName.Equals(other.ActivitiesName)
                ) && 
                (
                    ServiceLogSignatureRequired == other.ServiceLogSignatureRequired ||
                    
                    ServiceLogSignatureRequired.Equals(other.ServiceLogSignatureRequired)
                ) && 
                (
                    UseEarnedCreditsForBadgeCalculations == other.UseEarnedCreditsForBadgeCalculations ||
                    
                    UseEarnedCreditsForBadgeCalculations.Equals(other.UseEarnedCreditsForBadgeCalculations)
                ) && 
                (
                    SendsParentEmail == other.SendsParentEmail ||
                    
                    SendsParentEmail.Equals(other.SendsParentEmail)
                ) && 
                (
                    ExternalJobPageShortName == other.ExternalJobPageShortName ||
                    ExternalJobPageShortName != null &&
                    ExternalJobPageShortName.Equals(other.ExternalJobPageShortName)
                ) && 
                (
                    CollegeEssaysTarget == other.CollegeEssaysTarget ||
                    CollegeEssaysTarget != null &&
                    CollegeEssaysTarget.Equals(other.CollegeEssaysTarget)
                ) && 
                (
                    TestScoreConfiguration == other.TestScoreConfiguration ||
                    TestScoreConfiguration != null &&
                    TestScoreConfiguration.Equals(other.TestScoreConfiguration)
                ) && 
                (
                    ShowServiceGoals == other.ShowServiceGoals ||
                    
                    ShowServiceGoals.Equals(other.ShowServiceGoals)
                ) && 
                (
                    DescriptionPlaceholder == other.DescriptionPlaceholder ||
                    DescriptionPlaceholder != null &&
                    DescriptionPlaceholder.Equals(other.DescriptionPlaceholder)
                ) && 
                (
                    ShowsPlanInSidebar == other.ShowsPlanInSidebar ||
                    
                    ShowsPlanInSidebar.Equals(other.ShowsPlanInSidebar)
                ) && 
                (
                    StudentsCanUploadFiles == other.StudentsCanUploadFiles ||
                    
                    StudentsCanUploadFiles.Equals(other.StudentsCanUploadFiles)
                ) && 
                (
                    StudentsCanSubmitEntities == other.StudentsCanSubmitEntities ||
                    
                    StudentsCanSubmitEntities.Equals(other.StudentsCanSubmitEntities)
                ) && 
                (
                    ShowStudentJourneySidebar == other.ShowStudentJourneySidebar ||
                    
                    ShowStudentJourneySidebar.Equals(other.ShowStudentJourneySidebar)
                ) && 
                (
                    DisableShiftsOnStudentSide == other.DisableShiftsOnStudentSide ||
                    
                    DisableShiftsOnStudentSide.Equals(other.DisableShiftsOnStudentSide)
                ) && 
                (
                    ShowsHoursOnStudentsPage == other.ShowsHoursOnStudentsPage ||
                    
                    ShowsHoursOnStudentsPage.Equals(other.ShowsHoursOnStudentsPage)
                ) && 
                (
                    InterestedCollegeTarget == other.InterestedCollegeTarget ||
                    InterestedCollegeTarget != null &&
                    InterestedCollegeTarget.Equals(other.InterestedCollegeTarget)
                ) && 
                (
                    OrganizationsName == other.OrganizationsName ||
                    OrganizationsName != null &&
                    OrganizationsName.Equals(other.OrganizationsName)
                ) && 
                (
                    ServeSponsorEmailReminderDays == other.ServeSponsorEmailReminderDays ||
                    ServeSponsorEmailReminderDays != null &&
                    ServeSponsorEmailReminderDays.Equals(other.ServeSponsorEmailReminderDays)
                ) && 
                (
                    StudentsCanAddTags == other.StudentsCanAddTags ||
                    
                    StudentsCanAddTags.Equals(other.StudentsCanAddTags)
                ) && 
                (
                    DashboardBadgesName == other.DashboardBadgesName ||
                    DashboardBadgesName != null &&
                    DashboardBadgesName.Equals(other.DashboardBadgesName)
                ) && 
                (
                    ShowStudentsInExperienceTable == other.ShowStudentsInExperienceTable ||
                    
                    ShowStudentsInExperienceTable.Equals(other.ShowStudentsInExperienceTable)
                ) && 
                (
                    ServiceProposalEnabled == other.ServiceProposalEnabled ||
                    
                    ServiceProposalEnabled.Equals(other.ServiceProposalEnabled)
                ) && 
                (
                    EnrollmentsFileControlsCaseload == other.EnrollmentsFileControlsCaseload ||
                    
                    EnrollmentsFileControlsCaseload.Equals(other.EnrollmentsFileControlsCaseload)
                ) && 
                (
                    GeoCheckinEnabled == other.GeoCheckinEnabled ||
                    
                    GeoCheckinEnabled.Equals(other.GeoCheckinEnabled)
                ) && 
                (
                    NumberOfWords == other.NumberOfWords ||
                    
                    NumberOfWords.Equals(other.NumberOfWords)
                ) && 
                (
                    HideShareToLinkedin == other.HideShareToLinkedin ||
                    
                    HideShareToLinkedin.Equals(other.HideShareToLinkedin)
                ) && 
                (
                    BadgeLibraryName == other.BadgeLibraryName ||
                    BadgeLibraryName != null &&
                    BadgeLibraryName.Equals(other.BadgeLibraryName)
                ) && 
                (
                    TranscriptsName == other.TranscriptsName ||
                    TranscriptsName != null &&
                    TranscriptsName.Equals(other.TranscriptsName)
                ) && 
                (
                    ShouldHideGroupLogEntry == other.ShouldHideGroupLogEntry ||
                    
                    ShouldHideGroupLogEntry.Equals(other.ShouldHideGroupLogEntry)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + TeachersOnlySeeCaseloadExperiences.GetHashCode();
                    
                    hashCode = hashCode * 59 + TasksBelowBadges.GetHashCode();
                    
                    hashCode = hashCode * 59 + HideStudentGoalsOnDashboard.GetHashCode();
                    if (BadgesName != null)
                    hashCode = hashCode * 59 + BadgesName.GetHashCode();
                    
                    hashCode = hashCode * 59 + ParchmentEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + TasksTurnedOn.GetHashCode();
                    if (PlansName != null)
                    hashCode = hashCode * 59 + PlansName.GetHashCode();
                    
                    hashCode = hashCode * 59 + AutoSendWorkflows.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServeSponsorEmailsInTable.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExperienceApprovedWhenAddedByStudent.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequirePhoneOnServe.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowStudentReports.GetHashCode();
                    if (DashboardText != null)
                    hashCode = hashCode * 59 + DashboardText.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequiresSponsorContactInfo.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServiceProposalRequired.GetHashCode();
                    if (BusinessPartnerExperiencesText != null)
                    hashCode = hashCode * 59 + BusinessPartnerExperiencesText.GetHashCode();
                    if (ServiceEventApprovalTagId != null)
                    hashCode = hashCode * 59 + ServiceEventApprovalTagId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServiceLogSignatureAllowed.GetHashCode();
                    if (JourneyTier != null)
                    hashCode = hashCode * 59 + JourneyTier.GetHashCode();
                    if (ExperienceApprovalEmailText != null)
                    hashCode = hashCode * 59 + ExperienceApprovalEmailText.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowStudentJourneyDashboard.GetHashCode();
                    if (SiteVisitSettings != null)
                    hashCode = hashCode * 59 + SiteVisitSettings.GetHashCode();
                    
                    hashCode = hashCode * 59 + HideGroupField.GetHashCode();
                    
                    hashCode = hashCode * 59 + SuppressCounselorJourneyEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServeAutoApproveViaSponsor.GetHashCode();
                    
                    hashCode = hashCode * 59 + DisableStudentSeals.GetHashCode();
                    
                    hashCode = hashCode * 59 + GeoCheckInForServeEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + TeachersCanViewEntities.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequiresServeSponsorEmail.GetHashCode();
                    if (ExperiencesName != null)
                    hashCode = hashCode * 59 + ExperiencesName.GetHashCode();
                    
                    hashCode = hashCode * 59 + HourLimitPerDay.GetHashCode();
                    
                    hashCode = hashCode * 59 + AutoSSOLogin.GetHashCode();
                    
                    hashCode = hashCode * 59 + SuppressParentJourneyReviewEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasBusinessPartnerPortal.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowServiceGradeLevelDashboardData.GetHashCode();
                    if (CollegeLetterOfRecTarget != null)
                    hashCode = hashCode * 59 + CollegeLetterOfRecTarget.GetHashCode();
                    
                    hashCode = hashCode * 59 + AdminSealsEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + AttendanceEnabled.GetHashCode();
                    if (ActivityApplicationFormId != null)
                    hashCode = hashCode * 59 + ActivityApplicationFormId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowParentsOnStudentProfile.GetHashCode();
                    
                    hashCode = hashCode * 59 + HideContactOnExperienceCard.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowStudentOverallMetrics.GetHashCode();
                    
                    hashCode = hashCode * 59 + RedirectBPPCreationToExternal.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowStudentsToAddPayPeriods.GetHashCode();
                    if (ExperienceApplicationFormId != null)
                    hashCode = hashCode * 59 + ExperienceApplicationFormId.GetHashCode();
                    
                    hashCode = hashCode * 59 + OutOfRangeDistance.GetHashCode();
                    if (ContactsName != null)
                    hashCode = hashCode * 59 + ContactsName.GetHashCode();
                    if (ActivitiesName != null)
                    hashCode = hashCode * 59 + ActivitiesName.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServiceLogSignatureRequired.GetHashCode();
                    
                    hashCode = hashCode * 59 + UseEarnedCreditsForBadgeCalculations.GetHashCode();
                    
                    hashCode = hashCode * 59 + SendsParentEmail.GetHashCode();
                    if (ExternalJobPageShortName != null)
                    hashCode = hashCode * 59 + ExternalJobPageShortName.GetHashCode();
                    if (CollegeEssaysTarget != null)
                    hashCode = hashCode * 59 + CollegeEssaysTarget.GetHashCode();
                    if (TestScoreConfiguration != null)
                    hashCode = hashCode * 59 + TestScoreConfiguration.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowServiceGoals.GetHashCode();
                    if (DescriptionPlaceholder != null)
                    hashCode = hashCode * 59 + DescriptionPlaceholder.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowsPlanInSidebar.GetHashCode();
                    
                    hashCode = hashCode * 59 + StudentsCanUploadFiles.GetHashCode();
                    
                    hashCode = hashCode * 59 + StudentsCanSubmitEntities.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowStudentJourneySidebar.GetHashCode();
                    
                    hashCode = hashCode * 59 + DisableShiftsOnStudentSide.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowsHoursOnStudentsPage.GetHashCode();
                    if (InterestedCollegeTarget != null)
                    hashCode = hashCode * 59 + InterestedCollegeTarget.GetHashCode();
                    if (OrganizationsName != null)
                    hashCode = hashCode * 59 + OrganizationsName.GetHashCode();
                    if (ServeSponsorEmailReminderDays != null)
                    hashCode = hashCode * 59 + ServeSponsorEmailReminderDays.GetHashCode();
                    
                    hashCode = hashCode * 59 + StudentsCanAddTags.GetHashCode();
                    if (DashboardBadgesName != null)
                    hashCode = hashCode * 59 + DashboardBadgesName.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowStudentsInExperienceTable.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServiceProposalEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnrollmentsFileControlsCaseload.GetHashCode();
                    
                    hashCode = hashCode * 59 + GeoCheckinEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumberOfWords.GetHashCode();
                    
                    hashCode = hashCode * 59 + HideShareToLinkedin.GetHashCode();
                    if (BadgeLibraryName != null)
                    hashCode = hashCode * 59 + BadgeLibraryName.GetHashCode();
                    if (TranscriptsName != null)
                    hashCode = hashCode * 59 + TranscriptsName.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShouldHideGroupLogEntry.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdminUpdateSettingsRequestSettingsRequest left, AdminUpdateSettingsRequestSettingsRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdminUpdateSettingsRequestSettingsRequest left, AdminUpdateSettingsRequestSettingsRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
