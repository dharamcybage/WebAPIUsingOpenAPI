/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateUpdateWorkflowFormRequest : IEquatable<CreateUpdateWorkflowFormRequest>
    {
        /// <summary>
        /// Gets or Sets AdminNotificationUserIds
        /// </summary>
        [Required]
        [DataMember(Name="adminNotificationUserIds", EmitDefaultValue=false)]
        public List<long> AdminNotificationUserIds { get; set; }

        /// <summary>
        /// Gets or Sets SchoolApproverSigningOrders
        /// </summary>
        [Required]
        [DataMember(Name="schoolApproverSigningOrders", EmitDefaultValue=false)]
        public List<SchoolApproverSigningOrderDTO> SchoolApproverSigningOrders { get; set; }

        /// <summary>
        /// Gets or Sets FieldIds
        /// </summary>
        [Required]
        [DataMember(Name="fieldIds", EmitDefaultValue=false)]
        public List<long> FieldIds { get; set; }

        /// <summary>
        /// Gets or Sets SendsStudentEmail
        /// </summary>
        [Required]
        [DataMember(Name="sendsStudentEmail", EmitDefaultValue=true)]
        public bool SendsStudentEmail { get; set; }

        /// <summary>
        /// Gets or Sets SendsParentEmails
        /// </summary>
        [Required]
        [DataMember(Name="sendsParentEmails", EmitDefaultValue=true)]
        public bool SendsParentEmails { get; set; }

        /// <summary>
        /// Gets or Sets UsesSigningOrder
        /// </summary>
        [Required]
        [DataMember(Name="usesSigningOrder", EmitDefaultValue=true)]
        public bool UsesSigningOrder { get; set; }

        /// <summary>
        /// Gets or Sets SentAfterId
        /// </summary>
        [DataMember(Name="sent_after_id", EmitDefaultValue=true)]
        public long? SentAfterId { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfRequiredParents
        /// </summary>
        [DataMember(Name="numberOfRequiredParents", EmitDefaultValue=true)]
        public long? NumberOfRequiredParents { get; set; }

        /// <summary>
        /// Gets or Sets EvaluationId
        /// </summary>
        [DataMember(Name="evaluationId", EmitDefaultValue=true)]
        public long? EvaluationId { get; set; }

        /// <summary>
        /// Gets or Sets IsRejectable
        /// </summary>
        [Required]
        [DataMember(Name="isRejectable", EmitDefaultValue=true)]
        public bool IsRejectable { get; set; }

        /// <summary>
        /// Gets or Sets ReminderDays
        /// </summary>
        [Required]
        [DataMember(Name="reminderDays", EmitDefaultValue=true)]
        public long ReminderDays { get; set; }

        /// <summary>
        /// Gets or Sets SendsBusinessPartnerEmails
        /// </summary>
        [Required]
        [DataMember(Name="sendsBusinessPartnerEmails", EmitDefaultValue=true)]
        public bool SendsBusinessPartnerEmails { get; set; }

        /// <summary>
        /// Gets or Sets ManuallyAddedWorkflowFormRecipients
        /// </summary>
        [Required]
        [DataMember(Name="manuallyAddedWorkflowFormRecipients", EmitDefaultValue=false)]
        public List<ManuallyAddedWorkflowFormRecipientRequest> ManuallyAddedWorkflowFormRecipients { get; set; }

        /// <summary>
        /// Gets or Sets FormId
        /// </summary>
        [Required]
        [DataMember(Name="form_id", EmitDefaultValue=true)]
        public long FormId { get; set; }

        /// <summary>
        /// Gets or Sets ParentSigningOrder
        /// </summary>
        [DataMember(Name="parentSigningOrder", EmitDefaultValue=true)]
        public long? ParentSigningOrder { get; set; }

        /// <summary>
        /// Gets or Sets StudentSigningOrder
        /// </summary>
        [DataMember(Name="studentSigningOrder", EmitDefaultValue=true)]
        public long? StudentSigningOrder { get; set; }

        /// <summary>
        /// Gets or Sets BusinessPartnerSigningOrder
        /// </summary>
        [DataMember(Name="businessPartnerSigningOrder", EmitDefaultValue=true)]
        public long? BusinessPartnerSigningOrder { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateUpdateWorkflowFormRequest {\n");
            sb.Append("  AdminNotificationUserIds: ").Append(AdminNotificationUserIds).Append("\n");
            sb.Append("  SchoolApproverSigningOrders: ").Append(SchoolApproverSigningOrders).Append("\n");
            sb.Append("  FieldIds: ").Append(FieldIds).Append("\n");
            sb.Append("  SendsStudentEmail: ").Append(SendsStudentEmail).Append("\n");
            sb.Append("  SendsParentEmails: ").Append(SendsParentEmails).Append("\n");
            sb.Append("  UsesSigningOrder: ").Append(UsesSigningOrder).Append("\n");
            sb.Append("  SentAfterId: ").Append(SentAfterId).Append("\n");
            sb.Append("  NumberOfRequiredParents: ").Append(NumberOfRequiredParents).Append("\n");
            sb.Append("  EvaluationId: ").Append(EvaluationId).Append("\n");
            sb.Append("  IsRejectable: ").Append(IsRejectable).Append("\n");
            sb.Append("  ReminderDays: ").Append(ReminderDays).Append("\n");
            sb.Append("  SendsBusinessPartnerEmails: ").Append(SendsBusinessPartnerEmails).Append("\n");
            sb.Append("  ManuallyAddedWorkflowFormRecipients: ").Append(ManuallyAddedWorkflowFormRecipients).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  ParentSigningOrder: ").Append(ParentSigningOrder).Append("\n");
            sb.Append("  StudentSigningOrder: ").Append(StudentSigningOrder).Append("\n");
            sb.Append("  BusinessPartnerSigningOrder: ").Append(BusinessPartnerSigningOrder).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateUpdateWorkflowFormRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateUpdateWorkflowFormRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateUpdateWorkflowFormRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateUpdateWorkflowFormRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AdminNotificationUserIds == other.AdminNotificationUserIds ||
                    AdminNotificationUserIds != null &&
                    other.AdminNotificationUserIds != null &&
                    AdminNotificationUserIds.SequenceEqual(other.AdminNotificationUserIds)
                ) && 
                (
                    SchoolApproverSigningOrders == other.SchoolApproverSigningOrders ||
                    SchoolApproverSigningOrders != null &&
                    other.SchoolApproverSigningOrders != null &&
                    SchoolApproverSigningOrders.SequenceEqual(other.SchoolApproverSigningOrders)
                ) && 
                (
                    FieldIds == other.FieldIds ||
                    FieldIds != null &&
                    other.FieldIds != null &&
                    FieldIds.SequenceEqual(other.FieldIds)
                ) && 
                (
                    SendsStudentEmail == other.SendsStudentEmail ||
                    
                    SendsStudentEmail.Equals(other.SendsStudentEmail)
                ) && 
                (
                    SendsParentEmails == other.SendsParentEmails ||
                    
                    SendsParentEmails.Equals(other.SendsParentEmails)
                ) && 
                (
                    UsesSigningOrder == other.UsesSigningOrder ||
                    
                    UsesSigningOrder.Equals(other.UsesSigningOrder)
                ) && 
                (
                    SentAfterId == other.SentAfterId ||
                    SentAfterId != null &&
                    SentAfterId.Equals(other.SentAfterId)
                ) && 
                (
                    NumberOfRequiredParents == other.NumberOfRequiredParents ||
                    NumberOfRequiredParents != null &&
                    NumberOfRequiredParents.Equals(other.NumberOfRequiredParents)
                ) && 
                (
                    EvaluationId == other.EvaluationId ||
                    EvaluationId != null &&
                    EvaluationId.Equals(other.EvaluationId)
                ) && 
                (
                    IsRejectable == other.IsRejectable ||
                    
                    IsRejectable.Equals(other.IsRejectable)
                ) && 
                (
                    ReminderDays == other.ReminderDays ||
                    
                    ReminderDays.Equals(other.ReminderDays)
                ) && 
                (
                    SendsBusinessPartnerEmails == other.SendsBusinessPartnerEmails ||
                    
                    SendsBusinessPartnerEmails.Equals(other.SendsBusinessPartnerEmails)
                ) && 
                (
                    ManuallyAddedWorkflowFormRecipients == other.ManuallyAddedWorkflowFormRecipients ||
                    ManuallyAddedWorkflowFormRecipients != null &&
                    other.ManuallyAddedWorkflowFormRecipients != null &&
                    ManuallyAddedWorkflowFormRecipients.SequenceEqual(other.ManuallyAddedWorkflowFormRecipients)
                ) && 
                (
                    FormId == other.FormId ||
                    
                    FormId.Equals(other.FormId)
                ) && 
                (
                    ParentSigningOrder == other.ParentSigningOrder ||
                    ParentSigningOrder != null &&
                    ParentSigningOrder.Equals(other.ParentSigningOrder)
                ) && 
                (
                    StudentSigningOrder == other.StudentSigningOrder ||
                    StudentSigningOrder != null &&
                    StudentSigningOrder.Equals(other.StudentSigningOrder)
                ) && 
                (
                    BusinessPartnerSigningOrder == other.BusinessPartnerSigningOrder ||
                    BusinessPartnerSigningOrder != null &&
                    BusinessPartnerSigningOrder.Equals(other.BusinessPartnerSigningOrder)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AdminNotificationUserIds != null)
                    hashCode = hashCode * 59 + AdminNotificationUserIds.GetHashCode();
                    if (SchoolApproverSigningOrders != null)
                    hashCode = hashCode * 59 + SchoolApproverSigningOrders.GetHashCode();
                    if (FieldIds != null)
                    hashCode = hashCode * 59 + FieldIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + SendsStudentEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + SendsParentEmails.GetHashCode();
                    
                    hashCode = hashCode * 59 + UsesSigningOrder.GetHashCode();
                    if (SentAfterId != null)
                    hashCode = hashCode * 59 + SentAfterId.GetHashCode();
                    if (NumberOfRequiredParents != null)
                    hashCode = hashCode * 59 + NumberOfRequiredParents.GetHashCode();
                    if (EvaluationId != null)
                    hashCode = hashCode * 59 + EvaluationId.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsRejectable.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReminderDays.GetHashCode();
                    
                    hashCode = hashCode * 59 + SendsBusinessPartnerEmails.GetHashCode();
                    if (ManuallyAddedWorkflowFormRecipients != null)
                    hashCode = hashCode * 59 + ManuallyAddedWorkflowFormRecipients.GetHashCode();
                    
                    hashCode = hashCode * 59 + FormId.GetHashCode();
                    if (ParentSigningOrder != null)
                    hashCode = hashCode * 59 + ParentSigningOrder.GetHashCode();
                    if (StudentSigningOrder != null)
                    hashCode = hashCode * 59 + StudentSigningOrder.GetHashCode();
                    if (BusinessPartnerSigningOrder != null)
                    hashCode = hashCode * 59 + BusinessPartnerSigningOrder.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateUpdateWorkflowFormRequest left, CreateUpdateWorkflowFormRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateUpdateWorkflowFormRequest left, CreateUpdateWorkflowFormRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
