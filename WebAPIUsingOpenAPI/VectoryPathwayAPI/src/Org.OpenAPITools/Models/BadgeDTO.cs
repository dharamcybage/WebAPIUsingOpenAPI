/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BadgeDTO : IEquatable<BadgeDTO>
    {
        /// <summary>
        /// Gets or Sets NumberOfCompletedExperiences
        /// </summary>
        [DataMember(Name="numberOfCompletedExperiences", EmitDefaultValue=true)]
        public long? NumberOfCompletedExperiences { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl", EmitDefaultValue=true)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets DecisionPointsFormId
        /// </summary>
        [DataMember(Name="decision_points_form_id", EmitDefaultValue=true)]
        public long? DecisionPointsFormId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ConditionalBadgeGroupId
        /// </summary>
        [DataMember(Name="conditional_badge_group_id", EmitDefaultValue=true)]
        public long? ConditionalBadgeGroupId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfRequiredCareerSurveys
        /// </summary>
        [Required]
        [DataMember(Name="numberOfRequiredCareerSurveys", EmitDefaultValue=true)]
        public long NumberOfRequiredCareerSurveys { get; set; }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folder_id", EmitDefaultValue=true)]
        public long? FolderId { get; set; }

        /// <summary>
        /// Gets or Sets BadgeGroupId
        /// </summary>
        [DataMember(Name="badge_group_id", EmitDefaultValue=true)]
        public long? BadgeGroupId { get; set; }

        /// <summary>
        /// Gets or Sets SelectableOnPlan
        /// </summary>
        [Required]
        [DataMember(Name="selectableOnPlan", EmitDefaultValue=true)]
        public bool SelectableOnPlan { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deletedAt", EmitDefaultValue=true)]
        public DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CommunityServiceHours
        /// </summary>
        [DataMember(Name="communityServiceHours", EmitDefaultValue=true)]
        public double? CommunityServiceHours { get; set; }

        /// <summary>
        /// Gets or Sets DecisionPointDescription
        /// </summary>
        [DataMember(Name="decisionPointDescription", EmitDefaultValue=true)]
        public string DecisionPointDescription { get; set; }

        /// <summary>
        /// Gets or Sets ShowsOnStudentDashboard
        /// </summary>
        [Required]
        [DataMember(Name="showsOnStudentDashboard", EmitDefaultValue=true)]
        public bool ShowsOnStudentDashboard { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceHours
        /// </summary>
        [DataMember(Name="experienceHours", EmitDefaultValue=true)]
        public double? ExperienceHours { get; set; }

        /// <summary>
        /// Gets or Sets AppearsInLibrary
        /// </summary>
        [Required]
        [DataMember(Name="appearsInLibrary", EmitDefaultValue=true)]
        public bool AppearsInLibrary { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BadgeDTO {\n");
            sb.Append("  NumberOfCompletedExperiences: ").Append(NumberOfCompletedExperiences).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  DecisionPointsFormId: ").Append(DecisionPointsFormId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ConditionalBadgeGroupId: ").Append(ConditionalBadgeGroupId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberOfRequiredCareerSurveys: ").Append(NumberOfRequiredCareerSurveys).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  BadgeGroupId: ").Append(BadgeGroupId).Append("\n");
            sb.Append("  SelectableOnPlan: ").Append(SelectableOnPlan).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CommunityServiceHours: ").Append(CommunityServiceHours).Append("\n");
            sb.Append("  DecisionPointDescription: ").Append(DecisionPointDescription).Append("\n");
            sb.Append("  ShowsOnStudentDashboard: ").Append(ShowsOnStudentDashboard).Append("\n");
            sb.Append("  ExperienceHours: ").Append(ExperienceHours).Append("\n");
            sb.Append("  AppearsInLibrary: ").Append(AppearsInLibrary).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BadgeDTO)obj);
        }

        /// <summary>
        /// Returns true if BadgeDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of BadgeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BadgeDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NumberOfCompletedExperiences == other.NumberOfCompletedExperiences ||
                    NumberOfCompletedExperiences != null &&
                    NumberOfCompletedExperiences.Equals(other.NumberOfCompletedExperiences)
                ) && 
                (
                    ImageUrl == other.ImageUrl ||
                    ImageUrl != null &&
                    ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    DecisionPointsFormId == other.DecisionPointsFormId ||
                    DecisionPointsFormId != null &&
                    DecisionPointsFormId.Equals(other.DecisionPointsFormId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ConditionalBadgeGroupId == other.ConditionalBadgeGroupId ||
                    ConditionalBadgeGroupId != null &&
                    ConditionalBadgeGroupId.Equals(other.ConditionalBadgeGroupId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NumberOfRequiredCareerSurveys == other.NumberOfRequiredCareerSurveys ||
                    
                    NumberOfRequiredCareerSurveys.Equals(other.NumberOfRequiredCareerSurveys)
                ) && 
                (
                    FolderId == other.FolderId ||
                    FolderId != null &&
                    FolderId.Equals(other.FolderId)
                ) && 
                (
                    BadgeGroupId == other.BadgeGroupId ||
                    BadgeGroupId != null &&
                    BadgeGroupId.Equals(other.BadgeGroupId)
                ) && 
                (
                    SelectableOnPlan == other.SelectableOnPlan ||
                    
                    SelectableOnPlan.Equals(other.SelectableOnPlan)
                ) && 
                (
                    DeletedAt == other.DeletedAt ||
                    DeletedAt != null &&
                    DeletedAt.Equals(other.DeletedAt)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    CommunityServiceHours == other.CommunityServiceHours ||
                    CommunityServiceHours != null &&
                    CommunityServiceHours.Equals(other.CommunityServiceHours)
                ) && 
                (
                    DecisionPointDescription == other.DecisionPointDescription ||
                    DecisionPointDescription != null &&
                    DecisionPointDescription.Equals(other.DecisionPointDescription)
                ) && 
                (
                    ShowsOnStudentDashboard == other.ShowsOnStudentDashboard ||
                    
                    ShowsOnStudentDashboard.Equals(other.ShowsOnStudentDashboard)
                ) && 
                (
                    ExperienceHours == other.ExperienceHours ||
                    ExperienceHours != null &&
                    ExperienceHours.Equals(other.ExperienceHours)
                ) && 
                (
                    AppearsInLibrary == other.AppearsInLibrary ||
                    
                    AppearsInLibrary.Equals(other.AppearsInLibrary)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NumberOfCompletedExperiences != null)
                    hashCode = hashCode * 59 + NumberOfCompletedExperiences.GetHashCode();
                    if (ImageUrl != null)
                    hashCode = hashCode * 59 + ImageUrl.GetHashCode();
                    if (DecisionPointsFormId != null)
                    hashCode = hashCode * 59 + DecisionPointsFormId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ConditionalBadgeGroupId != null)
                    hashCode = hashCode * 59 + ConditionalBadgeGroupId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumberOfRequiredCareerSurveys.GetHashCode();
                    if (FolderId != null)
                    hashCode = hashCode * 59 + FolderId.GetHashCode();
                    if (BadgeGroupId != null)
                    hashCode = hashCode * 59 + BadgeGroupId.GetHashCode();
                    
                    hashCode = hashCode * 59 + SelectableOnPlan.GetHashCode();
                    if (DeletedAt != null)
                    hashCode = hashCode * 59 + DeletedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CommunityServiceHours != null)
                    hashCode = hashCode * 59 + CommunityServiceHours.GetHashCode();
                    if (DecisionPointDescription != null)
                    hashCode = hashCode * 59 + DecisionPointDescription.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowsOnStudentDashboard.GetHashCode();
                    if (ExperienceHours != null)
                    hashCode = hashCode * 59 + ExperienceHours.GetHashCode();
                    
                    hashCode = hashCode * 59 + AppearsInLibrary.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BadgeDTO left, BadgeDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BadgeDTO left, BadgeDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
