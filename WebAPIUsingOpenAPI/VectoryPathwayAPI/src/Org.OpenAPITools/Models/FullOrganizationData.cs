/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FullOrganizationData : IEquatable<FullOrganizationData>
    {
        /// <summary>
        /// Gets or Sets ProfileImageUrl
        /// </summary>
        [DataMember(Name="profileImageUrl", EmitDefaultValue=true)]
        public string ProfileImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByDistrict
        /// </summary>
        [Required]
        [DataMember(Name="createdByDistrict", EmitDefaultValue=false)]
        public string CreatedByDistrict { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByName
        /// </summary>
        [Required]
        [DataMember(Name="createdByName", EmitDefaultValue=false)]
        public string CreatedByName { get; set; }

        /// <summary>
        /// Gets or Sets Activities
        /// </summary>
        [Required]
        [DataMember(Name="activities", EmitDefaultValue=false)]
        public List<ActivityDTO> Activities { get; set; }

        /// <summary>
        /// Gets or Sets ExternalCreatedByEmail
        /// </summary>
        [DataMember(Name="externalCreatedByEmail", EmitDefaultValue=true)]
        public string ExternalCreatedByEmail { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name="website", EmitDefaultValue=true)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets MainNotes
        /// </summary>
        [Required]
        [DataMember(Name="mainNotes", EmitDefaultValue=false)]
        public string MainNotes { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [Required]
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<TagDTO> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [Required]
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<ContactDTO> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public FormSubmissionResponse CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets ExternalCreatedByName
        /// </summary>
        [DataMember(Name="externalCreatedByName", EmitDefaultValue=true)]
        public string ExternalCreatedByName { get; set; }

        /// <summary>
        /// Gets or Sets Locations
        /// </summary>
        [Required]
        [DataMember(Name="locations", EmitDefaultValue=false)]
        public List<LocationDTO> Locations { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=true)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Experiences
        /// </summary>
        [Required]
        [DataMember(Name="experiences", EmitDefaultValue=false)]
        public List<ExperienceOrganizationData> Experiences { get; set; }

        /// <summary>
        /// Gets or Sets LocationDescription
        /// </summary>
        [Required]
        [DataMember(Name="locationDescription", EmitDefaultValue=false)]
        public string LocationDescription { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [Required]
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<FullOrganizationNote> Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FullOrganizationData {\n");
            sb.Append("  ProfileImageUrl: ").Append(ProfileImageUrl).Append("\n");
            sb.Append("  CreatedByDistrict: ").Append(CreatedByDistrict).Append("\n");
            sb.Append("  CreatedByName: ").Append(CreatedByName).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  ExternalCreatedByEmail: ").Append(ExternalCreatedByEmail).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MainNotes: ").Append(MainNotes).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  ExternalCreatedByName: ").Append(ExternalCreatedByName).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Experiences: ").Append(Experiences).Append("\n");
            sb.Append("  LocationDescription: ").Append(LocationDescription).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FullOrganizationData)obj);
        }

        /// <summary>
        /// Returns true if FullOrganizationData instances are equal
        /// </summary>
        /// <param name="other">Instance of FullOrganizationData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FullOrganizationData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProfileImageUrl == other.ProfileImageUrl ||
                    ProfileImageUrl != null &&
                    ProfileImageUrl.Equals(other.ProfileImageUrl)
                ) && 
                (
                    CreatedByDistrict == other.CreatedByDistrict ||
                    CreatedByDistrict != null &&
                    CreatedByDistrict.Equals(other.CreatedByDistrict)
                ) && 
                (
                    CreatedByName == other.CreatedByName ||
                    CreatedByName != null &&
                    CreatedByName.Equals(other.CreatedByName)
                ) && 
                (
                    Activities == other.Activities ||
                    Activities != null &&
                    other.Activities != null &&
                    Activities.SequenceEqual(other.Activities)
                ) && 
                (
                    ExternalCreatedByEmail == other.ExternalCreatedByEmail ||
                    ExternalCreatedByEmail != null &&
                    ExternalCreatedByEmail.Equals(other.ExternalCreatedByEmail)
                ) && 
                (
                    Website == other.Website ||
                    Website != null &&
                    Website.Equals(other.Website)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    MainNotes == other.MainNotes ||
                    MainNotes != null &&
                    MainNotes.Equals(other.MainNotes)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Contacts == other.Contacts ||
                    Contacts != null &&
                    other.Contacts != null &&
                    Contacts.SequenceEqual(other.Contacts)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    ExternalCreatedByName == other.ExternalCreatedByName ||
                    ExternalCreatedByName != null &&
                    ExternalCreatedByName.Equals(other.ExternalCreatedByName)
                ) && 
                (
                    Locations == other.Locations ||
                    Locations != null &&
                    other.Locations != null &&
                    Locations.SequenceEqual(other.Locations)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    Experiences == other.Experiences ||
                    Experiences != null &&
                    other.Experiences != null &&
                    Experiences.SequenceEqual(other.Experiences)
                ) && 
                (
                    LocationDescription == other.LocationDescription ||
                    LocationDescription != null &&
                    LocationDescription.Equals(other.LocationDescription)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    other.Notes != null &&
                    Notes.SequenceEqual(other.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProfileImageUrl != null)
                    hashCode = hashCode * 59 + ProfileImageUrl.GetHashCode();
                    if (CreatedByDistrict != null)
                    hashCode = hashCode * 59 + CreatedByDistrict.GetHashCode();
                    if (CreatedByName != null)
                    hashCode = hashCode * 59 + CreatedByName.GetHashCode();
                    if (Activities != null)
                    hashCode = hashCode * 59 + Activities.GetHashCode();
                    if (ExternalCreatedByEmail != null)
                    hashCode = hashCode * 59 + ExternalCreatedByEmail.GetHashCode();
                    if (Website != null)
                    hashCode = hashCode * 59 + Website.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (MainNotes != null)
                    hashCode = hashCode * 59 + MainNotes.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (Contacts != null)
                    hashCode = hashCode * 59 + Contacts.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (ExternalCreatedByName != null)
                    hashCode = hashCode * 59 + ExternalCreatedByName.GetHashCode();
                    if (Locations != null)
                    hashCode = hashCode * 59 + Locations.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (Experiences != null)
                    hashCode = hashCode * 59 + Experiences.GetHashCode();
                    if (LocationDescription != null)
                    hashCode = hashCode * 59 + LocationDescription.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FullOrganizationData left, FullOrganizationData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FullOrganizationData left, FullOrganizationData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
