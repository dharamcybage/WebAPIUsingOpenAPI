/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Swashbuckle.Swagger.Annotations; using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ServiceGroupApiController : ControllerBase
    { 
        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="body"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DeleteServiceGroupApiConsumerV1GroupsByServiceGroups")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteServiceGroupApiConsumerV1GroupsByServiceGroups([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromBody]Object body, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="coCurricularGroupFiles"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/files/{co_curricular_group_files}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteServiceGroupApiConsumerV1GroupsByServiceGroupsFilesByCoCurricularGroupFiles")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteServiceGroupApiConsumerV1GroupsByServiceGroupsFilesByCoCurricularGroupFiles([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "co_curricular_group_files")][Required]string coCurricularGroupFiles, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="pendingServiceEventApprovals"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/service-event-pending/{pending_service_event_approvals}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteServiceGroupApiConsumerV1GroupsByServiceGroupsServiceEventPendingByPendingServiceEventApprovals")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteServiceGroupApiConsumerV1GroupsByServiceGroupsServiceEventPendingByPendingServiceEventApprovals([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "pending_service_event_approvals")][Required]string pendingServiceEventApprovals, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group Users
        /// </summary>
        /// <remarks>Service Group Users</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="users"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/users/{users}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteServiceGroupApiConsumerV1GroupsByServiceGroupsUsersByUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteServiceGroupApiConsumerV1GroupsByServiceGroupsUsersByUsers([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "users")][Required]string users, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Group/api/consumer/v1/groups")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceGroupApiConsumerV1Groups")]
        public virtual IActionResult GetServiceGroupApiConsumerV1Groups([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Service Group Data
        /// </summary>
        /// <remarks>Service Group Data</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceGroupApiConsumerV1GroupsByServiceGroups")]
        [SwaggerResponse(statusCode: 200, type: typeof(CoCurricularGroupDTO), description: "OK")]
        public virtual IActionResult GetServiceGroupApiConsumerV1GroupsByServiceGroups([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CoCurricularGroupDTO));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"requiresVerification\" : true,\r\n  \"allowsExternalSubmission\" : true,\r\n  \"individualGoal\" : 5.962133916683182,\r\n  \"groupGoal\" : 5.637376656633329,\r\n  \"admin\" : 1,\r\n  \"description\" : \"description\",\r\n  \"default_school_id\" : 6,\r\n  \"maxStudentsAllowed\" : 0,\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"acceptingStudents\" : true,\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"hasEngage\" : true,\r\n  \"twitterHandle\" : \"twitterHandle\",\r\n  \"name\" : \"name\",\r\n  \"isDefaultSchoolGroup\" : true,\r\n  \"youtubeLink\" : \"youtubeLink\",\r\n  \"id\" : 2,\r\n  \"joinCode\" : \"joinCode\",\r\n  \"hasService\" : true,\r\n  \"externalEventToken\" : \"externalEventToken\",\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CoCurricularGroupDTO>(exampleJson)
            : default(CoCurricularGroupDTO);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group Data
        /// </summary>
        /// <remarks>Service Group Data</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/externalevents")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceGroupApiConsumerV1GroupsByServiceGroupsExternalevents")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ExternallyAddedServiceEventDTO>), description: "OK")]
        public virtual IActionResult GetServiceGroupApiConsumerV1GroupsByServiceGroupsExternalevents([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ExternallyAddedServiceEventDTO>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"contactEmail\" : \"contactEmail\",\r\n  \"contactName\" : \"contactName\",\r\n  \"description\" : \"description\",\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"group_id\" : 1,\r\n  \"organization_id\" : 6,\r\n  \"maxNumberOfStudents\" : 5,\r\n  \"name\" : \"name\",\r\n  \"location\" : \"location\",\r\n  \"id\" : 0,\r\n  \"time\" : \"time\",\r\n  \"contactPhone\" : \"contactPhone\",\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}, {\r\n  \"date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"contactEmail\" : \"contactEmail\",\r\n  \"contactName\" : \"contactName\",\r\n  \"description\" : \"description\",\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"group_id\" : 1,\r\n  \"organization_id\" : 6,\r\n  \"maxNumberOfStudents\" : 5,\r\n  \"name\" : \"name\",\r\n  \"location\" : \"location\",\r\n  \"id\" : 0,\r\n  \"time\" : \"time\",\r\n  \"contactPhone\" : \"contactPhone\",\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ExternallyAddedServiceEventDTO>>(exampleJson)
            : default(List<ExternallyAddedServiceEventDTO>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group Data
        /// </summary>
        /// <remarks>Service Group Data</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/full")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceGroupApiConsumerV1GroupsByServiceGroupsFull")]
        [SwaggerResponse(statusCode: 200, type: typeof(FullServiceGroupResponse), description: "OK")]
        public virtual IActionResult GetServiceGroupApiConsumerV1GroupsByServiceGroupsFull([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FullServiceGroupResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"upcomingServiceEvents\" : [ {\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"dateString\" : \"dateString\",\r\n    \"time\" : \"time\",\r\n    \"id\" : 5,\r\n    \"school_year_id\" : 5\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"dateString\" : \"dateString\",\r\n    \"time\" : \"time\",\r\n    \"id\" : 5,\r\n    \"school_year_id\" : 5\r\n  } ],\r\n  \"pendingServiceEvents\" : [ null, null ],\r\n  \"admin\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"description\" : \"description\",\r\n  \"posts\" : [ {\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"author\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"id\" : 4,\r\n    \"message\" : \"message\",\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  }, {\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"author\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"id\" : 4,\r\n    \"message\" : \"message\",\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  } ],\r\n  \"pendingMembers\" : [ {\r\n    \"userServiceGroup\" : {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"coCurricularGroupId\" : 1,\r\n      \"isVerified\" : true,\r\n      \"id\" : 6,\r\n      \"isAdmin\" : true,\r\n      \"userId\" : 0,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    },\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  }, {\r\n    \"userServiceGroup\" : {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"coCurricularGroupId\" : 1,\r\n      \"isVerified\" : true,\r\n      \"id\" : 6,\r\n      \"isAdmin\" : true,\r\n      \"userId\" : 0,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    },\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  } ],\r\n  \"pendingStudents\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  } ],\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"hasEngage\" : true,\r\n  \"youtubeLink\" : \"youtubeLink\",\r\n  \"id\" : 2,\r\n  \"joinCode\" : \"joinCode\",\r\n  \"individualGoalPercentage\" : 1,\r\n  \"hasService\" : true,\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"requiresVerification\" : true,\r\n  \"allowsExternalSubmission\" : true,\r\n  \"individualGoal\" : 5.637376656633329,\r\n  \"groupGoal\" : 5.962133916683182,\r\n  \"pastServiceEvents\" : [ {\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"dateString\" : \"dateString\",\r\n    \"time\" : \"time\",\r\n    \"id\" : 5,\r\n    \"school_year_id\" : 5\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"dateString\" : \"dateString\",\r\n    \"time\" : \"time\",\r\n    \"id\" : 5,\r\n    \"school_year_id\" : 5\r\n  } ],\r\n  \"maxStudentsAllowed\" : 7,\r\n  \"totalHoursForGroup\" : 1.2315135367772556,\r\n  \"twitterHandle\" : \"twitterHandle\",\r\n  \"name\" : \"name\",\r\n  \"approvedMembers\" : [ {\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"hoursCompleted\" : 6.84685269835264,\r\n    \"parents\" : [ {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"id\" : 7\r\n    }, {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"id\" : 7\r\n    } ]\r\n  }, {\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"hoursCompleted\" : 6.84685269835264,\r\n    \"parents\" : [ {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"id\" : 7\r\n    }, {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"id\" : 7\r\n    } ]\r\n  } ],\r\n  \"isDefaultSchoolGroup\" : true,\r\n  \"files\" : [ {\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"fileUrl\" : \"fileUrl\",\r\n    \"id\" : 1,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  }, {\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"fileUrl\" : \"fileUrl\",\r\n    \"id\" : 1,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  } ],\r\n  \"groupGoalPercentage\" : 1,\r\n  \"pendingLogs\" : [ {\r\n    \"sponsor\" : {\r\n      \"name\" : \"name\",\r\n      \"status\" : 9\r\n    },\r\n    \"totalHours\" : 7.061401241503109,\r\n    \"verified\" : true,\r\n    \"service_event_id\" : 3,\r\n    \"id\" : 2,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\"\r\n    }\r\n  }, {\r\n    \"sponsor\" : {\r\n      \"name\" : \"name\",\r\n      \"status\" : 9\r\n    },\r\n    \"totalHours\" : 7.061401241503109,\r\n    \"verified\" : true,\r\n    \"service_event_id\" : 3,\r\n    \"id\" : 2,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\"\r\n    }\r\n  } ],\r\n  \"externalEventToken\" : \"externalEventToken\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FullServiceGroupResponse>(exampleJson)
            : default(FullServiceGroupResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group Data
        /// </summary>
        /// <remarks>Service Group Data</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/isadmin")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceGroupApiConsumerV1GroupsByServiceGroupsIsadmin")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceGroupAdminStatusResponse), description: "OK")]
        public virtual IActionResult GetServiceGroupApiConsumerV1GroupsByServiceGroupsIsadmin([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceGroupAdminStatusResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"isAdmin\" : true\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceGroupAdminStatusResponse>(exampleJson)
            : default(ServiceGroupAdminStatusResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group Users
        /// </summary>
        /// <remarks>Service Group Users</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/users")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceGroupApiConsumerV1GroupsByServiceGroupsUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceGroupUsersResponse), description: "OK")]
        public virtual IActionResult GetServiceGroupApiConsumerV1GroupsByServiceGroupsUsers([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceGroupUsersResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"users\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceGroupUsersResponse>(exampleJson)
            : default(ServiceGroupUsersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Group/api/consumer/v1/groups/create")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceGroupApiConsumerV1GroupsCreate")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceGroupControllerMetadataResponse), description: "OK")]
        public virtual IActionResult GetServiceGroupApiConsumerV1GroupsCreate([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceGroupControllerMetadataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"users\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceGroupControllerMetadataResponse>(exampleJson)
            : default(ServiceGroupControllerMetadataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceGroupControllerCreateEditRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchServiceGroupApiConsumerV1GroupsByServiceGroups")]
        [SwaggerResponse(statusCode: 200, type: typeof(CoCurricularGroupDTO), description: "OK")]
        public virtual IActionResult PatchServiceGroupApiConsumerV1GroupsByServiceGroups([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromBody]ServiceGroupControllerCreateEditRequest serviceGroupControllerCreateEditRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CoCurricularGroupDTO));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"requiresVerification\" : true,\r\n  \"allowsExternalSubmission\" : true,\r\n  \"individualGoal\" : 5.962133916683182,\r\n  \"groupGoal\" : 5.637376656633329,\r\n  \"admin\" : 1,\r\n  \"description\" : \"description\",\r\n  \"default_school_id\" : 6,\r\n  \"maxStudentsAllowed\" : 0,\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"acceptingStudents\" : true,\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"hasEngage\" : true,\r\n  \"twitterHandle\" : \"twitterHandle\",\r\n  \"name\" : \"name\",\r\n  \"isDefaultSchoolGroup\" : true,\r\n  \"youtubeLink\" : \"youtubeLink\",\r\n  \"id\" : 2,\r\n  \"joinCode\" : \"joinCode\",\r\n  \"hasService\" : true,\r\n  \"externalEventToken\" : \"externalEventToken\",\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CoCurricularGroupDTO>(exampleJson)
            : default(CoCurricularGroupDTO);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="pendingServiceEventApprovals"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/service-event-pending/{pending_service_event_approvals}")]
        [ValidateModelState]
        [SwaggerOperation("PatchServiceGroupApiConsumerV1GroupsByServiceGroupsServiceEventPendingByPendingServiceEventApprovals")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchServiceGroupApiConsumerV1GroupsByServiceGroupsServiceEventPendingByPendingServiceEventApprovals([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "pending_service_event_approvals")][Required]string pendingServiceEventApprovals, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group Users
        /// </summary>
        /// <remarks>Service Group Users</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/users/addschool")]
        [ValidateModelState]
        [SwaggerOperation("PatchServiceGroupApiConsumerV1GroupsByServiceGroupsUsersAddschool")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchServiceGroupApiConsumerV1GroupsByServiceGroupsUsersAddschool([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group Users
        /// </summary>
        /// <remarks>Service Group Users</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="users"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/users/{users}")]
        [ValidateModelState]
        [SwaggerOperation("PatchServiceGroupApiConsumerV1GroupsByServiceGroupsUsersByUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchServiceGroupApiConsumerV1GroupsByServiceGroupsUsersByUsers([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "users")][Required]string users, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceGroupControllerAddCoCurricularGroupFileRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/files")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceGroupApiConsumerV1GroupsByServiceGroupsFiles")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceGroupApiConsumerV1GroupsByServiceGroupsFiles([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromBody]ServiceGroupControllerAddCoCurricularGroupFileRequest serviceGroupControllerAddCoCurricularGroupFileRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceGroupControllerApproveRejectMembersRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/members/approve")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceGroupApiConsumerV1GroupsByServiceGroupsMembersApprove")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceGroupApiConsumerV1GroupsByServiceGroupsMembersApprove([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromBody]ServiceGroupControllerApproveRejectMembersRequest serviceGroupControllerApproveRejectMembersRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/members/caseload")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceGroupApiConsumerV1GroupsByServiceGroupsMembersCaseload")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceGroupApiConsumerV1GroupsByServiceGroupsMembersCaseload([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceGroupControllerAddMembersByCSVRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/members/csv")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceGroupApiConsumerV1GroupsByServiceGroupsMembersCsv")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceGroupApiConsumerV1GroupsByServiceGroupsMembersCsv([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromBody]ServiceGroupControllerAddMembersByCSVRequest serviceGroupControllerAddMembersByCSVRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceGroupControllerRemoveMembersRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/members/remove")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceGroupApiConsumerV1GroupsByServiceGroupsMembersRemove")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceGroupApiConsumerV1GroupsByServiceGroupsMembersRemove([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromBody]ServiceGroupControllerRemoveMembersRequest serviceGroupControllerRemoveMembersRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceGroupControllerAddMembersByIdsRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/members/users")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceGroupApiConsumerV1GroupsByServiceGroupsMembersUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceGroupApiConsumerV1GroupsByServiceGroupsMembersUsers([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromBody]ServiceGroupControllerAddMembersByIdsRequest serviceGroupControllerAddMembersByIdsRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Service Group</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="users"></param>
        /// <param name="method"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/student/{users}/{method}")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceGroupApiConsumerV1GroupsByServiceGroupsStudentByUsersByMethod")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceGroupApiConsumerV1GroupsByServiceGroupsStudentByUsersByMethod([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "users")][Required]string users, [FromRoute (Name = "method")][Required]string method, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group Users
        /// </summary>
        /// <remarks>Service Group Users</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceGroupCSVRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/users/csv")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceGroupApiConsumerV1GroupsByServiceGroupsUsersCsv")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceGroupApiConsumerV1GroupsByServiceGroupsUsersCsv([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromBody]ServiceGroupCSVRequest serviceGroupCSVRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group Users
        /// </summary>
        /// <remarks>Service Group Users</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="searchRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Group/api/consumer/v1/groups/{service_groups}/users/search")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceGroupApiConsumerV1GroupsByServiceGroupsUsersSearch")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceGroupUsersResponse), description: "OK")]
        public virtual IActionResult PostServiceGroupApiConsumerV1GroupsByServiceGroupsUsersSearch([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromBody]SearchRequest searchRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceGroupUsersResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"users\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceGroupUsersResponse>(exampleJson)
            : default(ServiceGroupUsersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group
        /// </summary>
        /// <remarks>Learning Target</remarks>
        /// <param name="serviceGroupControllerCreateEditRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Group/api/consumer/v1/groups/create")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceGroupApiConsumerV1GroupsCreate")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceGroupApiConsumerV1GroupsCreate([FromBody]ServiceGroupControllerCreateEditRequest serviceGroupControllerCreateEditRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group Registration
        /// </summary>
        /// <remarks>Service Group Registration</remarks>
        /// <param name="addServiceGroupRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Group/api/consumer/v1/groups/register")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceGroupApiConsumerV1GroupsRegister")]
        [SwaggerResponse(statusCode: 200, type: typeof(SimpleServiceGroup), description: "OK")]
        public virtual IActionResult PostServiceGroupApiConsumerV1GroupsRegister([FromBody]AddServiceGroupRequest addServiceGroupRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SimpleServiceGroup));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"name\" : \"name\",\r\n  \"id\" : 1,\r\n  \"joinCode\" : \"joinCode\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SimpleServiceGroup>(exampleJson)
            : default(SimpleServiceGroup);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
