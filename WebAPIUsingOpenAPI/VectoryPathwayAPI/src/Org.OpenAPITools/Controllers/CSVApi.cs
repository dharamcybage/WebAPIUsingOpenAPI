/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Swashbuckle.Swagger.Annotations; using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CSVApiController : ControllerBase
    { 
        /// <summary>
        /// Upload UserCSV
        /// </summary>
        /// <remarks>Upload UserCSV</remarks>
        /// <param name="users"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/CSV/api/consumer/v1/staff/{users}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteCSVApiConsumerV1StaffByUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteCSVApiConsumerV1StaffByUsers([FromRoute (Name = "users")][Required]string users, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// GetCSVFormat
        /// </summary>
        /// <remarks>GetCSVFormat</remarks>
        /// <param name="entity"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/CSV/api/consumer/v1/csv/data/{entity}")]
        [ValidateModelState]
        [SwaggerOperation("GetCSVApiConsumerV1CsvDataByEntity")]
        [SwaggerResponse(statusCode: 200, type: typeof(CSVDataResponse), description: "OK")]
        public virtual IActionResult GetCSVApiConsumerV1CsvDataByEntity([FromRoute (Name = "entity")][Required]string entity, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CSVDataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"fields\" : [ {\r\n    \"notes\" : \"notes\",\r\n    \"name\" : \"name\",\r\n    \"isCustom\" : true,\r\n    \"id\" : 0,\r\n    \"type\" : 6,\r\n    \"required\" : true\r\n  }, {\r\n    \"notes\" : \"notes\",\r\n    \"name\" : \"name\",\r\n    \"isCustom\" : true,\r\n    \"id\" : 0,\r\n    \"type\" : 6,\r\n    \"required\" : true\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CSVDataResponse>(exampleJson)
            : default(CSVDataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CSV
        /// </summary>
        /// <remarks>CSV</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/CSV/api/consumer/v1/csv/data/contacts")]
        [ValidateModelState]
        [SwaggerOperation("GetCSVApiConsumerV1CsvDataContacts")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<CSVEntityDataResponse>), description: "OK")]
        public virtual IActionResult GetCSVApiConsumerV1CsvDataContacts([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<CSVEntityDataResponse>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"name\" : \"name\",\r\n  \"id\" : 0\r\n}, {\r\n  \"name\" : \"name\",\r\n  \"id\" : 0\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<CSVEntityDataResponse>>(exampleJson)
            : default(List<CSVEntityDataResponse>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// UploadEntityCSV
        /// </summary>
        /// <remarks>UploadEntityCSV</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/CSV/api/consumer/v1/csv/data/export-rolling/contacts")]
        [ValidateModelState]
        [SwaggerOperation("GetCSVApiConsumerV1CsvDataExportRollingContacts")]
        [SwaggerResponse(statusCode: 200, type: typeof(EntityFullDataExportResponse), description: "OK")]
        public virtual IActionResult GetCSVApiConsumerV1CsvDataExportRollingContacts([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EntityFullDataExportResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : [ {\r\n    \"key\" : \"data\"\r\n  }, {\r\n    \"key\" : \"data\"\r\n  } ],\r\n  \"columns\" : [ \"columns\", \"columns\" ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EntityFullDataExportResponse>(exampleJson)
            : default(EntityFullDataExportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// UploadEntityCSV
        /// </summary>
        /// <remarks>UploadEntityCSV</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/CSV/api/consumer/v1/csv/data/export-rolling/experiences")]
        [ValidateModelState]
        [SwaggerOperation("GetCSVApiConsumerV1CsvDataExportRollingExperiences")]
        [SwaggerResponse(statusCode: 200, type: typeof(EntityFullDataExportResponse), description: "OK")]
        public virtual IActionResult GetCSVApiConsumerV1CsvDataExportRollingExperiences([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EntityFullDataExportResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : [ {\r\n    \"key\" : \"data\"\r\n  }, {\r\n    \"key\" : \"data\"\r\n  } ],\r\n  \"columns\" : [ \"columns\", \"columns\" ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EntityFullDataExportResponse>(exampleJson)
            : default(EntityFullDataExportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// UploadEntityCSV
        /// </summary>
        /// <remarks>UploadEntityCSV</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/CSV/api/consumer/v1/csv/data/export-rolling/orgs")]
        [ValidateModelState]
        [SwaggerOperation("GetCSVApiConsumerV1CsvDataExportRollingOrgs")]
        [SwaggerResponse(statusCode: 200, type: typeof(EntityFullDataExportResponse), description: "OK")]
        public virtual IActionResult GetCSVApiConsumerV1CsvDataExportRollingOrgs([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EntityFullDataExportResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : [ {\r\n    \"key\" : \"data\"\r\n  }, {\r\n    \"key\" : \"data\"\r\n  } ],\r\n  \"columns\" : [ \"columns\", \"columns\" ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EntityFullDataExportResponse>(exampleJson)
            : default(EntityFullDataExportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CSV
        /// </summary>
        /// <remarks>CSV</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/CSV/api/consumer/v1/csv/data/orgs")]
        [ValidateModelState]
        [SwaggerOperation("GetCSVApiConsumerV1CsvDataOrgs")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<CSVEntityDataResponse>), description: "OK")]
        public virtual IActionResult GetCSVApiConsumerV1CsvDataOrgs([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<CSVEntityDataResponse>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"name\" : \"name\",\r\n  \"id\" : 0\r\n}, {\r\n  \"name\" : \"name\",\r\n  \"id\" : 0\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<CSVEntityDataResponse>>(exampleJson)
            : default(List<CSVEntityDataResponse>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload UserCSV
        /// </summary>
        /// <remarks>Upload UserCSV</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/CSV/api/consumer/v1/csv-headers")]
        [ValidateModelState]
        [SwaggerOperation("GetCSVApiConsumerV1CsvHeaders")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "OK")]
        public virtual IActionResult GetCSVApiConsumerV1CsvHeaders()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<string>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<string>>(exampleJson)
            : default(List<string>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// UploadEntityCSV
        /// </summary>
        /// <remarks>UploadEntityCSV</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/CSV/api/consumer/v1/pathwayos/entity-csv/contacts/csv-format")]
        [ValidateModelState]
        [SwaggerOperation("GetCSVApiConsumerV1PathwayosEntityCsvContactsCsvFormat")]
        [SwaggerResponse(statusCode: 200, type: typeof(PathwayOSCSVDataResponse), description: "OK")]
        public virtual IActionResult GetCSVApiConsumerV1PathwayosEntityCsvContactsCsvFormat([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PathwayOSCSVDataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"fields\" : [ {\r\n    \"name\" : \"name\",\r\n    \"options\" : [ {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    } ],\r\n    \"id\" : 0,\r\n    \"type\" : 6,\r\n    \"required\" : true\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"options\" : [ {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    } ],\r\n    \"id\" : 0,\r\n    \"type\" : 6,\r\n    \"required\" : true\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PathwayOSCSVDataResponse>(exampleJson)
            : default(PathwayOSCSVDataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// UploadEntityCSV
        /// </summary>
        /// <remarks>UploadEntityCSV</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/CSV/api/consumer/v1/pathwayos/entity-csv/experiences/csv-format")]
        [ValidateModelState]
        [SwaggerOperation("GetCSVApiConsumerV1PathwayosEntityCsvExperiencesCsvFormat")]
        [SwaggerResponse(statusCode: 200, type: typeof(PathwayOSCSVDataResponse), description: "OK")]
        public virtual IActionResult GetCSVApiConsumerV1PathwayosEntityCsvExperiencesCsvFormat([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PathwayOSCSVDataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"fields\" : [ {\r\n    \"name\" : \"name\",\r\n    \"options\" : [ {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    } ],\r\n    \"id\" : 0,\r\n    \"type\" : 6,\r\n    \"required\" : true\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"options\" : [ {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    } ],\r\n    \"id\" : 0,\r\n    \"type\" : 6,\r\n    \"required\" : true\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PathwayOSCSVDataResponse>(exampleJson)
            : default(PathwayOSCSVDataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// UploadEntityCSV
        /// </summary>
        /// <remarks>UploadEntityCSV</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/CSV/api/consumer/v1/pathwayos/entity-csv/org-contact/csv-format")]
        [ValidateModelState]
        [SwaggerOperation("GetCSVApiConsumerV1PathwayosEntityCsvOrgContactCsvFormat")]
        [SwaggerResponse(statusCode: 200, type: typeof(PathwayOSCSVDataResponse), description: "OK")]
        public virtual IActionResult GetCSVApiConsumerV1PathwayosEntityCsvOrgContactCsvFormat([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PathwayOSCSVDataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"fields\" : [ {\r\n    \"name\" : \"name\",\r\n    \"options\" : [ {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    } ],\r\n    \"id\" : 0,\r\n    \"type\" : 6,\r\n    \"required\" : true\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"options\" : [ {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    } ],\r\n    \"id\" : 0,\r\n    \"type\" : 6,\r\n    \"required\" : true\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PathwayOSCSVDataResponse>(exampleJson)
            : default(PathwayOSCSVDataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// UploadEntityCSV
        /// </summary>
        /// <remarks>UploadEntityCSV</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/CSV/api/consumer/v1/pathwayos/entity-csv/orgs/csv-format")]
        [ValidateModelState]
        [SwaggerOperation("GetCSVApiConsumerV1PathwayosEntityCsvOrgsCsvFormat")]
        [SwaggerResponse(statusCode: 200, type: typeof(PathwayOSCSVDataResponse), description: "OK")]
        public virtual IActionResult GetCSVApiConsumerV1PathwayosEntityCsvOrgsCsvFormat([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PathwayOSCSVDataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"fields\" : [ {\r\n    \"name\" : \"name\",\r\n    \"options\" : [ {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    } ],\r\n    \"id\" : 0,\r\n    \"type\" : 6,\r\n    \"required\" : true\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"options\" : [ {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"id\" : 1,\r\n      \"value\" : \"value\"\r\n    } ],\r\n    \"id\" : 0,\r\n    \"type\" : 6,\r\n    \"required\" : true\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PathwayOSCSVDataResponse>(exampleJson)
            : default(PathwayOSCSVDataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload UserCSV
        /// </summary>
        /// <remarks>Upload UserCSV</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/CSV/api/consumer/v1/staff")]
        [ValidateModelState]
        [SwaggerOperation("GetCSVApiConsumerV1Staff")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<StaffResponse>), description: "OK")]
        public virtual IActionResult GetCSVApiConsumerV1Staff([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<StaffResponse>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"lastName\" : \"lastName\",\r\n  \"firstName\" : \"firstName\",\r\n  \"role\" : 6,\r\n  \"school\" : \"school\",\r\n  \"id\" : 0,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"staffID\" : \"staffID\",\r\n  \"email\" : \"email\"\r\n}, {\r\n  \"lastName\" : \"lastName\",\r\n  \"firstName\" : \"firstName\",\r\n  \"role\" : 6,\r\n  \"school\" : \"school\",\r\n  \"id\" : 0,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"staffID\" : \"staffID\",\r\n  \"email\" : \"email\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<StaffResponse>>(exampleJson)
            : default(List<StaffResponse>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload UserCSV
        /// </summary>
        /// <remarks>Upload UserCSV</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/CSV/api/consumer/v1/staff/permissions")]
        [ValidateModelState]
        [SwaggerOperation("GetCSVApiConsumerV1StaffPermissions")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<StaffResponse>), description: "OK")]
        public virtual IActionResult GetCSVApiConsumerV1StaffPermissions([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<StaffResponse>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"lastName\" : \"lastName\",\r\n  \"firstName\" : \"firstName\",\r\n  \"role\" : 6,\r\n  \"school\" : \"school\",\r\n  \"id\" : 0,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"staffID\" : \"staffID\",\r\n  \"email\" : \"email\"\r\n}, {\r\n  \"lastName\" : \"lastName\",\r\n  \"firstName\" : \"firstName\",\r\n  \"role\" : 6,\r\n  \"school\" : \"school\",\r\n  \"id\" : 0,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"staffID\" : \"staffID\",\r\n  \"email\" : \"email\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<StaffResponse>>(exampleJson)
            : default(List<StaffResponse>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload UserCSV
        /// </summary>
        /// <remarks>Upload UserCSV</remarks>
        /// <param name="updateStaffMemberRoleRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/CSV/api/consumer/v1/staff/permissions")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchCSVApiConsumerV1StaffPermissions")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchCSVApiConsumerV1StaffPermissions([FromBody]UpdateStaffMemberRoleRequest updateStaffMemberRoleRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload UserCSV
        /// </summary>
        /// <remarks>Upload UserCSV</remarks>
        /// <param name="uploadAdvisoryBoardContactsRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/CSV/api/consumer/v1/csv/advisoryboard-contacts/upload")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostCSVApiConsumerV1CsvAdvisoryboardContactsUpload")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostCSVApiConsumerV1CsvAdvisoryboardContactsUpload([FromBody]UploadAdvisoryBoardContactsRequest uploadAdvisoryBoardContactsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload UserCSV
        /// </summary>
        /// <remarks>Upload UserCSV</remarks>
        /// <param name="uploadClearingHouseCSVRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/CSV/api/consumer/v1/csv/clearinghouse/upload")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostCSVApiConsumerV1CsvClearinghouseUpload")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostCSVApiConsumerV1CsvClearinghouseUpload([FromBody]UploadClearingHouseCSVRequest uploadClearingHouseCSVRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload UserCSV
        /// </summary>
        /// <remarks>Upload UserCSV</remarks>
        /// <param name="uploadCoursesCSVRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/CSV/api/consumer/v1/csv/credentials/upload")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostCSVApiConsumerV1CsvCredentialsUpload")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostCSVApiConsumerV1CsvCredentialsUpload([FromBody]UploadCoursesCSVRequest uploadCoursesCSVRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// UploadEntityCSV
        /// </summary>
        /// <remarks>UploadEntityCSV</remarks>
        /// <param name="uploadEntityCSVRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/CSV/api/consumer/v1/csv/data/upload")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostCSVApiConsumerV1CsvDataUpload")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostCSVApiConsumerV1CsvDataUpload([FromBody]UploadEntityCSVRequest uploadEntityCSVRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload UserCSV
        /// </summary>
        /// <remarks>Upload UserCSV</remarks>
        /// <param name="uploadCoursesCSVRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/CSV/api/consumer/v1/csv/tests/upload")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostCSVApiConsumerV1CsvTestsUpload")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostCSVApiConsumerV1CsvTestsUpload([FromBody]UploadCoursesCSVRequest uploadCoursesCSVRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload UserCSV 
        /// </summary>
        /// <remarks>Upload UserCSV</remarks>
        /// <param name="uploadUserCSVRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/CSV/api/consumer/v1/csv/users/upload")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostCSVApiConsumerV1CsvUsersUpload")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostCSVApiConsumerV1CsvUsersUpload([FromBody]UploadUserCSVRequest uploadUserCSVRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// UploadEntityCSV
        /// </summary>
        /// <remarks>UploadEntityCSV</remarks>
        /// <param name="entity"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/CSV/api/consumer/v1/pathwayos/entity-csv/{entity}")]
        [ValidateModelState]
        [SwaggerOperation("PostCSVApiConsumerV1PathwayosEntityCsvByEntity")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostCSVApiConsumerV1PathwayosEntityCsvByEntity([FromRoute (Name = "entity")][Required]string entity, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload UserCSV
        /// </summary>
        /// <remarks>Upload UserCSV</remarks>
        /// <param name="createStaffRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/CSV/api/consumer/v1/staff")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostCSVApiConsumerV1Staff")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostCSVApiConsumerV1Staff([FromBody]CreateStaffRequest createStaffRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
