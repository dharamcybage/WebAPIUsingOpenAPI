/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Swashbuckle.Swagger.Annotations; using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class OpportunityGroupApiController : ControllerBase
    { 
        /// <summary>
        /// Edit Opportunity
        /// </summary>
        /// <remarks>Edit Opportunity</remarks>
        /// <param name="opportunityGroup"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Opportunity Group/api/consumer/v1/opportunity-group/{opportunity_group}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteOpportunityGroupApiConsumerV1OpportunityGroupByOpportunityGroup")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteOpportunityGroupApiConsumerV1OpportunityGroupByOpportunityGroup([FromRoute (Name = "opportunity_group")][Required]string opportunityGroup, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Opportunity Group
        /// </summary>
        /// <remarks>Opportunity Group</remarks>
        /// <param name="opportunityGroup"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Opportunity Group/api/consumer/v1/opportunity-group/{opportunity_group}/experiences")]
        [ValidateModelState]
        [SwaggerOperation("GetOpportunityGroupApiConsumerV1OpportunityGroupByOpportunityGroupExperiences")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<long>), description: "OK")]
        public virtual IActionResult GetOpportunityGroupApiConsumerV1OpportunityGroupByOpportunityGroupExperiences([FromRoute (Name = "opportunity_group")][Required]string opportunityGroup, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<long>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ 0, 0 ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<long>>(exampleJson)
            : default(List<long>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Opportunity Group
        /// </summary>
        /// <remarks>Opportunity Group</remarks>
        /// <param name="opportunityGroup"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Opportunity Group/api/consumer/v1/opportunity-group/{opportunity_group}/experiences/admin-table")]
        [ValidateModelState]
        [SwaggerOperation("GetOpportunityGroupApiConsumerV1OpportunityGroupByOpportunityGroupExperiencesAdminTable")]
        [SwaggerResponse(statusCode: 200, type: typeof(AdminTableResponseAdminTableExperience), description: "OK")]
        public virtual IActionResult GetOpportunityGroupApiConsumerV1OpportunityGroupByOpportunityGroupExperiencesAdminTable([FromRoute (Name = "opportunity_group")][Required]string opportunityGroup, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AdminTableResponseAdminTableExperience));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"form\" : {\r\n    \"externalToken\" : \"externalToken\",\r\n    \"description\" : \"description\",\r\n    \"canBeUsedByBusinessPartners\" : true,\r\n    \"appearsInMarketPlace\" : true,\r\n    \"premium\" : true,\r\n    \"name\" : \"name\",\r\n    \"files\" : [ {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"form_id\" : 0,\r\n      \"name\" : \"name\",\r\n      \"fileUrl\" : \"fileUrl\",\r\n      \"id\" : 6,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    }, {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"form_id\" : 0,\r\n      \"name\" : \"name\",\r\n      \"fileUrl\" : \"fileUrl\",\r\n      \"id\" : 6,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    } ],\r\n    \"id\" : 7,\r\n    \"canBeUsedInWorkflow\" : true,\r\n    \"fields\" : [ {\r\n      \"allowsOtherField\" : true,\r\n      \"studentsCanViewOnEntity\" : true,\r\n      \"values\" : [ {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      }, {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      } ],\r\n      \"showToStudentsInExperience\" : true,\r\n      \"description\" : \"description\",\r\n      \"characterLimit\" : 2,\r\n      \"type\" : 5,\r\n      \"wordLimit\" : 2,\r\n      \"availableOnExternalEntityForm\" : true,\r\n      \"required\" : true,\r\n      \"hiddenFromSchoolAdminOnStudentProfile\" : true,\r\n      \"hiddenFromStaffOnStudentProfile\" : true,\r\n      \"conditionalDisplayValue\" : 1,\r\n      \"hiddenFromStudents\" : true,\r\n      \"name\" : \"name\",\r\n      \"id\" : 5,\r\n      \"maxMultiSelect\" : 7\r\n    }, {\r\n      \"allowsOtherField\" : true,\r\n      \"studentsCanViewOnEntity\" : true,\r\n      \"values\" : [ {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      }, {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      } ],\r\n      \"showToStudentsInExperience\" : true,\r\n      \"description\" : \"description\",\r\n      \"characterLimit\" : 2,\r\n      \"type\" : 5,\r\n      \"wordLimit\" : 2,\r\n      \"availableOnExternalEntityForm\" : true,\r\n      \"required\" : true,\r\n      \"hiddenFromSchoolAdminOnStudentProfile\" : true,\r\n      \"hiddenFromStaffOnStudentProfile\" : true,\r\n      \"conditionalDisplayValue\" : 1,\r\n      \"hiddenFromStudents\" : true,\r\n      \"name\" : \"name\",\r\n      \"id\" : 5,\r\n      \"maxMultiSelect\" : 7\r\n    } ],\r\n    \"approvalWorkflow\" : 4,\r\n    \"folder_id\" : 1,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  },\r\n  \"objects\" : [ {\r\n    \"submission\" : {\r\n      \"id\" : 2,\r\n      \"fields\" : [ {\r\n        \"formFieldId\" : 3,\r\n        \"attachedValue\" : \"attachedValue\",\r\n        \"values\" : [ \"values\", \"values\" ],\r\n        \"type\" : 9,\r\n        \"value\" : \"value\"\r\n      }, {\r\n        \"formFieldId\" : 3,\r\n        \"attachedValue\" : \"attachedValue\",\r\n        \"values\" : [ \"values\", \"values\" ],\r\n        \"type\" : 9,\r\n        \"value\" : \"value\"\r\n      } ]\r\n    },\r\n    \"object\" : {\r\n      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"contactName\" : \"contactName\",\r\n      \"totalSpotCount\" : 7,\r\n      \"students\" : \"students\",\r\n      \"spotsTakenCount\" : 0,\r\n      \"applicantCount\" : 5,\r\n      \"archived\" : true,\r\n      \"experienceHiddenFromSearch\" : true,\r\n      \"organization\" : {\r\n        \"name\" : \"name\",\r\n        \"id\" : 1\r\n      },\r\n      \"name\" : \"name\",\r\n      \"location\" : {\r\n        \"name\" : \"name\",\r\n        \"id\" : 2\r\n      },\r\n      \"id\" : 6,\r\n      \"folder_id\" : 5,\r\n      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    }\r\n  }, {\r\n    \"submission\" : {\r\n      \"id\" : 2,\r\n      \"fields\" : [ {\r\n        \"formFieldId\" : 3,\r\n        \"attachedValue\" : \"attachedValue\",\r\n        \"values\" : [ \"values\", \"values\" ],\r\n        \"type\" : 9,\r\n        \"value\" : \"value\"\r\n      }, {\r\n        \"formFieldId\" : 3,\r\n        \"attachedValue\" : \"attachedValue\",\r\n        \"values\" : [ \"values\", \"values\" ],\r\n        \"type\" : 9,\r\n        \"value\" : \"value\"\r\n      } ]\r\n    },\r\n    \"object\" : {\r\n      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"contactName\" : \"contactName\",\r\n      \"totalSpotCount\" : 7,\r\n      \"students\" : \"students\",\r\n      \"spotsTakenCount\" : 0,\r\n      \"applicantCount\" : 5,\r\n      \"archived\" : true,\r\n      \"experienceHiddenFromSearch\" : true,\r\n      \"organization\" : {\r\n        \"name\" : \"name\",\r\n        \"id\" : 1\r\n      },\r\n      \"name\" : \"name\",\r\n      \"location\" : {\r\n        \"name\" : \"name\",\r\n        \"id\" : 2\r\n      },\r\n      \"id\" : 6,\r\n      \"folder_id\" : 5,\r\n      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    }\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AdminTableResponseAdminTableExperience>(exampleJson)
            : default(AdminTableResponseAdminTableExperience);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Opportunity Group
        /// </summary>
        /// <remarks>Opportunity Group</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Opportunity Group/api/consumer/v1/opportunity-groups")]
        [ValidateModelState]
        [SwaggerOperation("GetOpportunityGroupApiConsumerV1OpportunityGroups")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<OpportunityGroupDTO>), description: "OK")]
        public virtual IActionResult GetOpportunityGroupApiConsumerV1OpportunityGroups([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<OpportunityGroupDTO>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"name\" : \"name\",\r\n  \"id\" : 1,\r\n  \"created_by\" : 0,\r\n  \"experienceIds\" : [ 6, 6 ],\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}, {\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"name\" : \"name\",\r\n  \"id\" : 1,\r\n  \"created_by\" : 0,\r\n  \"experienceIds\" : [ 6, 6 ],\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<OpportunityGroupDTO>>(exampleJson)
            : default(List<OpportunityGroupDTO>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Edit Opportunity
        /// </summary>
        /// <remarks>Edit Opportunity</remarks>
        /// <param name="opportunityGroup"></param>
        /// <param name="editOpportunityGroupControllerEditOpportunityGroupRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Opportunity Group/api/consumer/v1/opportunity-group/{opportunity_group}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchOpportunityGroupApiConsumerV1OpportunityGroupByOpportunityGroup")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchOpportunityGroupApiConsumerV1OpportunityGroupByOpportunityGroup([FromRoute (Name = "opportunity_group")][Required]string opportunityGroup, [FromBody]EditOpportunityGroupControllerEditOpportunityGroupRequest editOpportunityGroupControllerEditOpportunityGroupRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Edit Opportunity
        /// </summary>
        /// <remarks>Edit Opportunity</remarks>
        /// <param name="opportunityGroup"></param>
        /// <param name="experiences"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Opportunity Group/api/consumer/v1/opportunity-group/{opportunity_group}/experience/{experiences}/add")]
        [ValidateModelState]
        [SwaggerOperation("PatchOpportunityGroupApiConsumerV1OpportunityGroupByOpportunityGroupExperienceByExperiencesAdd")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchOpportunityGroupApiConsumerV1OpportunityGroupByOpportunityGroupExperienceByExperiencesAdd([FromRoute (Name = "opportunity_group")][Required]string opportunityGroup, [FromRoute (Name = "experiences")][Required]string experiences, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Edit Opportunity
        /// </summary>
        /// <remarks>Edit Opportunity</remarks>
        /// <param name="opportunityGroup"></param>
        /// <param name="experiences"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Opportunity Group/api/consumer/v1/opportunity-group/{opportunity_group}/experience/{experiences}/remove")]
        [ValidateModelState]
        [SwaggerOperation("PatchOpportunityGroupApiConsumerV1OpportunityGroupByOpportunityGroupExperienceByExperiencesRemove")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchOpportunityGroupApiConsumerV1OpportunityGroupByOpportunityGroupExperienceByExperiencesRemove([FromRoute (Name = "opportunity_group")][Required]string opportunityGroup, [FromRoute (Name = "experiences")][Required]string experiences, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Opportunity Group
        /// </summary>
        /// <remarks>Create Opportunity Group</remarks>
        /// <param name="createOpportunityGroupControllerCreateOpportunityGroupRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Opportunity Group/api/consumer/v1/opportunity-group")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostOpportunityGroupApiConsumerV1OpportunityGroup")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostOpportunityGroupApiConsumerV1OpportunityGroup([FromBody]CreateOpportunityGroupControllerCreateOpportunityGroupRequest createOpportunityGroupControllerCreateOpportunityGroupRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
