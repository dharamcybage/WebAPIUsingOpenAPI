/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VendorApiController : ControllerBase
    { 
        /// <summary>
        /// Work Ramp OAuth
        /// </summary>
        /// <remarks>Work Ramp OAuth</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Vendor/api/consumer/v1/workramp/code")]
        [ValidateModelState]
        [SwaggerOperation("GetVendorApiConsumerV1WorkrampCode")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual IActionResult GetVendorApiConsumerV1WorkrampCode([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// One Roster
        /// </summary>
        /// <remarks>One Roster</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Vendor/api/v1/oneroster/queue")]
        [ValidateModelState]
        [SwaggerOperation("GetVendorApiV1OnerosterQueue")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult GetVendorApiV1OnerosterQueue()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Data Export
        /// </summary>
        /// <remarks>Data Export</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Vendor/api/vendor/v1/data/sftp/export")]
        [ValidateModelState]
        [SwaggerOperation("GetVendorApiVendorV1DataSftpExport")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult GetVendorApiVendorV1DataSftpExport()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ClientCreation
        /// </summary>
        /// <remarks>ClientCreation</remarks>
        /// <param name="nces"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Vendor/api/vendor/v1/district/{nces}")]
        [ValidateModelState]
        [SwaggerOperation("GetVendorApiVendorV1DistrictByNces")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        public virtual IActionResult GetVendorApiVendorV1DistrictByNces([FromRoute (Name = "nces")][Required]string nces)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <param name="districts"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Vendor/api/vendor/v1/district-pathwayos-templates/{districts}")]
        [ValidateModelState]
        [SwaggerOperation("GetVendorApiVendorV1DistrictPathwayosTemplatesByDistricts")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult GetVendorApiVendorV1DistrictPathwayosTemplatesByDistricts([FromRoute (Name = "districts")][Required]string districts)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// AdvisoryBoardMeetingVendor
        /// </summary>
        /// <remarks>AdvisoryBoardMeetingVendor</remarks>
        /// <param name="token"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Vendor/api/vendor/v1/external/advisory-board-meeting-file/{token}")]
        [ValidateModelState]
        [SwaggerOperation("GetVendorApiVendorV1ExternalAdvisoryBoardMeetingFileByToken")]
        public virtual IActionResult GetVendorApiVendorV1ExternalAdvisoryBoardMeetingFileByToken([FromRoute (Name = "token")][Required]string token)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Vendor/api/vendor/v1/tokens/clear")]
        [ValidateModelState]
        [SwaggerOperation("GetVendorApiVendorV1TokensClear")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult GetVendorApiVendorV1TokensClear()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Usage Metrics
        /// </summary>
        /// <remarks>Usage Metrics</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Vendor/api/vendor/v1/usage-metrics/calculate")]
        [ValidateModelState]
        [SwaggerOperation("GetVendorApiVendorV1UsageMetricsCalculate")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult GetVendorApiVendorV1UsageMetricsCalculate()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Work Ramp OAuth
        /// </summary>
        /// <remarks>Work Ramp OAuth</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Vendor/api/vendor/v1/workramp/user-data")]
        [ValidateModelState]
        [SwaggerOperation("GetVendorApiVendorV1WorkrampUserData")]
        [SwaggerResponse(statusCode: 200, type: typeof(WorkRampUserDataResponse), description: "OK")]
        public virtual IActionResult GetVendorApiVendorV1WorkrampUserData([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(WorkRampUserDataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"firstName\" : \"firstName\",\r\n  \"lastName\" : \"lastName\",\r\n  \"email\" : \"email\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<WorkRampUserDataResponse>(exampleJson)
            : default(WorkRampUserDataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Shift Vendor
        /// </summary>
        /// <remarks>Shift Vendor</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Vendor/api/vendor/v1/external-service-sponsors/reminders/send")]
        [ValidateModelState]
        [SwaggerOperation("PatchVendorApiVendorV1ExternalServiceSponsorsRemindersSend")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchVendorApiVendorV1ExternalServiceSponsorsRemindersSend()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Parchment Directory
        /// </summary>
        /// <remarks>Parchment Directory</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Vendor/api/vendor/v1/parchment/receivers")]
        [ValidateModelState]
        [SwaggerOperation("PatchVendorApiVendorV1ParchmentReceivers")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchVendorApiVendorV1ParchmentReceivers()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Parchment Directory
        /// </summary>
        /// <remarks>Parchment Directory</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Vendor/api/vendor/v1/parchment/status/update")]
        [ValidateModelState]
        [SwaggerOperation("PatchVendorApiVendorV1ParchmentStatusUpdate")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchVendorApiVendorV1ParchmentStatusUpdate()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ClientCreation
        /// </summary>
        /// <remarks>ClientCreation</remarks>
        /// <param name="nces"></param>
        /// <param name="updateSchoolRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Vendor/api/vendor/v1/school/{nces}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchVendorApiVendorV1SchoolByNces")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchVendorApiVendorV1SchoolByNces([FromRoute (Name = "nces")][Required]string nces, [FromBody]UpdateSchoolRequest updateSchoolRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Shift Vendor
        /// </summary>
        /// <remarks>Shift Vendor</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Vendor/api/vendor/v1/shifts/clear-out")]
        [ValidateModelState]
        [SwaggerOperation("PatchVendorApiVendorV1ShiftsClearOut")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchVendorApiVendorV1ShiftsClearOut()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Shift Vendor
        /// </summary>
        /// <remarks>Shift Vendor</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Vendor/api/vendor/v1/shifts/clear-out-missed-shifts")]
        [ValidateModelState]
        [SwaggerOperation("PatchVendorApiVendorV1ShiftsClearOutMissedShifts")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchVendorApiVendorV1ShiftsClearOutMissedShifts()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Transcript Parsing
        /// </summary>
        /// <remarks>Transcript Parsing</remarks>
        /// <param name="transcriptParsingControllerParseRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/academic-transcripts/process")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1AcademicTranscriptsProcess")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1AcademicTranscriptsProcess([FromBody]TranscriptParsingControllerParseRequest transcriptParsingControllerParseRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/activity/sponsor/reminders")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1ActivitySponsorReminders")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1ActivitySponsorReminders()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <param name="X_API_KEY"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/activity/student/reminders")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1ActivityStudentReminders")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1ActivityStudentReminders([FromHeader (Name = "X-API-KEY")]string X_API_KEY)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Full Background Check
        /// </summary>
        /// <remarks>Full Background Check</remarks>
        /// <param name="fullWebhookCheckRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/backgroundcheck")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1Backgroundcheck")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1Backgroundcheck([FromBody]FullWebhookCheckRequest fullWebhookCheckRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <param name="nces"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/ccri/seed/{nces}")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1CcriSeedByNces")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1CcriSeedByNces([FromRoute (Name = "nces")][Required]string nces)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CheckpointQueue
        /// </summary>
        /// <remarks>CheckpointQueue</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/checkpoints/evaluate")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1CheckpointsEvaluate")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1CheckpointsEvaluate()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/clever/pull")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1CleverPull")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1CleverPull()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/common-app/update")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1CommonAppUpdate")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1CommonAppUpdate()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CSV Vendor Upload
        /// </summary>
        /// <remarks>CSV Vendor Upload</remarks>
        /// <param name="processSFTPNotificationJobContext"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/csv/upload")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1CsvUpload")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1CsvUpload([FromBody]ProcessSFTPNotificationJobContext processSFTPNotificationJobContext)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/direct-forms/reviewer/reminders")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1DirectFormsReviewerReminders")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1DirectFormsReviewerReminders()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Incoming Email
        /// </summary>
        /// <remarks>Incoming Email</remarks>
        /// <param name="incomingEmailRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/email")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1Email")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1Email([FromBody]IncomingEmailRequest incomingEmailRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/engage/event-reminders")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1EngageEventReminders")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1EngageEventReminders()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Evaluation Email
        /// </summary>
        /// <remarks>Evaluation Email</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/evaluations/send")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1EvaluationsSend")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1EvaluationsSend()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/experiences/geo-check-out")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1ExperiencesGeoCheckOut")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1ExperiencesGeoCheckOut()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/experiences/inactivate")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1ExperiencesInactivate")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1ExperiencesInactivate()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/forms/marketplace/appearance/reset")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1FormsMarketplaceAppearanceReset")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1FormsMarketplaceAppearanceReset()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/grad-plan/reviewer/reminders")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1GradPlanReviewerReminders")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1GradPlanReviewerReminders()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/grad-year/update/users")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1GradYearUpdateUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1GradYearUpdateUsers()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Stripe Webhook
        /// </summary>
        /// <remarks>Strip eWebhook</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/stripe/parchment/webhook")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1StripeParchmentWebhook")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1StripeParchmentWebhook()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <param name="cronJobAutomationControllerTestSunsetDataExportRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/sunset-data-export/test")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1SunsetDataExportTest")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1SunsetDataExportTest([FromBody]CronJobAutomationControllerTestSunsetDataExportRequest cronJobAutomationControllerTestSunsetDataExportRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/transcripts/unprocessed/reminders")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1TranscriptsUnprocessedReminders")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1TranscriptsUnprocessedReminders()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CronJobAutomation
        /// </summary>
        /// <remarks>CronJobAutomation</remarks>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/workflow-forms/reviewer/reminders")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1WorkflowFormsReviewerReminders")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1WorkflowFormsReviewerReminders()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Work Ramp OAuth
        /// </summary>
        /// <remarks>Work Ramp OAuth</remarks>
        /// <param name="workRampTokenRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Vendor/api/vendor/v1/workramp/access-token")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostVendorApiVendorV1WorkrampAccessToken")]
        [SwaggerResponse(statusCode: 200, type: typeof(WorkRampTokenResponse), description: "OK")]
        public virtual IActionResult PostVendorApiVendorV1WorkrampAccessToken([FromBody]WorkRampTokenRequest workRampTokenRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(WorkRampTokenResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"access_token\" : \"access_token\",\r\n  \"token_type\" : \"token_type\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<WorkRampTokenResponse>(exampleJson)
            : default(WorkRampTokenResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
