/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Swashbuckle.Swagger.Annotations; using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ReportsApiController : ControllerBase
    { 
        /// <summary>
        /// Reports Filter
        /// </summary>
        /// <remarks>Reports Filter</remarks>
        /// <param name="type"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Reports/api/consumer/v1/report-filters/{type}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteReportsApiConsumerV1ReportFiltersByType")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteReportsApiConsumerV1ReportFiltersByType([FromRoute (Name = "type")][Required]string type, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reports Filter
        /// </summary>
        /// <remarks>Reports Filter</remarks>
        /// <param name="reports"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Reports/api/consumer/v1/reports/{reports}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteReportsApiConsumerV1ReportsByReports")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteReportsApiConsumerV1ReportsByReports([FromRoute (Name = "reports")][Required]string reports, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Reports
        /// </summary>
        /// <remarks>Create Reports</remarks>
        /// <param name="reports"></param>
        /// <param name="reportFilters"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Reports/api/consumer/v1/reports/{reports}/filters/{report_filters}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteReportsApiConsumerV1ReportsByReportsFiltersByReportFilters")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteReportsApiConsumerV1ReportsByReportsFiltersByReportFilters([FromRoute (Name = "reports")][Required]string reports, [FromRoute (Name = "report_filters")][Required]string reportFilters, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Reports
        /// </summary>
        /// <remarks>Create Reports</remarks>
        /// <param name="reports"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Reports/api/consumer/v1/reports/{reports}/group")]
        [ValidateModelState]
        [SwaggerOperation("DeleteReportsApiConsumerV1ReportsByReportsGroup")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteReportsApiConsumerV1ReportsByReportsGroup([FromRoute (Name = "reports")][Required]string reports, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Reports
        /// </summary>
        /// <remarks>Create Reports</remarks>
        /// <param name="reports"></param>
        /// <param name="reportFilters"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Reports/api/consumer/v1/reports/{reports}/segments/{report_filters}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteReportsApiConsumerV1ReportsByReportsSegmentsByReportFilters")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteReportsApiConsumerV1ReportsByReportsSegmentsByReportFilters([FromRoute (Name = "reports")][Required]string reports, [FromRoute (Name = "report_filters")][Required]string reportFilters, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Custom SQL
        /// </summary>
        /// <remarks>Custom SQL</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/custom-sql")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1CustomSql")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<CustomSQLQueryDTO>), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1CustomSql([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<CustomSQLQueryDTO>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"name\" : \"name\",\r\n  \"id\" : 0\r\n}, {\r\n  \"name\" : \"name\",\r\n  \"id\" : 0\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<CustomSQLQueryDTO>>(exampleJson)
            : default(List<CustomSQLQueryDTO>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Custom SQL
        /// </summary>
        /// <remarks>Custom SQL</remarks>
        /// <param name="customSqlQuery"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/custom-sql/{custom_sql_query}")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1CustomSqlByCustomSqlQuery")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1CustomSqlByCustomSqlQuery([FromRoute (Name = "custom_sql_query")][Required]string customSqlQuery, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reports Filter
        /// </summary>
        /// <remarks>Reports Filter</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/report-filters")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ReportFilters")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserReportFiltersDTO>), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ReportFilters([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserReportFiltersDTO>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"experienceApplicationReportFilter\" : 1,\r\n  \"orgReportFilter\" : 5,\r\n  \"studentReportFilter\" : 5,\r\n  \"experienceReportFilter\" : 0,\r\n  \"contactReportFilter\" : 2,\r\n  \"courseReportFilter\" : 6\r\n}, {\r\n  \"experienceApplicationReportFilter\" : 1,\r\n  \"orgReportFilter\" : 5,\r\n  \"studentReportFilter\" : 5,\r\n  \"experienceReportFilter\" : 0,\r\n  \"contactReportFilter\" : 2,\r\n  \"courseReportFilter\" : 6\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<UserReportFiltersDTO>>(exampleJson)
            : default(List<UserReportFiltersDTO>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reports Filter
        /// </summary>
        /// <remarks>Reports Filter</remarks>
        /// <param name="type"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/report-filters/{type}")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ReportFiltersByType")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ViewReportsResponse>), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ReportFiltersByType([FromRoute (Name = "type")][Required]string type, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ViewReportsResponse>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"createdBy\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"name\" : \"name\",\r\n  \"description\" : \"description\",\r\n  \"id\" : 6,\r\n  \"type\" : 0\r\n}, {\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"createdBy\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"name\" : \"name\",\r\n  \"description\" : \"description\",\r\n  \"id\" : 6,\r\n  \"type\" : 0\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ViewReportsResponse>>(exampleJson)
            : default(List<ViewReportsResponse>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reports Filter
        /// </summary>
        /// <remarks>Reports Filter</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/reports")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1Reports")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ViewReportsResponse>), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1Reports([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ViewReportsResponse>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"createdBy\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"name\" : \"name\",\r\n  \"description\" : \"description\",\r\n  \"id\" : 6,\r\n  \"type\" : 0\r\n}, {\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"createdBy\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"name\" : \"name\",\r\n  \"description\" : \"description\",\r\n  \"id\" : 6,\r\n  \"type\" : 0\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ViewReportsResponse>>(exampleJson)
            : default(List<ViewReportsResponse>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reports Filter
        /// </summary>
        /// <remarks>Reports Filter</remarks>
        /// <param name="reports"></param>
        /// <param name="authorization"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/reports/{reports}")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ReportsByReports")]
        public virtual IActionResult GetReportsApiConsumerV1ReportsByReports([FromRoute (Name = "reports")][Required]string reports, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Reports Filter
        /// </summary>
        /// <remarks>Reports Filter</remarks>
        /// <param name="reports"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/reports/{reports}/filters")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ReportsByReportsFilters")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ReportFilterDTO>), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ReportsByReportsFilters([FromRoute (Name = "reports")][Required]string reports, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ReportFilterDTO>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"comparison\" : 5,\r\n  \"field\" : 5,\r\n  \"report_id\" : 6,\r\n  \"custom_field_id\" : 7,\r\n  \"isPartOfMultiDimensionalChart\" : true,\r\n  \"id\" : 2,\r\n  \"value\" : \"value\",\r\n  \"entity\" : 1,\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}, {\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"comparison\" : 5,\r\n  \"field\" : 5,\r\n  \"report_id\" : 6,\r\n  \"custom_field_id\" : 7,\r\n  \"isPartOfMultiDimensionalChart\" : true,\r\n  \"id\" : 2,\r\n  \"value\" : \"value\",\r\n  \"entity\" : 1,\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ReportFilterDTO>>(exampleJson)
            : default(List<ReportFilterDTO>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reports Filter
        /// </summary>
        /// <remarks>Reports Filter</remarks>
        /// <param name="reports"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/reports/{reports}/metadata")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ReportsByReportsMetadata")]
        [SwaggerResponse(statusCode: 200, type: typeof(ReportMetadataResponse), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ReportsByReportsMetadata([FromRoute (Name = "reports")][Required]string reports, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ReportMetadataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"customFieldItems\" : [ {\r\n    \"name\" : \"name\",\r\n    \"id\" : 2\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"id\" : 2\r\n  } ],\r\n  \"groupByCustomField\" : 9,\r\n  \"columns\" : [ {\r\n    \"custom\" : true,\r\n    \"id\" : 0\r\n  }, {\r\n    \"custom\" : true,\r\n    \"id\" : 0\r\n  } ],\r\n  \"updatesNext\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"description\" : \"description\",\r\n  \"type\" : 3,\r\n  \"created_by\" : 7,\r\n  \"segments\" : [ {\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"comparison\" : 5,\r\n    \"field\" : 5,\r\n    \"report_id\" : 6,\r\n    \"custom_field_id\" : 7,\r\n    \"isPartOfMultiDimensionalChart\" : true,\r\n    \"id\" : 2,\r\n    \"value\" : \"value\",\r\n    \"entity\" : 1,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  }, {\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"comparison\" : 5,\r\n    \"field\" : 5,\r\n    \"report_id\" : 6,\r\n    \"custom_field_id\" : 7,\r\n    \"isPartOfMultiDimensionalChart\" : true,\r\n    \"id\" : 2,\r\n    \"value\" : \"value\",\r\n    \"entity\" : 1,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  } ],\r\n  \"readyToShowGraph\" : true,\r\n  \"groupByField\" : 1,\r\n  \"name\" : \"name\",\r\n  \"id\" : 0,\r\n  \"entity\" : 4\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ReportMetadataResponse>(exampleJson)
            : default(ReportMetadataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reports Filter
        /// </summary>
        /// <remarks>Reports Filter</remarks>
        /// <param name="entity"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/reports/fields/{entity}")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ReportsFieldsByEntity")]
        [SwaggerResponse(statusCode: 200, type: typeof(ReportFieldsResponse), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ReportsFieldsByEntity([FromRoute (Name = "entity")][Required]string entity, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ReportFieldsResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"fields\" : [ {\r\n    \"viewableName\" : \"viewableName\",\r\n    \"name\" : \"name\",\r\n    \"isCustom\" : true,\r\n    \"singleSelectValues\" : [ {\r\n      \"name\" : \"name\",\r\n      \"id\" : 1\r\n    }, {\r\n      \"name\" : \"name\",\r\n      \"id\" : 1\r\n    } ],\r\n    \"id\" : 0,\r\n    \"fieldType\" : 6\r\n  }, {\r\n    \"viewableName\" : \"viewableName\",\r\n    \"name\" : \"name\",\r\n    \"isCustom\" : true,\r\n    \"singleSelectValues\" : [ {\r\n      \"name\" : \"name\",\r\n      \"id\" : 1\r\n    }, {\r\n      \"name\" : \"name\",\r\n      \"id\" : 1\r\n    } ],\r\n    \"id\" : 0,\r\n    \"fieldType\" : 6\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ReportFieldsResponse>(exampleJson)
            : default(ReportFieldsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Serve Counselor Data Reports
        /// </summary>
        /// <remarks>Serve Counselor Data Reports</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/serve-reports/caseload")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ServeReportsCaseload")]
        [SwaggerResponse(statusCode: 200, type: typeof(CaseloadServeDataResponse), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ServeReportsCaseload([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CaseloadServeDataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"students\" : [ {\r\n    \"totalHours\" : 0.8008281904610115,\r\n    \"name\" : \"name\",\r\n    \"id\" : 6\r\n  }, {\r\n    \"totalHours\" : 0.8008281904610115,\r\n    \"name\" : \"name\",\r\n    \"id\" : 6\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CaseloadServeDataResponse>(exampleJson)
            : default(CaseloadServeDataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Counselor Report
        /// </summary>
        /// <remarks>Service Counselor Report</remarks>
        /// <param name="users"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/serve-reports/counselors/{users}")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ServeReportsCounselorsByUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServeCounselorReportResponse), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ServeReportsCounselorsByUsers([FromRoute (Name = "users")][Required]string users, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServeCounselorReportResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"numberOfLogs\" : 0,\r\n  \"counselor\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"totalNumberOfStudents\" : 5,\r\n  \"totalHours\" : 1.4658129805029452,\r\n  \"percentContributed\" : 6.027456183070403,\r\n  \"averagePerDay\" : 5.637376656633329,\r\n  \"users\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"grade\" : 6,\r\n    \"id\" : 0,\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"grade\" : 6,\r\n    \"id\" : 0,\r\n    \"email\" : \"email\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServeCounselorReportResponse>(exampleJson)
            : default(ServeCounselorReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Serve Admin Data Report
        /// </summary>
        /// <remarks>Serve Admin Data Report</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/serve-reports/fullschool")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ServeReportsFullschool")]
        [SwaggerResponse(statusCode: 200, type: typeof(AdminServeDataReportResponse), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ServeReportsFullschool([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AdminServeDataReportResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"grade\" : 6,\r\n    \"id\" : 0,\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"grade\" : 6,\r\n    \"id\" : 0,\r\n    \"email\" : \"email\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AdminServeDataReportResponse>(exampleJson)
            : default(AdminServeDataReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group Report
        /// </summary>
        /// <remarks>Service Group Report</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/serve-reports/groups/{service_groups}")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ServeReportsGroupsByServiceGroups")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ServiceGroupReportResponse>), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ServeReportsGroupsByServiceGroups([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ServiceGroupReportResponse>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"unverifiedLogs\" : [ {\r\n    \"totalHours\" : 2.027123023002322,\r\n    \"serviceEventName\" : \"serviceEventName\",\r\n    \"id\" : 7,\r\n    \"userName\" : \"userName\",\r\n    \"userId\" : 4\r\n  }, {\r\n    \"totalHours\" : 2.027123023002322,\r\n    \"serviceEventName\" : \"serviceEventName\",\r\n    \"id\" : 7,\r\n    \"userName\" : \"userName\",\r\n    \"userId\" : 4\r\n  } ],\r\n  \"percentTowardsGroupGoal\" : 0,\r\n  \"totalHours\" : 6.027456183070403,\r\n  \"individualGoal\" : 5.962133916683182,\r\n  \"metStudentsIndividual\" : [ {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  }, {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  } ],\r\n  \"groupGoal\" : 9.301444243932576,\r\n  \"notMetStudentsIndividual\" : [ {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  }, {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  } ],\r\n  \"topFiveStudents\" : [ {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  }, {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  } ],\r\n  \"numberOfLogs\" : 7,\r\n  \"allStudents\" : [ {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  }, {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  } ],\r\n  \"totalStudents\" : 1,\r\n  \"numberNotMetIndividual\" : 1,\r\n  \"numberMetIndividual\" : 1,\r\n  \"group\" : {\r\n    \"name\" : \"name\",\r\n    \"id\" : 1,\r\n    \"joinCode\" : \"joinCode\"\r\n  },\r\n  \"averagePerLog\" : 3.616076749251911\r\n}, {\r\n  \"unverifiedLogs\" : [ {\r\n    \"totalHours\" : 2.027123023002322,\r\n    \"serviceEventName\" : \"serviceEventName\",\r\n    \"id\" : 7,\r\n    \"userName\" : \"userName\",\r\n    \"userId\" : 4\r\n  }, {\r\n    \"totalHours\" : 2.027123023002322,\r\n    \"serviceEventName\" : \"serviceEventName\",\r\n    \"id\" : 7,\r\n    \"userName\" : \"userName\",\r\n    \"userId\" : 4\r\n  } ],\r\n  \"percentTowardsGroupGoal\" : 0,\r\n  \"totalHours\" : 6.027456183070403,\r\n  \"individualGoal\" : 5.962133916683182,\r\n  \"metStudentsIndividual\" : [ {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  }, {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  } ],\r\n  \"groupGoal\" : 9.301444243932576,\r\n  \"notMetStudentsIndividual\" : [ {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  }, {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  } ],\r\n  \"topFiveStudents\" : [ {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  }, {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  } ],\r\n  \"numberOfLogs\" : 7,\r\n  \"allStudents\" : [ {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  }, {\r\n    \"totalHoursForGroup\" : 2.3021358869347655,\r\n    \"totalHours\" : 5.637376656633329,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  } ],\r\n  \"totalStudents\" : 1,\r\n  \"numberNotMetIndividual\" : 1,\r\n  \"numberMetIndividual\" : 1,\r\n  \"group\" : {\r\n    \"name\" : \"name\",\r\n    \"id\" : 1,\r\n    \"joinCode\" : \"joinCode\"\r\n  },\r\n  \"averagePerLog\" : 3.616076749251911\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ServiceGroupReportResponse>>(exampleJson)
            : default(List<ServiceGroupReportResponse>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Group Report
        /// </summary>
        /// <remarks>Service Group Report</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/serve-reports/groups/{service_groups}/overview")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ServeReportsGroupsByServiceGroupsOverview")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceGroupOverviewReportResponse), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ServeReportsGroupsByServiceGroupsOverview([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceGroupOverviewReportResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"lifetimeHours\" : 0.8008281904610115,\r\n  \"yearHours\" : 6.027456183070403,\r\n  \"user\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceGroupOverviewReportResponse>(exampleJson)
            : default(ServiceGroupOverviewReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Serve Admin Data Report
        /// </summary>
        /// <remarks>Serve Admin Data Report</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/serve-reports/lifetime")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ServeReportsLifetime")]
        [SwaggerResponse(statusCode: 200, type: typeof(AdminServeDataReportResponse), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ServeReportsLifetime([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AdminServeDataReportResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"data\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"grade\" : 6,\r\n    \"id\" : 0,\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"grade\" : 6,\r\n    \"id\" : 0,\r\n    \"email\" : \"email\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AdminServeDataReportResponse>(exampleJson)
            : default(AdminServeDataReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Serve organization Report
        /// </summary>
        /// <remarks>Serve Organization Report</remarks>
        /// <param name="serviceOrganizations"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/serve-reports/organizations/{service_organizations}")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ServeReportsOrganizationsByServiceOrganizations")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServeOrganizationReportResponse), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ServeReportsOrganizationsByServiceOrganizations([FromRoute (Name = "service_organizations")][Required]string serviceOrganizations, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServeOrganizationReportResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"numberOfLogs\" : 0,\r\n  \"serviceEvents\" : [ {\r\n    \"totalHours\" : 5.962133916683182,\r\n    \"name\" : \"name\"\r\n  }, {\r\n    \"totalHours\" : 5.962133916683182,\r\n    \"name\" : \"name\"\r\n  } ],\r\n  \"totalHours\" : 5.637376656633329,\r\n  \"percentContribution\" : 6.027456183070403,\r\n  \"organization\" : {\r\n    \"name\" : \"name\",\r\n    \"id\" : 6\r\n  },\r\n  \"students\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"grade\" : 6,\r\n    \"id\" : 0,\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"grade\" : 6,\r\n    \"id\" : 0,\r\n    \"email\" : \"email\"\r\n  } ],\r\n  \"averagePerLog\" : 1.4658129805029452\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServeOrganizationReportResponse>(exampleJson)
            : default(ServeOrganizationReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Serve Reports Overview
        /// </summary>
        /// <remarks>Serve Reports Overview</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/serve-reports/overview")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ServeReportsOverview")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ServeFullDataReportResponse>), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ServeReportsOverview([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ServeFullDataReportResponse>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"studentId\" : \"studentId\",\r\n  \"firstName\" : \"firstName\",\r\n  \"lastName\" : \"lastName\",\r\n  \"approved\" : true,\r\n  \"totalHours\" : 0.8008281904610115,\r\n  \"organization\" : \"organization\",\r\n  \"grade\" : 6,\r\n  \"eventName\" : \"eventName\",\r\n  \"dateString\" : \"dateString\",\r\n  \"description\" : \"description\",\r\n  \"email\" : \"email\"\r\n}, {\r\n  \"studentId\" : \"studentId\",\r\n  \"firstName\" : \"firstName\",\r\n  \"lastName\" : \"lastName\",\r\n  \"approved\" : true,\r\n  \"totalHours\" : 0.8008281904610115,\r\n  \"organization\" : \"organization\",\r\n  \"grade\" : 6,\r\n  \"eventName\" : \"eventName\",\r\n  \"dateString\" : \"dateString\",\r\n  \"description\" : \"description\",\r\n  \"email\" : \"email\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ServeFullDataReportResponse>>(exampleJson)
            : default(List<ServeFullDataReportResponse>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Serve Tag Report
        /// </summary>
        /// <remarks>Serve Tag Report</remarks>
        /// <param name="tags"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/serve-reports/tags/{tags}")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1ServeReportsTagsByTags")]
        [SwaggerResponse(statusCode: 200, type: typeof(TagReportConsumerResponse), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1ServeReportsTagsByTags([FromRoute (Name = "tags")][Required]string tags, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TagReportConsumerResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"numberOfLogs\" : 0,\r\n  \"totalHours\" : 6.027456183070403,\r\n  \"percentContribution\" : 5.637376656633329,\r\n  \"tag\" : \"{}\",\r\n  \"logs\" : [ {\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"name\" : \"name\",\r\n    \"id\" : 5,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  }, {\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"name\" : \"name\",\r\n    \"id\" : 5,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  } ],\r\n  \"averagePerLog\" : 2.3021358869347655\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TagReportConsumerResponse>(exampleJson)
            : default(TagReportConsumerResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Transeo Provided Dashboard
        /// </summary>
        /// <remarks>Transeo Provided Dashboard</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/transeo-provided-dashboards")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1TranseoProvidedDashboards")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TranseoProvidedDashboardDTO>), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1TranseoProvidedDashboards([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TranseoProvidedDashboardDTO>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"name\" : \"name\",\r\n  \"id\" : 0\r\n}, {\r\n  \"name\" : \"name\",\r\n  \"id\" : 0\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<TranseoProvidedDashboardDTO>>(exampleJson)
            : default(List<TranseoProvidedDashboardDTO>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Transeo Provided Dashboard
        /// </summary>
        /// <remarks>Transeo Provided Dashboard</remarks>
        /// <param name="transeoProvidedDashboard"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Reports/api/consumer/v1/transeo-provided-dashboards/{transeo_provided_dashboard}")]
        [ValidateModelState]
        [SwaggerOperation("GetReportsApiConsumerV1TranseoProvidedDashboardsByTranseoProvidedDashboard")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TranseoProvidedDashboardDataDTO>), description: "OK")]
        public virtual IActionResult GetReportsApiConsumerV1TranseoProvidedDashboardsByTranseoProvidedDashboard([FromRoute (Name = "transeo_provided_dashboard")][Required]string transeoProvidedDashboard, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TranseoProvidedDashboardDataDTO>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"name\" : \"name\",\r\n  \"url\" : \"url\"\r\n}, {\r\n  \"name\" : \"name\",\r\n  \"url\" : \"url\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<TranseoProvidedDashboardDataDTO>>(exampleJson)
            : default(List<TranseoProvidedDashboardDataDTO>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reports Filter
        /// </summary>
        /// <remarks>Reports Filter</remarks>
        /// <param name="type"></param>
        /// <param name="reports"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Reports/api/consumer/v1/report-filters/{type}/{reports}")]
        [ValidateModelState]
        [SwaggerOperation("PatchReportsApiConsumerV1ReportFiltersByTypeByReports")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchReportsApiConsumerV1ReportFiltersByTypeByReports([FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "reports")][Required]string reports, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Reports
        /// </summary>
        /// <remarks>Create Reports</remarks>
        /// <param name="reports"></param>
        /// <param name="editReportMetadataRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Reports/api/consumer/v1/reports/{reports}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchReportsApiConsumerV1ReportsByReports")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchReportsApiConsumerV1ReportsByReports([FromRoute (Name = "reports")][Required]string reports, [FromBody]EditReportMetadataRequest editReportMetadataRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Reports
        /// </summary>
        /// <remarks>Create Reports</remarks>
        /// <param name="reports"></param>
        /// <param name="reportColumnDefinition"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Reports/api/consumer/v1/reports/{reports}/columns")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchReportsApiConsumerV1ReportsByReportsColumns")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchReportsApiConsumerV1ReportsByReportsColumns([FromRoute (Name = "reports")][Required]string reports, [FromBody]ReportColumnDefinition reportColumnDefinition, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Reports
        /// </summary>
        /// <remarks>Create Reports</remarks>
        /// <param name="createReportRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Reports/api/consumer/v1/reports")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostReportsApiConsumerV1Reports")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostReportsApiConsumerV1Reports([FromBody]CreateReportRequest createReportRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Reports
        /// </summary>
        /// <remarks>Create Reports</remarks>
        /// <param name="reports"></param>
        /// <param name="addReportFilterRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Reports/api/consumer/v1/reports/{reports}/filters")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostReportsApiConsumerV1ReportsByReportsFilters")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostReportsApiConsumerV1ReportsByReportsFilters([FromRoute (Name = "reports")][Required]string reports, [FromBody]AddReportFilterRequest addReportFilterRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Reports
        /// </summary>
        /// <remarks>Create Reports</remarks>
        /// <param name="reports"></param>
        /// <param name="addGroupByFieldRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Reports/api/consumer/v1/reports/{reports}/group")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostReportsApiConsumerV1ReportsByReportsGroup")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostReportsApiConsumerV1ReportsByReportsGroup([FromRoute (Name = "reports")][Required]string reports, [FromBody]AddGroupByFieldRequest addGroupByFieldRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Reports
        /// </summary>
        /// <remarks>Create Reports</remarks>
        /// <param name="reports"></param>
        /// <param name="addReportSegmentRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Reports/api/consumer/v1/reports/{reports}/segments")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostReportsApiConsumerV1ReportsByReportsSegments")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostReportsApiConsumerV1ReportsByReportsSegments([FromRoute (Name = "reports")][Required]string reports, [FromBody]AddReportSegmentRequest addReportSegmentRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Serve Reports
        /// </summary>
        /// <remarks>Serve Reports</remarks>
        /// <param name="searchRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Reports/api/consumer/v1/serve-reports/search/groups")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostReportsApiConsumerV1ServeReportsSearchGroups")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServeReportsSearchResponseBasicCoCurricularGroup), description: "OK")]
        public virtual IActionResult PostReportsApiConsumerV1ServeReportsSearchGroups([FromBody]SearchRequest searchRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServeReportsSearchResponseBasicCoCurricularGroup));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"results\" : [ {\r\n    \"hasEngage\" : true,\r\n    \"admin_id\" : 6,\r\n    \"name\" : \"name\",\r\n    \"admin\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"id\" : 0,\r\n    \"hasService\" : true,\r\n    \"joinCode\" : \"joinCode\"\r\n  }, {\r\n    \"hasEngage\" : true,\r\n    \"admin_id\" : 6,\r\n    \"name\" : \"name\",\r\n    \"admin\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"id\" : 0,\r\n    \"hasService\" : true,\r\n    \"joinCode\" : \"joinCode\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServeReportsSearchResponseBasicCoCurricularGroup>(exampleJson)
            : default(ServeReportsSearchResponseBasicCoCurricularGroup);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Serve Reports
        /// </summary>
        /// <remarks>Serve Reports</remarks>
        /// <param name="searchRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Reports/api/consumer/v1/serve-reports/search/organizations")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostReportsApiConsumerV1ServeReportsSearchOrganizations")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServeReportsSearchResponseBasicUser), description: "OK")]
        public virtual IActionResult PostReportsApiConsumerV1ServeReportsSearchOrganizations([FromBody]SearchRequest searchRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServeReportsSearchResponseBasicUser));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"results\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServeReportsSearchResponseBasicUser>(exampleJson)
            : default(ServeReportsSearchResponseBasicUser);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Serve Reports
        /// </summary>
        /// <remarks>Serve Reports</remarks>
        /// <param name="searchRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Reports/api/consumer/v1/serve-reports/search/students")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostReportsApiConsumerV1ServeReportsSearchStudents")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServeReportsSearchResponseBasicUser), description: "OK")]
        public virtual IActionResult PostReportsApiConsumerV1ServeReportsSearchStudents([FromBody]SearchRequest searchRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServeReportsSearchResponseBasicUser));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"results\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServeReportsSearchResponseBasicUser>(exampleJson)
            : default(ServeReportsSearchResponseBasicUser);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Serve Reports
        /// </summary>
        /// <remarks>Serve Reports</remarks>
        /// <param name="searchRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Reports/api/consumer/v1/serve-reports/search/tags")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostReportsApiConsumerV1ServeReportsSearchTags")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServeReportsSearchResponseTag), description: "OK")]
        public virtual IActionResult PostReportsApiConsumerV1ServeReportsSearchTags([FromBody]SearchRequest searchRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServeReportsSearchResponseTag));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"results\" : [ null, null ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServeReportsSearchResponseTag>(exampleJson)
            : default(ServeReportsSearchResponseTag);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Serve Reports
        /// </summary>
        /// <remarks>Serve Reports</remarks>
        /// <param name="searchRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Reports/api/consumer/v1/serve-reports/search/teachers")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostReportsApiConsumerV1ServeReportsSearchTeachers")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServeReportsSearchResponseBasicUser), description: "OK")]
        public virtual IActionResult PostReportsApiConsumerV1ServeReportsSearchTeachers([FromBody]SearchRequest searchRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServeReportsSearchResponseBasicUser));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"results\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServeReportsSearchResponseBasicUser>(exampleJson)
            : default(ServeReportsSearchResponseBasicUser);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
