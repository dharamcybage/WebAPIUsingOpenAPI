/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
 using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class JobDescriptionsApiController : ControllerBase
    { 
        /// <summary>
        /// Learning Target
        /// </summary>
        /// <remarks>Learning Target</remarks>
        /// <param name="jobDescriptionTasks"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Job Descriptions/api/consumer/v1/learning-targets/goal/{job_description_tasks}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteJobDescriptionsApiConsumerV1LearningTargetsGoalByJobDescriptionTasks")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteJobDescriptionsApiConsumerV1LearningTargetsGoalByJobDescriptionTasks([FromRoute (Name = "job_description_tasks")][Required]string jobDescriptionTasks, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Learning Target
        /// </summary>
        /// <remarks>Learning Target</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Job Descriptions/api/consumer/v1/learning-targets")]
        [ValidateModelState]
        [SwaggerOperation("GetJobDescriptionsApiConsumerV1LearningTargets")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<LearningTargetDTO>), description: "OK")]
        public virtual IActionResult GetJobDescriptionsApiConsumerV1LearningTargets([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<LearningTargetDTO>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"name\" : \"name\",\r\n  \"description\" : \"description\",\r\n  \"id\" : 1\r\n}, {\r\n  \"name\" : \"name\",\r\n  \"description\" : \"description\",\r\n  \"id\" : 1\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<LearningTargetDTO>>(exampleJson)
            : default(List<LearningTargetDTO>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Learning Target
        /// </summary>
        /// <remarks>Learning Target</remarks>
        /// <param name="managedJobDescriptions"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Job Descriptions/api/consumer/v1/learning-targets/{managed_job_descriptions}")]
        [ValidateModelState]
        [SwaggerOperation("GetJobDescriptionsApiConsumerV1LearningTargetsByManagedJobDescriptions")]
        [SwaggerResponse(statusCode: 200, type: typeof(LearningTargetResponse), description: "OK")]
        public virtual IActionResult GetJobDescriptionsApiConsumerV1LearningTargetsByManagedJobDescriptions([FromRoute (Name = "managed_job_descriptions")][Required]string managedJobDescriptions, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(LearningTargetResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"goals\" : [ {\r\n    \"learningTargetId\" : 0,\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"id\" : 6\r\n  }, {\r\n    \"learningTargetId\" : 0,\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"id\" : 6\r\n  } ],\r\n  \"learningTarget\" : {\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"id\" : 1\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<LearningTargetResponse>(exampleJson)
            : default(LearningTargetResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Learning Target
        /// </summary>
        /// <remarks>Learning Target</remarks>
        /// <param name="managedJobDescriptions"></param>
        /// <param name="createLearningTargetRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Job Descriptions/api/consumer/v1/learning-targets/{managed_job_descriptions}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchJobDescriptionsApiConsumerV1LearningTargetsByManagedJobDescriptions")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchJobDescriptionsApiConsumerV1LearningTargetsByManagedJobDescriptions([FromRoute (Name = "managed_job_descriptions")][Required]string managedJobDescriptions, [FromBody]CreateLearningTargetRequest createLearningTargetRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Learning Target
        /// </summary>
        /// <remarks>Learning Target</remarks>
        /// <param name="createLearningTargetRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Job Descriptions/api/consumer/v1/learning-targets")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostJobDescriptionsApiConsumerV1LearningTargets")]
        [SwaggerResponse(statusCode: 200, type: typeof(LearningTargetDTO), description: "OK")]
        public virtual IActionResult PostJobDescriptionsApiConsumerV1LearningTargets([FromBody]CreateLearningTargetRequest createLearningTargetRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(LearningTargetDTO));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"name\" : \"name\",\r\n  \"description\" : \"description\",\r\n  \"id\" : 1\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<LearningTargetDTO>(exampleJson)
            : default(LearningTargetDTO);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Learning Target
        /// </summary>
        /// <remarks>Learning Target</remarks>
        /// <param name="managedJobDescriptions"></param>
        /// <param name="createLearningTargetGoalRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Job Descriptions/api/consumer/v1/learning-targets/{managed_job_descriptions}/goal")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostJobDescriptionsApiConsumerV1LearningTargetsByManagedJobDescriptionsGoal")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostJobDescriptionsApiConsumerV1LearningTargetsByManagedJobDescriptionsGoal([FromRoute (Name = "managed_job_descriptions")][Required]string managedJobDescriptions, [FromBody]CreateLearningTargetGoalRequest createLearningTargetGoalRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Learning Target
        /// </summary>
        /// <remarks>Learning Target</remarks>
        /// <param name="managedJobDescriptions"></param>
        /// <param name="fromId"></param>
        /// <param name="body"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Job Descriptions/api/consumer/v1/learning-targets/{managed_job_descriptions}/goal/from/{fromId}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostJobDescriptionsApiConsumerV1LearningTargetsByManagedJobDescriptionsGoalFromByFromId")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostJobDescriptionsApiConsumerV1LearningTargetsByManagedJobDescriptionsGoalFromByFromId([FromRoute (Name = "managed_job_descriptions")][Required]string managedJobDescriptions, [FromRoute (Name = "fromId")][Required]string fromId, [FromBody]Object body, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
