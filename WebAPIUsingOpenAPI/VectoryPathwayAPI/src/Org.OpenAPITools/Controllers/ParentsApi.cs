/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ParentsApiController : ControllerBase
    { 
        /// <summary>
        /// Service
        /// </summary>
        /// <remarks>Service</remarks>
        /// <param name="serviceEvents"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Parents/api/consumer/v1/parent/event-required/{service_events}")]
        [ValidateModelState]
        [SwaggerOperation("GetParentsApiConsumerV1ParentEventRequiredByServiceEvents")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceParentVerificationResponse), description: "OK")]
        public virtual IActionResult GetParentsApiConsumerV1ParentEventRequiredByServiceEvents([FromRoute (Name = "service_events")][Required]string serviceEvents, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceParentVerificationResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"mustHaveParentVerified\" : true\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceParentVerificationResponse>(exampleJson)
            : default(ServiceParentVerificationResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service
        /// </summary>
        /// <remarks>Service</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Parents/api/consumer/v1/parent/has-verified")]
        [ValidateModelState]
        [SwaggerOperation("GetParentsApiConsumerV1ParentHasVerified")]
        [SwaggerResponse(statusCode: 200, type: typeof(VerifiedServiceParentCountResponse), description: "OK")]
        public virtual IActionResult GetParentsApiConsumerV1ParentHasVerified([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VerifiedServiceParentCountResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"hasVerifiedParents\" : true\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VerifiedServiceParentCountResponse>(exampleJson)
            : default(VerifiedServiceParentCountResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service
        /// </summary>
        /// <remarks>Service</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Parents/api/consumer/v1/parent/school-required")]
        [ValidateModelState]
        [SwaggerOperation("GetParentsApiConsumerV1ParentSchoolRequired")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceParentVerificationResponse), description: "OK")]
        public virtual IActionResult GetParentsApiConsumerV1ParentSchoolRequired([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceParentVerificationResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"mustHaveParentVerified\" : true\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceParentVerificationResponse>(exampleJson)
            : default(ServiceParentVerificationResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service
        /// </summary>
        /// <remarks>Service</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Parents/api/consumer/v1/parent/approve")]
        [ValidateModelState]
        [SwaggerOperation("PostParentsApiConsumerV1ParentApprove")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostParentsApiConsumerV1ParentApprove([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
