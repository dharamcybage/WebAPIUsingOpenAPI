/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Swashbuckle.Swagger.Annotations; using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SettingsApiController : ControllerBase
    { 
        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="academicTests"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Settings/api/consumer/v1/settings/academic-tests/{academic_tests}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSettingsApiConsumerV1SettingsAcademicTestsByAcademicTests")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteSettingsApiConsumerV1SettingsAcademicTestsByAcademicTests([FromRoute (Name = "academic_tests")][Required]string academicTests, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Settings/api/consumer/v1/district-settings")]
        [ValidateModelState]
        [SwaggerOperation("GetSettingsApiConsumerV1DistrictSettings")]
        public virtual IActionResult GetSettingsApiConsumerV1DistrictSettings([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Settings/api/consumer/v1/district-settings/bcc")]
        [ValidateModelState]
        [SwaggerOperation("GetSettingsApiConsumerV1DistrictSettingsBcc")]
        public virtual IActionResult GetSettingsApiConsumerV1DistrictSettingsBcc([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Settings/api/consumer/v1/settings")]
        [ValidateModelState]
        [SwaggerOperation("GetSettingsApiConsumerV1Settings")]
        [SwaggerResponse(statusCode: 200, type: typeof(SettingsControllerSettingsResponse), description: "OK")]
        public virtual IActionResult GetSettingsApiConsumerV1Settings([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SettingsControllerSettingsResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"externalAccountReferenceId\" : \"externalAccountReferenceId\",\r\n  \"showServiceGoals\" : true,\r\n  \"experienceApplicationFormId\" : 1,\r\n  \"hasBusinessPartnerPortal\" : true,\r\n  \"experienceCustomFormId\" : 9,\r\n  \"geoCheckInForServeEnabled\" : true,\r\n  \"organizationsName\" : \"organizationsName\",\r\n  \"externalJobPageShortName\" : \"externalJobPageShortName\",\r\n  \"redirectBPPCreationToExternal\" : true,\r\n  \"hasCommonApp\" : true,\r\n  \"gatedJobsBadge\" : {\r\n    \"decision_points_form_id\" : 6,\r\n    \"conditional_badge_group_id\" : 1,\r\n    \"decisionPointDescription\" : \"decisionPointDescription\",\r\n    \"numberOfCompletedExperiences\" : 0,\r\n    \"description\" : \"description\",\r\n    \"numberOfRequiredCareerSurveys\" : 5,\r\n    \"experienceHours\" : 3.616076749251911,\r\n    \"appearsInLibrary\" : true,\r\n    \"communityServiceHours\" : 9.301444243932576,\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"badge_group_id\" : 2,\r\n    \"selectableOnPlan\" : true,\r\n    \"imageUrl\" : \"imageUrl\",\r\n    \"name\" : \"name\",\r\n    \"showsOnStudentDashboard\" : true,\r\n    \"id\" : 7,\r\n    \"folder_id\" : 5,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  },\r\n  \"showsPlanInSidebar\" : true,\r\n  \"disableStudentSeals\" : true,\r\n  \"canViewDeliveryCenter\" : true,\r\n  \"isCollegeCounselor\" : true,\r\n  \"showStudentReports\" : true,\r\n  \"isTranseoContentBundleOnlyAdmin\" : true,\r\n  \"isDistrictSuperUser\" : true,\r\n  \"experienceReflectionFormId\" : 2,\r\n  \"geoCheckinEnabled\" : true,\r\n  \"serviceProposalEnabled\" : true,\r\n  \"bragSheetsFormId\" : 1,\r\n  \"shouldShowEventsInBusinessPartnerPortal\" : true,\r\n  \"teachersCanViewEntities\" : true,\r\n  \"canDeleteStudents\" : true,\r\n  \"activityApplicationFormId\" : 2,\r\n  \"badgesName\" : \"badgesName\",\r\n  \"activitiesName\" : \"activitiesName\",\r\n  \"logoUrl\" : \"logoUrl\",\r\n  \"dashboardText\" : \"dashboardText\",\r\n  \"hideShareToLinkedin\" : true,\r\n  \"tasksTurnedOn\" : true,\r\n  \"intercomToken\" : \"intercomToken\",\r\n  \"superUserCanAlsoViewPlatform\" : true,\r\n  \"isDistrictAdmin\" : true,\r\n  \"badgeLibraryName\" : \"badgeLibraryName\",\r\n  \"disableShiftsOnStudentSide\" : true,\r\n  \"serviceProposalRequired\" : true,\r\n  \"isTranseoAdmin\" : true,\r\n  \"numericalGradeMappings\" : [ {\r\n    \"numericalValue\" : 1.4658129805029452,\r\n    \"stringValue\" : \"stringValue\"\r\n  }, {\r\n    \"numericalValue\" : 1.4658129805029452,\r\n    \"stringValue\" : \"stringValue\"\r\n  } ],\r\n  \"optionalFormId\" : 7,\r\n  \"canSetEvaluationGoalsOnWorkflowForm\" : true,\r\n  \"journeyIsSunset\" : true,\r\n  \"showStudentJourneySidebar\" : true,\r\n  \"attendanceEnabled\" : true,\r\n  \"adminSealsEnabled\" : true,\r\n  \"entityPermissions\" : {\r\n    \"canCreateContacts\" : true,\r\n    \"canViewOrganizations\" : true,\r\n    \"canViewExperiences\" : true,\r\n    \"canViewContacts\" : true,\r\n    \"canCreateExperiences\" : true,\r\n    \"canCreateOrganizations\" : true,\r\n    \"canEditExperiences\" : true,\r\n    \"canEditOrganizations\" : true,\r\n    \"canEditContacts\" : true\r\n  },\r\n  \"contactsName\" : \"contactsName\",\r\n  \"bypassCollegeGradeRequirement\" : true,\r\n  \"plansName\" : \"plansName\",\r\n  \"products\" : [ null, null ],\r\n  \"isTranseoDemoDistrict\" : true,\r\n  \"useEarnedCreditsForBadgeCalculations\" : true,\r\n  \"showStudentOverallMetrics\" : true,\r\n  \"tasksBelowBadges\" : true,\r\n  \"authType\" : 6,\r\n  \"parchmentEnabled\" : true,\r\n  \"journeyIsShutDown\" : true,\r\n  \"customQueriesEnabled\" : true,\r\n  \"dashboardBadgesName\" : \"dashboardBadgesName\",\r\n  \"showServiceGradeLevelDashboardData\" : true,\r\n  \"contactCustomFormId\" : 5,\r\n  \"districtName\" : \"districtName\",\r\n  \"hideContactOnExperienceCard\" : true,\r\n  \"journeyTier\" : 4,\r\n  \"collegeIsShutDown\" : true,\r\n  \"transcriptsName\" : \"transcriptsName\",\r\n  \"maximumTagsOnServiceEvent\" : 5,\r\n  \"experiencesName\" : \"experiencesName\",\r\n  \"transcriptMatchingKey\" : \"transcriptMatchingKey\",\r\n  \"showParentsOnStudentProfile\" : true,\r\n  \"districtId\" : 3,\r\n  \"organizationCustomFormId\" : 0,\r\n  \"requiredFormId\" : 7,\r\n  \"businessPartnerExperiencesText\" : \"businessPartnerExperiencesText\",\r\n  \"serveSponsorEmailsInTable\" : true,\r\n  \"collegeIsSunset\" : true,\r\n  \"studentsCanSubmitEntities\" : true,\r\n  \"sendsParentEmail\" : true\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SettingsControllerSettingsResponse>(exampleJson)
            : default(SettingsControllerSettingsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Settings/api/consumer/v1/settings/academic-tests")]
        [ValidateModelState]
        [SwaggerOperation("GetSettingsApiConsumerV1SettingsAcademicTests")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Object>), description: "OK")]
        public virtual IActionResult GetSettingsApiConsumerV1SettingsAcademicTests([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Object>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ null, null ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Object>>(exampleJson)
            : default(List<Object>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Settings/api/consumer/v1/settings/bcc")]
        [ValidateModelState]
        [SwaggerOperation("GetSettingsApiConsumerV1SettingsBcc")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual IActionResult GetSettingsApiConsumerV1SettingsBcc([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="district"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Settings/api/consumer/v1/settings/{district}")]
        [ValidateModelState]
        [SwaggerOperation("GetSettingsApiConsumerV1SettingsByDistrict")]
        [SwaggerResponse(statusCode: 200, type: typeof(SettingsControllerSettingsResponse), description: "OK")]
        public virtual IActionResult GetSettingsApiConsumerV1SettingsByDistrict([FromRoute (Name = "district")][Required]string district, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SettingsControllerSettingsResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"externalAccountReferenceId\" : \"externalAccountReferenceId\",\r\n  \"showServiceGoals\" : true,\r\n  \"experienceApplicationFormId\" : 1,\r\n  \"hasBusinessPartnerPortal\" : true,\r\n  \"experienceCustomFormId\" : 9,\r\n  \"geoCheckInForServeEnabled\" : true,\r\n  \"organizationsName\" : \"organizationsName\",\r\n  \"externalJobPageShortName\" : \"externalJobPageShortName\",\r\n  \"redirectBPPCreationToExternal\" : true,\r\n  \"hasCommonApp\" : true,\r\n  \"gatedJobsBadge\" : {\r\n    \"decision_points_form_id\" : 6,\r\n    \"conditional_badge_group_id\" : 1,\r\n    \"decisionPointDescription\" : \"decisionPointDescription\",\r\n    \"numberOfCompletedExperiences\" : 0,\r\n    \"description\" : \"description\",\r\n    \"numberOfRequiredCareerSurveys\" : 5,\r\n    \"experienceHours\" : 3.616076749251911,\r\n    \"appearsInLibrary\" : true,\r\n    \"communityServiceHours\" : 9.301444243932576,\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"badge_group_id\" : 2,\r\n    \"selectableOnPlan\" : true,\r\n    \"imageUrl\" : \"imageUrl\",\r\n    \"name\" : \"name\",\r\n    \"showsOnStudentDashboard\" : true,\r\n    \"id\" : 7,\r\n    \"folder_id\" : 5,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  },\r\n  \"showsPlanInSidebar\" : true,\r\n  \"disableStudentSeals\" : true,\r\n  \"canViewDeliveryCenter\" : true,\r\n  \"isCollegeCounselor\" : true,\r\n  \"showStudentReports\" : true,\r\n  \"isTranseoContentBundleOnlyAdmin\" : true,\r\n  \"isDistrictSuperUser\" : true,\r\n  \"experienceReflectionFormId\" : 2,\r\n  \"geoCheckinEnabled\" : true,\r\n  \"serviceProposalEnabled\" : true,\r\n  \"bragSheetsFormId\" : 1,\r\n  \"shouldShowEventsInBusinessPartnerPortal\" : true,\r\n  \"teachersCanViewEntities\" : true,\r\n  \"canDeleteStudents\" : true,\r\n  \"activityApplicationFormId\" : 2,\r\n  \"badgesName\" : \"badgesName\",\r\n  \"activitiesName\" : \"activitiesName\",\r\n  \"logoUrl\" : \"logoUrl\",\r\n  \"dashboardText\" : \"dashboardText\",\r\n  \"hideShareToLinkedin\" : true,\r\n  \"tasksTurnedOn\" : true,\r\n  \"intercomToken\" : \"intercomToken\",\r\n  \"superUserCanAlsoViewPlatform\" : true,\r\n  \"isDistrictAdmin\" : true,\r\n  \"badgeLibraryName\" : \"badgeLibraryName\",\r\n  \"disableShiftsOnStudentSide\" : true,\r\n  \"serviceProposalRequired\" : true,\r\n  \"isTranseoAdmin\" : true,\r\n  \"numericalGradeMappings\" : [ {\r\n    \"numericalValue\" : 1.4658129805029452,\r\n    \"stringValue\" : \"stringValue\"\r\n  }, {\r\n    \"numericalValue\" : 1.4658129805029452,\r\n    \"stringValue\" : \"stringValue\"\r\n  } ],\r\n  \"optionalFormId\" : 7,\r\n  \"canSetEvaluationGoalsOnWorkflowForm\" : true,\r\n  \"journeyIsSunset\" : true,\r\n  \"showStudentJourneySidebar\" : true,\r\n  \"attendanceEnabled\" : true,\r\n  \"adminSealsEnabled\" : true,\r\n  \"entityPermissions\" : {\r\n    \"canCreateContacts\" : true,\r\n    \"canViewOrganizations\" : true,\r\n    \"canViewExperiences\" : true,\r\n    \"canViewContacts\" : true,\r\n    \"canCreateExperiences\" : true,\r\n    \"canCreateOrganizations\" : true,\r\n    \"canEditExperiences\" : true,\r\n    \"canEditOrganizations\" : true,\r\n    \"canEditContacts\" : true\r\n  },\r\n  \"contactsName\" : \"contactsName\",\r\n  \"bypassCollegeGradeRequirement\" : true,\r\n  \"plansName\" : \"plansName\",\r\n  \"products\" : [ null, null ],\r\n  \"isTranseoDemoDistrict\" : true,\r\n  \"useEarnedCreditsForBadgeCalculations\" : true,\r\n  \"showStudentOverallMetrics\" : true,\r\n  \"tasksBelowBadges\" : true,\r\n  \"authType\" : 6,\r\n  \"parchmentEnabled\" : true,\r\n  \"journeyIsShutDown\" : true,\r\n  \"customQueriesEnabled\" : true,\r\n  \"dashboardBadgesName\" : \"dashboardBadgesName\",\r\n  \"showServiceGradeLevelDashboardData\" : true,\r\n  \"contactCustomFormId\" : 5,\r\n  \"districtName\" : \"districtName\",\r\n  \"hideContactOnExperienceCard\" : true,\r\n  \"journeyTier\" : 4,\r\n  \"collegeIsShutDown\" : true,\r\n  \"transcriptsName\" : \"transcriptsName\",\r\n  \"maximumTagsOnServiceEvent\" : 5,\r\n  \"experiencesName\" : \"experiencesName\",\r\n  \"transcriptMatchingKey\" : \"transcriptMatchingKey\",\r\n  \"showParentsOnStudentProfile\" : true,\r\n  \"districtId\" : 3,\r\n  \"organizationCustomFormId\" : 0,\r\n  \"requiredFormId\" : 7,\r\n  \"businessPartnerExperiencesText\" : \"businessPartnerExperiencesText\",\r\n  \"serveSponsorEmailsInTable\" : true,\r\n  \"collegeIsSunset\" : true,\r\n  \"studentsCanSubmitEntities\" : true,\r\n  \"sendsParentEmail\" : true\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SettingsControllerSettingsResponse>(exampleJson)
            : default(SettingsControllerSettingsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Settings
        /// </summary>
        /// <remarks>Service Settings</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Settings/api/consumer/v1/settings/canaddtags")]
        [ValidateModelState]
        [SwaggerOperation("GetSettingsApiConsumerV1SettingsCanaddtags")]
        [SwaggerResponse(statusCode: 200, type: typeof(BoolResponse), description: "OK")]
        public virtual IActionResult GetSettingsApiConsumerV1SettingsCanaddtags([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BoolResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"value\" : true\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BoolResponse>(exampleJson)
            : default(BoolResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Settings
        /// </summary>
        /// <remarks>Service Settings</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Settings/api/consumer/v1/settings/hidestudentgoals")]
        [ValidateModelState]
        [SwaggerOperation("GetSettingsApiConsumerV1SettingsHidestudentgoals")]
        [SwaggerResponse(statusCode: 200, type: typeof(BoolResponse), description: "OK")]
        public virtual IActionResult GetSettingsApiConsumerV1SettingsHidestudentgoals([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BoolResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"value\" : true\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BoolResponse>(exampleJson)
            : default(BoolResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Settings/api/consumer/v1/settings/school-specific-dashboard")]
        [ValidateModelState]
        [SwaggerOperation("GetSettingsApiConsumerV1SettingsSchoolSpecificDashboard")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SettingsControllerSchoolDashboardTextSettingDTO>), description: "OK")]
        public virtual IActionResult GetSettingsApiConsumerV1SettingsSchoolSpecificDashboard([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SettingsControllerSchoolDashboardTextSettingDTO>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"schoolId\" : 0,\r\n  \"text\" : \"text\",\r\n  \"schoolName\" : \"schoolName\"\r\n}, {\r\n  \"schoolId\" : 0,\r\n  \"text\" : \"text\",\r\n  \"schoolName\" : \"schoolName\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<SettingsControllerSchoolDashboardTextSettingDTO>>(exampleJson)
            : default(List<SettingsControllerSchoolDashboardTextSettingDTO>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Settings/api/consumer/v1/zendesk-chat-jwt")]
        [ValidateModelState]
        [SwaggerOperation("GetSettingsApiConsumerV1ZendeskChatJwt")]
        [SwaggerResponse(statusCode: 200, type: typeof(ZendeskJWTResponse), description: "OK")]
        public virtual IActionResult GetSettingsApiConsumerV1ZendeskChatJwt([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ZendeskJWTResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"jwt\" : \"jwt\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ZendeskJWTResponse>(exampleJson)
            : default(ZendeskJWTResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Settings/api/consumer/v1/zendesk-jwt")]
        [ValidateModelState]
        [SwaggerOperation("GetSettingsApiConsumerV1ZendeskJwt")]
        [SwaggerResponse(statusCode: 200, type: typeof(ZendeskJWTResponse), description: "OK")]
        public virtual IActionResult GetSettingsApiConsumerV1ZendeskJwt([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ZendeskJWTResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"jwt\" : \"jwt\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ZendeskJWTResponse>(exampleJson)
            : default(ZendeskJWTResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="clientUpdateSettingsRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Settings/api/consumer/v1/settings")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchSettingsApiConsumerV1Settings")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchSettingsApiConsumerV1Settings([FromBody]ClientUpdateSettingsRequest clientUpdateSettingsRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="settingsCollegeUpdateRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Settings/api/consumer/v1/settings/college")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchSettingsApiConsumerV1SettingsCollege")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchSettingsApiConsumerV1SettingsCollege([FromBody]SettingsCollegeUpdateRequest settingsCollegeUpdateRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="updateDistrictLogoRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Settings/api/consumer/v1/settings/image")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchSettingsApiConsumerV1SettingsImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchSettingsApiConsumerV1SettingsImage([FromBody]UpdateDistrictLogoRequest updateDistrictLogoRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Settings/api/consumer/v1/settings/image/reset")]
        [ValidateModelState]
        [SwaggerOperation("PatchSettingsApiConsumerV1SettingsImageReset")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchSettingsApiConsumerV1SettingsImageReset([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="hubspotRedirectURLRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Settings/api/consumer/v1/hubspot-helpdesk-redirect")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostSettingsApiConsumerV1HubspotHelpdeskRedirect")]
        [SwaggerResponse(statusCode: 200, type: typeof(HubspotRedirectURLResponse), description: "OK")]
        public virtual IActionResult PostSettingsApiConsumerV1HubspotHelpdeskRedirect([FromBody]HubspotRedirectURLRequest hubspotRedirectURLRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(HubspotRedirectURLResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"redirectUrl\" : \"redirectUrl\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<HubspotRedirectURLResponse>(exampleJson)
            : default(HubspotRedirectURLResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="createEntityWithNameOnlyRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Settings/api/consumer/v1/settings/academic-tests")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostSettingsApiConsumerV1SettingsAcademicTests")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostSettingsApiConsumerV1SettingsAcademicTests([FromBody]CreateEntityWithNameOnlyRequest createEntityWithNameOnlyRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Settings
        /// </summary>
        /// <remarks>Settings</remarks>
        /// <param name="settingsControllerSchoolDashboardTextSettingDTO"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Settings/api/consumer/v1/settings/school-specific-dashboard")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostSettingsApiConsumerV1SettingsSchoolSpecificDashboard")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostSettingsApiConsumerV1SettingsSchoolSpecificDashboard([FromBody]SettingsControllerSchoolDashboardTextSettingDTO settingsControllerSchoolDashboardTextSettingDTO, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
