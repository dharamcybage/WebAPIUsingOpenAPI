/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Swashbuckle.Swagger.Annotations; using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ServiceEventsApiController : ControllerBase
    { 
        /// <summary>
        /// Service Events
        /// </summary>
        /// <remarks>Service Events</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceEvents"></param>
        /// <param name="body"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Service Events/api/consumer/v1/groups/{service_groups}/events/{service_events}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DeleteServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEvents")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEvents([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "service_events")][Required]string serviceEvents, [FromBody]Object body, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// External Event
        /// </summary>
        /// <remarks>External Event</remarks>
        /// <param name="token"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Events/api/consumer/v1/externalevents/{token}")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceEventsApiConsumerV1ExternaleventsByToken")]
        [SwaggerResponse(statusCode: 200, type: typeof(CoCurricularGroupDTO), description: "OK")]
        public virtual IActionResult GetServiceEventsApiConsumerV1ExternaleventsByToken([FromRoute (Name = "token")][Required]string token, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CoCurricularGroupDTO));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"requiresVerification\" : true,\r\n  \"allowsExternalSubmission\" : true,\r\n  \"individualGoal\" : 5.962133916683182,\r\n  \"groupGoal\" : 5.637376656633329,\r\n  \"admin\" : 1,\r\n  \"description\" : \"description\",\r\n  \"default_school_id\" : 6,\r\n  \"maxStudentsAllowed\" : 0,\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"acceptingStudents\" : true,\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"hasEngage\" : true,\r\n  \"twitterHandle\" : \"twitterHandle\",\r\n  \"name\" : \"name\",\r\n  \"isDefaultSchoolGroup\" : true,\r\n  \"youtubeLink\" : \"youtubeLink\",\r\n  \"id\" : 2,\r\n  \"joinCode\" : \"joinCode\",\r\n  \"hasService\" : true,\r\n  \"externalEventToken\" : \"externalEventToken\",\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CoCurricularGroupDTO>(exampleJson)
            : default(CoCurricularGroupDTO);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// External Event
        /// </summary>
        /// <remarks>External Event</remarks>
        /// <param name="externallyAddedServiceEvents"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Events/api/consumer/v1/externalevents/event/{externally_added_service_events}")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceEventsApiConsumerV1ExternaleventsEventByExternallyAddedServiceEvents")]
        [SwaggerResponse(statusCode: 200, type: typeof(ExternallyAddedServiceEventDTO), description: "OK")]
        public virtual IActionResult GetServiceEventsApiConsumerV1ExternaleventsEventByExternallyAddedServiceEvents([FromRoute (Name = "externally_added_service_events")][Required]string externallyAddedServiceEvents, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ExternallyAddedServiceEventDTO));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"contactEmail\" : \"contactEmail\",\r\n  \"contactName\" : \"contactName\",\r\n  \"description\" : \"description\",\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"group_id\" : 1,\r\n  \"organization_id\" : 6,\r\n  \"maxNumberOfStudents\" : 5,\r\n  \"name\" : \"name\",\r\n  \"location\" : \"location\",\r\n  \"id\" : 0,\r\n  \"time\" : \"time\",\r\n  \"contactPhone\" : \"contactPhone\",\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ExternallyAddedServiceEventDTO>(exampleJson)
            : default(ExternallyAddedServiceEventDTO);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Events
        /// </summary>
        /// <remarks>Service Events</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceEvents"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Events/api/consumer/v1/groups/{service_groups}/events/{service_events}")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEvents")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceEventResponse), description: "OK")]
        public virtual IActionResult GetServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEvents([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "service_events")][Required]string serviceEvents, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceEventResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"userSignedUp\" : true,\r\n  \"remainingSpots\" : 6,\r\n  \"userLogged\" : true,\r\n  \"hidePendingLogs\" : true,\r\n  \"canPrefill\" : true,\r\n  \"event\" : {\r\n    \"sponsor\" : \"{}\",\r\n    \"requireSignup\" : true,\r\n    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"eventHasPassed\" : true,\r\n    \"description\" : \"description\",\r\n    \"dateString\" : \"dateString\",\r\n    \"type\" : 2,\r\n    \"sponsor_id\" : 1,\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"group_id\" : 7,\r\n    \"organization\" : \"organization\",\r\n    \"name\" : \"name\",\r\n    \"messages\" : [ null, null ],\r\n    \"location\" : \"location\",\r\n    \"maximumRegisteredStudents\" : 5,\r\n    \"time\" : \"time\",\r\n    \"id\" : 5,\r\n    \"acceptingRegistrations\" : true,\r\n    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  },\r\n  \"pendingLogs\" : [ {\r\n    \"sponsor\" : {\r\n      \"name\" : \"name\",\r\n      \"status\" : 9\r\n    },\r\n    \"totalHours\" : 7.061401241503109,\r\n    \"verified\" : true,\r\n    \"service_event_id\" : 3,\r\n    \"id\" : 2,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\"\r\n    }\r\n  }, {\r\n    \"sponsor\" : {\r\n      \"name\" : \"name\",\r\n      \"status\" : 9\r\n    },\r\n    \"totalHours\" : 7.061401241503109,\r\n    \"verified\" : true,\r\n    \"service_event_id\" : 3,\r\n    \"id\" : 2,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\"\r\n    }\r\n  } ],\r\n  \"allowedAmount\" : 0,\r\n  \"tags\" : [ {\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"id\" : 1,\r\n    \"sendsParentEmail\" : true,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  }, {\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"id\" : 1,\r\n    \"sendsParentEmail\" : true,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceEventResponse>(exampleJson)
            : default(ServiceEventResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Events
        /// </summary>
        /// <remarks>Service Events</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceEvents"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Events/api/consumer/v1/groups/{service_groups}/events/{service_events}/registered")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEventsRegistered")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<BasicUser>), description: "OK")]
        public virtual IActionResult GetServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEventsRegistered([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "service_events")][Required]string serviceEvents, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<BasicUser>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"firstName\" : \"firstName\",\r\n  \"lastName\" : \"lastName\",\r\n  \"role\" : 1,\r\n  \"school\" : \"school\",\r\n  \"grade\" : 6,\r\n  \"id\" : 5,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"email\" : \"email\"\r\n}, {\r\n  \"firstName\" : \"firstName\",\r\n  \"lastName\" : \"lastName\",\r\n  \"role\" : 1,\r\n  \"school\" : \"school\",\r\n  \"grade\" : 6,\r\n  \"id\" : 5,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"email\" : \"email\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<BasicUser>>(exampleJson)
            : default(List<BasicUser>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Events Verification
        /// </summary>
        /// <remarks>Service Events Verification</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceEvents"></param>
        /// <param name="users"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Events/api/consumer/v1/groups/{service_groups}/events/{service_events}/verification/verify/{users}")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEventsVerificationVerifyByUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceEventVerificationMetadataResponse), description: "OK")]
        public virtual IActionResult GetServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEventsVerificationVerifyByUsers([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "service_events")][Required]string serviceEvents, [FromRoute (Name = "users")][Required]string users, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceEventVerificationMetadataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"hasPrefilledLogs\" : true,\r\n  \"days\" : [ {\r\n    \"date\" : \"date\",\r\n    \"totalHours\" : 0.8008281904610115,\r\n    \"id\" : 6\r\n  }, {\r\n    \"date\" : \"date\",\r\n    \"totalHours\" : 0.8008281904610115,\r\n    \"id\" : 6\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceEventVerificationMetadataResponse>(exampleJson)
            : default(ServiceEventVerificationMetadataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Service Event
        /// </summary>
        /// <remarks>Create Service Event</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Events/api/consumer/v1/groups/{service_groups}/events/create")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceEventsApiConsumerV1GroupsByServiceGroupsEventsCreate")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreateServiceEventMetadataResponse), description: "OK")]
        public virtual IActionResult GetServiceEventsApiConsumerV1GroupsByServiceGroupsEventsCreate([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateServiceEventMetadataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"organizations\" : [ {\r\n    \"name\" : \"name\",\r\n    \"id\" : 6\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"id\" : 6\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateServiceEventMetadataResponse>(exampleJson)
            : default(CreateServiceEventMetadataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Event External Link
        /// </summary>
        /// <remarks>Service Events External Link</remarks>
        /// <param name="serviceEvents"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Events/api/consumer/v1/service-event/{service_events}/registration-list-link")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceEventsApiConsumerV1ServiceEventByServiceEventsRegistrationListLink")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual IActionResult GetServiceEventsApiConsumerV1ServiceEventByServiceEventsRegistrationListLink([FromRoute (Name = "service_events")][Required]string serviceEvents, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Events External Link
        /// </summary>
        /// <remarks>Service Events External Link</remarks>
        /// <param name="token"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Events/api/consumer/v1/service-event/registered-students/token/{token}")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceEventsApiConsumerV1ServiceEventRegisteredStudentsTokenByToken")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<BasicUser>), description: "OK")]
        public virtual IActionResult GetServiceEventsApiConsumerV1ServiceEventRegisteredStudentsTokenByToken([FromRoute (Name = "token")][Required]string token, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<BasicUser>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"firstName\" : \"firstName\",\r\n  \"lastName\" : \"lastName\",\r\n  \"role\" : 1,\r\n  \"school\" : \"school\",\r\n  \"grade\" : 6,\r\n  \"id\" : 5,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"email\" : \"email\"\r\n}, {\r\n  \"firstName\" : \"firstName\",\r\n  \"lastName\" : \"lastName\",\r\n  \"role\" : 1,\r\n  \"school\" : \"school\",\r\n  \"grade\" : 6,\r\n  \"id\" : 5,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"email\" : \"email\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<BasicUser>>(exampleJson)
            : default(List<BasicUser>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Events
        /// </summary>
        /// <remarks>Service Events</remarks>
        /// <param name="action"></param>
        /// <param name="code"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Service Events/api/consumer/v1/externalsponsors/{action}/{code}")]
        [ValidateModelState]
        [SwaggerOperation("PatchServiceEventsApiConsumerV1ExternalsponsorsByActionByCode")]
        [SwaggerResponse(statusCode: 200, type: typeof(ExternalServiceSponsorDTO), description: "OK")]
        public virtual IActionResult PatchServiceEventsApiConsumerV1ExternalsponsorsByActionByCode([FromRoute (Name = "action")][Required]string action, [FromRoute (Name = "code")][Required]string code, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ExternalServiceSponsorDTO));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"feedback\" : \"feedback\",\r\n  \"emailToken\" : \"emailToken\",\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"approved\" : true,\r\n  \"rejected\" : true,\r\n  \"phone\" : \"phone\",\r\n  \"name\" : \"name\",\r\n  \"service_event_id\" : 6,\r\n  \"id\" : 0,\r\n  \"email\" : \"email\",\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ExternalServiceSponsorDTO>(exampleJson)
            : default(ExternalServiceSponsorDTO);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Events
        /// </summary>
        /// <remarks>Service Events</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceEvents"></param>
        /// <param name="editServiceEventRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Service Events/api/consumer/v1/groups/{service_groups}/events/{service_events}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEvents")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEvents([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "service_events")][Required]string serviceEvents, [FromBody]EditServiceEventRequest editServiceEventRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Events
        /// </summary>
        /// <remarks>Service Events</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceEvents"></param>
        /// <param name="action"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Service Events/api/consumer/v1/groups/{service_groups}/events/{service_events}/registration/{action}")]
        [ValidateModelState]
        [SwaggerOperation("PatchServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEventsRegistrationByAction")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEventsRegistrationByAction([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "service_events")][Required]string serviceEvents, [FromRoute (Name = "action")][Required]string action, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Events Search
        /// </summary>
        /// <remarks>Service Events Search</remarks>
        /// <param name="searchRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Events/api/consumer/v1/events/search")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceEventsApiConsumerV1EventsSearch")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceEventSearchResponse), description: "OK")]
        public virtual IActionResult PostServiceEventsApiConsumerV1EventsSearch([FromBody]SearchRequest searchRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceEventSearchResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"events\" : [ {\r\n    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"group_id\" : 0,\r\n    \"organization\" : \"organization\",\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"location\" : \"location\",\r\n    \"time\" : \"time\",\r\n    \"id\" : 6,\r\n    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  }, {\r\n    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"group_id\" : 0,\r\n    \"organization\" : \"organization\",\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"location\" : \"location\",\r\n    \"time\" : \"time\",\r\n    \"id\" : 6,\r\n    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceEventSearchResponse>(exampleJson)
            : default(ServiceEventSearchResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// External Event
        /// </summary>
        /// <remarks>External Event</remarks>
        /// <param name="createExternalEventRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Events/api/consumer/v1/externalevents")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceEventsApiConsumerV1Externalevents")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceEventsApiConsumerV1Externalevents([FromBody]CreateExternalEventRequest createExternalEventRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// External Event
        /// </summary>
        /// <remarks>External Event</remarks>
        /// <param name="deleteExternalEventRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Events/api/consumer/v1/externalevents/delete")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceEventsApiConsumerV1ExternaleventsDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceEventsApiConsumerV1ExternaleventsDelete([FromBody]DeleteExternalEventRequest deleteExternalEventRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Events
        /// </summary>
        /// <remarks>Service Events</remarks>
        /// <param name="addExternalFeedbackToLogRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Events/api/consumer/v1/externalsponsors/feedback")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceEventsApiConsumerV1ExternalsponsorsFeedback")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceEventsApiConsumerV1ExternalsponsorsFeedback([FromBody]AddExternalFeedbackToLogRequest addExternalFeedbackToLogRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Events Message
        /// </summary>
        /// <remarks>Service Events Message</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceEvents"></param>
        /// <param name="serviceEventMessageRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Events/api/consumer/v1/groups/{service_groups}/events/{service_events}/messages/create")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEventsMessagesCreate")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEventsMessagesCreate([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "service_events")][Required]string serviceEvents, [FromBody]ServiceEventMessageRequest serviceEventMessageRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Events Verification
        /// </summary>
        /// <remarks>Service Events Verification</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceEvents"></param>
        /// <param name="searchRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Events/api/consumer/v1/groups/{service_groups}/events/{service_events}/verification/search")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEventsVerificationSearch")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceEventVerificationSearchResponse), description: "OK")]
        public virtual IActionResult PostServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEventsVerificationSearch([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "service_events")][Required]string serviceEvents, [FromBody]SearchRequest searchRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceEventVerificationSearchResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"users\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceEventVerificationSearchResponse>(exampleJson)
            : default(ServiceEventVerificationSearchResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Events Verification
        /// </summary>
        /// <remarks>Service Events Verification</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="serviceEvents"></param>
        /// <param name="users"></param>
        /// <param name="serviceEventVerificationRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Events/api/consumer/v1/groups/{service_groups}/events/{service_events}/verification/verify/{users}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEventsVerificationVerifyByUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceEventsApiConsumerV1GroupsByServiceGroupsEventsByServiceEventsVerificationVerifyByUsers([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromRoute (Name = "service_events")][Required]string serviceEvents, [FromRoute (Name = "users")][Required]string users, [FromBody]ServiceEventVerificationRequest serviceEventVerificationRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Service Event
        /// </summary>
        /// <remarks>Create Service Event</remarks>
        /// <param name="serviceGroups"></param>
        /// <param name="createServiceEventRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Events/api/consumer/v1/groups/{service_groups}/events/create")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceEventsApiConsumerV1GroupsByServiceGroupsEventsCreate")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceEventsApiConsumerV1GroupsByServiceGroupsEventsCreate([FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromBody]CreateServiceEventRequest createServiceEventRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
