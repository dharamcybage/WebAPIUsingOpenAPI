/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Swashbuckle.Swagger.Annotations; using Org.OpenAPITools.Models;
using Swashbuckle.Swagger.Annotations;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ActivityApiController : ControllerBase
    { 
        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Edit Activity</remarks>
        /// <param name="activities"></param>using MyNamespace.Helpers;  // Add your required using statement
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Activity/api/consumer/v1/activities/{activities}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteActivityApiConsumerV1ActivitiesByActivities")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteActivityApiConsumerV1ActivitiesByActivities([FromRoute (Name = "activities")][Required]string activities, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity</remarks>
        /// <param name="userActivity"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Activity/api/consumer/v1/activities/delete-user-activity-completion/{user_activity}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteActivityApiConsumerV1ActivitiesDeleteUserActivityCompletionByUserActivity")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteActivityApiConsumerV1ActivitiesDeleteUserActivityCompletionByUserActivity([FromRoute (Name = "user_activity")][Required]string userActivity, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity</remarks>
        /// <param name="userActivity"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Activity/api/consumer/v1/activities/delete-user-activity-forms/{user_activity}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteActivityApiConsumerV1ActivitiesDeleteUserActivityFormsByUserActivity")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteActivityApiConsumerV1ActivitiesDeleteUserActivityFormsByUserActivity([FromRoute (Name = "user_activity")][Required]string userActivity, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activities")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1Activities")]
        [SwaggerResponse(statusCode: 200, type: typeof(ActivityBreakdownResponse), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1Activities([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ActivityBreakdownResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"registeredActivities\" : [ {\r\n    \"allowsResubmission\" : true,\r\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"notes\" : \"notes\",\r\n    \"user_activity_id\" : 6,\r\n    \"form_submission_id\" : 9,\r\n    \"signatureUrl\" : \"signatureUrl\",\r\n    \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"description\" : \"description\",\r\n    \"sponsorReminderDays\" : 7,\r\n    \"registration_form_id\" : 4,\r\n    \"availableUntil\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"premium\" : true,\r\n    \"imageUrl\" : \"imageUrl\",\r\n    \"id\" : 8,\r\n    \"order\" : 7,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"tag_ids\" : [ 3, 3 ],\r\n    \"studentReminderDays\" : 6,\r\n    \"maxNumberRegistrations\" : 5,\r\n    \"numberApprovalsRequired\" : 1,\r\n    \"conditional_badge_group_id\" : 1,\r\n    \"form_id\" : 1,\r\n    \"addedViaBadge\" : true,\r\n    \"created_by\" : 9,\r\n    \"iframeUrl\" : \"iframeUrl\",\r\n    \"canRegister\" : true,\r\n    \"appearsInMarketPlace\" : true,\r\n    \"activity_type_id\" : 1,\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"visibleForEveryone\" : true,\r\n    \"name\" : \"name\",\r\n    \"externalApprovalData\" : {\r\n      \"businessPartnerId\" : 1,\r\n      \"role\" : \"role\",\r\n      \"organization\" : \"organization\",\r\n      \"name\" : \"name\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"approvalProcess\" : 2,\r\n    \"folder_id\" : 4,\r\n    \"isEvent\" : true\r\n  }, {\r\n    \"allowsResubmission\" : true,\r\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"notes\" : \"notes\",\r\n    \"user_activity_id\" : 6,\r\n    \"form_submission_id\" : 9,\r\n    \"signatureUrl\" : \"signatureUrl\",\r\n    \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"description\" : \"description\",\r\n    \"sponsorReminderDays\" : 7,\r\n    \"registration_form_id\" : 4,\r\n    \"availableUntil\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"premium\" : true,\r\n    \"imageUrl\" : \"imageUrl\",\r\n    \"id\" : 8,\r\n    \"order\" : 7,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"tag_ids\" : [ 3, 3 ],\r\n    \"studentReminderDays\" : 6,\r\n    \"maxNumberRegistrations\" : 5,\r\n    \"numberApprovalsRequired\" : 1,\r\n    \"conditional_badge_group_id\" : 1,\r\n    \"form_id\" : 1,\r\n    \"addedViaBadge\" : true,\r\n    \"created_by\" : 9,\r\n    \"iframeUrl\" : \"iframeUrl\",\r\n    \"canRegister\" : true,\r\n    \"appearsInMarketPlace\" : true,\r\n    \"activity_type_id\" : 1,\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"visibleForEveryone\" : true,\r\n    \"name\" : \"name\",\r\n    \"externalApprovalData\" : {\r\n      \"businessPartnerId\" : 1,\r\n      \"role\" : \"role\",\r\n      \"organization\" : \"organization\",\r\n      \"name\" : \"name\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"approvalProcess\" : 2,\r\n    \"folder_id\" : 4,\r\n    \"isEvent\" : true\r\n  } ],\r\n  \"completedActivities\" : [ {\r\n    \"allowsResubmission\" : true,\r\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"notes\" : \"notes\",\r\n    \"user_activity_id\" : 6,\r\n    \"form_submission_id\" : 9,\r\n    \"signatureUrl\" : \"signatureUrl\",\r\n    \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"description\" : \"description\",\r\n    \"sponsorReminderDays\" : 7,\r\n    \"registration_form_id\" : 4,\r\n    \"availableUntil\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"premium\" : true,\r\n    \"imageUrl\" : \"imageUrl\",\r\n    \"id\" : 8,\r\n    \"order\" : 7,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"tag_ids\" : [ 3, 3 ],\r\n    \"studentReminderDays\" : 6,\r\n    \"maxNumberRegistrations\" : 5,\r\n    \"numberApprovalsRequired\" : 1,\r\n    \"conditional_badge_group_id\" : 1,\r\n    \"form_id\" : 1,\r\n    \"addedViaBadge\" : true,\r\n    \"created_by\" : 9,\r\n    \"iframeUrl\" : \"iframeUrl\",\r\n    \"canRegister\" : true,\r\n    \"appearsInMarketPlace\" : true,\r\n    \"activity_type_id\" : 1,\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"visibleForEveryone\" : true,\r\n    \"name\" : \"name\",\r\n    \"externalApprovalData\" : {\r\n      \"businessPartnerId\" : 1,\r\n      \"role\" : \"role\",\r\n      \"organization\" : \"organization\",\r\n      \"name\" : \"name\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"approvalProcess\" : 2,\r\n    \"folder_id\" : 4,\r\n    \"isEvent\" : true\r\n  }, {\r\n    \"allowsResubmission\" : true,\r\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"notes\" : \"notes\",\r\n    \"user_activity_id\" : 6,\r\n    \"form_submission_id\" : 9,\r\n    \"signatureUrl\" : \"signatureUrl\",\r\n    \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"description\" : \"description\",\r\n    \"sponsorReminderDays\" : 7,\r\n    \"registration_form_id\" : 4,\r\n    \"availableUntil\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"premium\" : true,\r\n    \"imageUrl\" : \"imageUrl\",\r\n    \"id\" : 8,\r\n    \"order\" : 7,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"tag_ids\" : [ 3, 3 ],\r\n    \"studentReminderDays\" : 6,\r\n    \"maxNumberRegistrations\" : 5,\r\n    \"numberApprovalsRequired\" : 1,\r\n    \"conditional_badge_group_id\" : 1,\r\n    \"form_id\" : 1,\r\n    \"addedViaBadge\" : true,\r\n    \"created_by\" : 9,\r\n    \"iframeUrl\" : \"iframeUrl\",\r\n    \"canRegister\" : true,\r\n    \"appearsInMarketPlace\" : true,\r\n    \"activity_type_id\" : 1,\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"visibleForEveryone\" : true,\r\n    \"name\" : \"name\",\r\n    \"externalApprovalData\" : {\r\n      \"businessPartnerId\" : 1,\r\n      \"role\" : \"role\",\r\n      \"organization\" : \"organization\",\r\n      \"name\" : \"name\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"approvalProcess\" : 2,\r\n    \"folder_id\" : 4,\r\n    \"isEvent\" : true\r\n  } ],\r\n  \"availableActivities\" : [ {\r\n    \"allowsResubmission\" : true,\r\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"notes\" : \"notes\",\r\n    \"user_activity_id\" : 6,\r\n    \"form_submission_id\" : 9,\r\n    \"signatureUrl\" : \"signatureUrl\",\r\n    \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"description\" : \"description\",\r\n    \"sponsorReminderDays\" : 7,\r\n    \"registration_form_id\" : 4,\r\n    \"availableUntil\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"premium\" : true,\r\n    \"imageUrl\" : \"imageUrl\",\r\n    \"id\" : 8,\r\n    \"order\" : 7,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"tag_ids\" : [ 3, 3 ],\r\n    \"studentReminderDays\" : 6,\r\n    \"maxNumberRegistrations\" : 5,\r\n    \"numberApprovalsRequired\" : 1,\r\n    \"conditional_badge_group_id\" : 1,\r\n    \"form_id\" : 1,\r\n    \"addedViaBadge\" : true,\r\n    \"created_by\" : 9,\r\n    \"iframeUrl\" : \"iframeUrl\",\r\n    \"canRegister\" : true,\r\n    \"appearsInMarketPlace\" : true,\r\n    \"activity_type_id\" : 1,\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"visibleForEveryone\" : true,\r\n    \"name\" : \"name\",\r\n    \"externalApprovalData\" : {\r\n      \"businessPartnerId\" : 1,\r\n      \"role\" : \"role\",\r\n      \"organization\" : \"organization\",\r\n      \"name\" : \"name\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"approvalProcess\" : 2,\r\n    \"folder_id\" : 4,\r\n    \"isEvent\" : true\r\n  }, {\r\n    \"allowsResubmission\" : true,\r\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"notes\" : \"notes\",\r\n    \"user_activity_id\" : 6,\r\n    \"form_submission_id\" : 9,\r\n    \"signatureUrl\" : \"signatureUrl\",\r\n    \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"description\" : \"description\",\r\n    \"sponsorReminderDays\" : 7,\r\n    \"registration_form_id\" : 4,\r\n    \"availableUntil\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"premium\" : true,\r\n    \"imageUrl\" : \"imageUrl\",\r\n    \"id\" : 8,\r\n    \"order\" : 7,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"tag_ids\" : [ 3, 3 ],\r\n    \"studentReminderDays\" : 6,\r\n    \"maxNumberRegistrations\" : 5,\r\n    \"numberApprovalsRequired\" : 1,\r\n    \"conditional_badge_group_id\" : 1,\r\n    \"form_id\" : 1,\r\n    \"addedViaBadge\" : true,\r\n    \"created_by\" : 9,\r\n    \"iframeUrl\" : \"iframeUrl\",\r\n    \"canRegister\" : true,\r\n    \"appearsInMarketPlace\" : true,\r\n    \"activity_type_id\" : 1,\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"visibleForEveryone\" : true,\r\n    \"name\" : \"name\",\r\n    \"externalApprovalData\" : {\r\n      \"businessPartnerId\" : 1,\r\n      \"role\" : \"role\",\r\n      \"organization\" : \"organization\",\r\n      \"name\" : \"name\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"approvalProcess\" : 2,\r\n    \"folder_id\" : 4,\r\n    \"isEvent\" : true\r\n  } ],\r\n  \"pendingActivities\" : [ {\r\n    \"allowsResubmission\" : true,\r\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"notes\" : \"notes\",\r\n    \"user_activity_id\" : 6,\r\n    \"form_submission_id\" : 9,\r\n    \"signatureUrl\" : \"signatureUrl\",\r\n    \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"description\" : \"description\",\r\n    \"sponsorReminderDays\" : 7,\r\n    \"registration_form_id\" : 4,\r\n    \"availableUntil\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"premium\" : true,\r\n    \"imageUrl\" : \"imageUrl\",\r\n    \"id\" : 8,\r\n    \"order\" : 7,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"tag_ids\" : [ 3, 3 ],\r\n    \"studentReminderDays\" : 6,\r\n    \"maxNumberRegistrations\" : 5,\r\n    \"numberApprovalsRequired\" : 1,\r\n    \"conditional_badge_group_id\" : 1,\r\n    \"form_id\" : 1,\r\n    \"addedViaBadge\" : true,\r\n    \"created_by\" : 9,\r\n    \"iframeUrl\" : \"iframeUrl\",\r\n    \"canRegister\" : true,\r\n    \"appearsInMarketPlace\" : true,\r\n    \"activity_type_id\" : 1,\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"visibleForEveryone\" : true,\r\n    \"name\" : \"name\",\r\n    \"externalApprovalData\" : {\r\n      \"businessPartnerId\" : 1,\r\n      \"role\" : \"role\",\r\n      \"organization\" : \"organization\",\r\n      \"name\" : \"name\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"approvalProcess\" : 2,\r\n    \"folder_id\" : 4,\r\n    \"isEvent\" : true\r\n  }, {\r\n    \"allowsResubmission\" : true,\r\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"notes\" : \"notes\",\r\n    \"user_activity_id\" : 6,\r\n    \"form_submission_id\" : 9,\r\n    \"signatureUrl\" : \"signatureUrl\",\r\n    \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"description\" : \"description\",\r\n    \"sponsorReminderDays\" : 7,\r\n    \"registration_form_id\" : 4,\r\n    \"availableUntil\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"premium\" : true,\r\n    \"imageUrl\" : \"imageUrl\",\r\n    \"id\" : 8,\r\n    \"order\" : 7,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"tag_ids\" : [ 3, 3 ],\r\n    \"studentReminderDays\" : 6,\r\n    \"maxNumberRegistrations\" : 5,\r\n    \"numberApprovalsRequired\" : 1,\r\n    \"conditional_badge_group_id\" : 1,\r\n    \"form_id\" : 1,\r\n    \"addedViaBadge\" : true,\r\n    \"created_by\" : 9,\r\n    \"iframeUrl\" : \"iframeUrl\",\r\n    \"canRegister\" : true,\r\n    \"appearsInMarketPlace\" : true,\r\n    \"activity_type_id\" : 1,\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"visibleForEveryone\" : true,\r\n    \"name\" : \"name\",\r\n    \"externalApprovalData\" : {\r\n      \"businessPartnerId\" : 1,\r\n      \"role\" : \"role\",\r\n      \"organization\" : \"organization\",\r\n      \"name\" : \"name\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"approvalProcess\" : 2,\r\n    \"folder_id\" : 4,\r\n    \"isEvent\" : true\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ActivityBreakdownResponse>(exampleJson)
            : default(ActivityBreakdownResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Admin</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activities/admin")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivitiesAdmin")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AdminActivityData>), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivitiesAdmin([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AdminActivityData>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"allowsResubmission\" : true,\r\n  \"attachments\" : [ null, null ],\r\n  \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"description\" : \"description\",\r\n  \"owners\" : [ 1, 1 ],\r\n  \"sponsorReminderDays\" : 1,\r\n  \"registration_form_id\" : 5,\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"availableUntil\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"organizationIds\" : [ 2, 2 ],\r\n  \"id\" : 3,\r\n  \"studentReminderDays\" : 6,\r\n  \"maxNumberRegistrations\" : 7,\r\n  \"visibility\" : \"visibility\",\r\n  \"form_id\" : 5,\r\n  \"completions\" : 4,\r\n  \"contactIds\" : [ 2, 2 ],\r\n  \"iframeUrl\" : \"iframeUrl\",\r\n  \"appearsInMarketPlace\" : true,\r\n  \"canRegister\" : true,\r\n  \"activity_type_id\" : 0,\r\n  \"visibleForEveryone\" : true,\r\n  \"name\" : \"name\",\r\n  \"folder_id\" : 7,\r\n  \"approvalProcess\" : 9,\r\n  \"isEvent\" : true,\r\n  \"external_sponsor_form_id\" : 1\r\n}, {\r\n  \"allowsResubmission\" : true,\r\n  \"attachments\" : [ null, null ],\r\n  \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"description\" : \"description\",\r\n  \"owners\" : [ 1, 1 ],\r\n  \"sponsorReminderDays\" : 1,\r\n  \"registration_form_id\" : 5,\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"availableUntil\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"organizationIds\" : [ 2, 2 ],\r\n  \"id\" : 3,\r\n  \"studentReminderDays\" : 6,\r\n  \"maxNumberRegistrations\" : 7,\r\n  \"visibility\" : \"visibility\",\r\n  \"form_id\" : 5,\r\n  \"completions\" : 4,\r\n  \"contactIds\" : [ 2, 2 ],\r\n  \"iframeUrl\" : \"iframeUrl\",\r\n  \"appearsInMarketPlace\" : true,\r\n  \"canRegister\" : true,\r\n  \"activity_type_id\" : 0,\r\n  \"visibleForEveryone\" : true,\r\n  \"name\" : \"name\",\r\n  \"folder_id\" : 7,\r\n  \"approvalProcess\" : 9,\r\n  \"isEvent\" : true,\r\n  \"external_sponsor_form_id\" : 1\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<AdminActivityData>>(exampleJson)
            : default(List<AdminActivityData>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Admin</remarks>
        /// <param name="activities"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activities/admin/categories/{activities}")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivitiesAdminCategoriesByActivities")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Object>), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivitiesAdminCategoriesByActivities([FromRoute (Name = "activities")][Required]string activities, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Object>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ null, null ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Object>>(exampleJson)
            : default(List<Object>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Admin</remarks>
        /// <param name="activities"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activities/admin/completed-submissions/{activities}")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivitiesAdminCompletedSubmissionsByActivities")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<BasicUser>), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivitiesAdminCompletedSubmissionsByActivities([FromRoute (Name = "activities")][Required]string activities, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<BasicUser>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"firstName\" : \"firstName\",\r\n  \"lastName\" : \"lastName\",\r\n  \"role\" : 1,\r\n  \"school\" : \"school\",\r\n  \"grade\" : 6,\r\n  \"id\" : 5,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"email\" : \"email\"\r\n}, {\r\n  \"firstName\" : \"firstName\",\r\n  \"lastName\" : \"lastName\",\r\n  \"role\" : 1,\r\n  \"school\" : \"school\",\r\n  \"grade\" : 6,\r\n  \"id\" : 5,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"email\" : \"email\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<BasicUser>>(exampleJson)
            : default(List<BasicUser>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Admin</remarks>
        /// <param name="activities"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activities/admin/incompleted-submissions/{activities}")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivitiesAdminIncompletedSubmissionsByActivities")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<BasicUser>), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivitiesAdminIncompletedSubmissionsByActivities([FromRoute (Name = "activities")][Required]string activities, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<BasicUser>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"firstName\" : \"firstName\",\r\n  \"lastName\" : \"lastName\",\r\n  \"role\" : 1,\r\n  \"school\" : \"school\",\r\n  \"grade\" : 6,\r\n  \"id\" : 5,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"email\" : \"email\"\r\n}, {\r\n  \"firstName\" : \"firstName\",\r\n  \"lastName\" : \"lastName\",\r\n  \"role\" : 1,\r\n  \"school\" : \"school\",\r\n  \"grade\" : 6,\r\n  \"id\" : 5,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"email\" : \"email\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<BasicUser>>(exampleJson)
            : default(List<BasicUser>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Admin</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activities/admin/pending")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivitiesAdminPending")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AdminPendingActivityData>), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivitiesAdminPending([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AdminPendingActivityData>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"userActivityId\" : 5,\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"organizationIds\" : [ 0, 0 ],\r\n  \"form_submission_id\" : 1,\r\n  \"name\" : \"name\",\r\n  \"form_id\" : 2,\r\n  \"description\" : \"description\",\r\n  \"id\" : 6,\r\n  \"userActivity\" : {\r\n    \"emailToken\" : \"emailToken\",\r\n    \"notes\" : \"notes\",\r\n    \"signatureUrl\" : \"signatureUrl\",\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"approved\" : true,\r\n    \"user_id\" : 5,\r\n    \"activity_id\" : 0,\r\n    \"sponsorRejected\" : true,\r\n    \"externalApprovalData\" : {\r\n      \"businessPartnerId\" : 1,\r\n      \"role\" : \"role\",\r\n      \"organization\" : \"organization\",\r\n      \"name\" : \"name\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"sponsorApproved\" : true,\r\n    \"sponsorNotes\" : \"sponsorNotes\",\r\n    \"id\" : 1,\r\n    \"sponsor_form_submission_id\" : 6,\r\n    \"hasCheckedIn\" : true,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  },\r\n  \"folder_id\" : 7,\r\n  \"user\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"contactIds\" : [ 5, 5 ]\r\n}, {\r\n  \"userActivityId\" : 5,\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"organizationIds\" : [ 0, 0 ],\r\n  \"form_submission_id\" : 1,\r\n  \"name\" : \"name\",\r\n  \"form_id\" : 2,\r\n  \"description\" : \"description\",\r\n  \"id\" : 6,\r\n  \"userActivity\" : {\r\n    \"emailToken\" : \"emailToken\",\r\n    \"notes\" : \"notes\",\r\n    \"signatureUrl\" : \"signatureUrl\",\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"approved\" : true,\r\n    \"user_id\" : 5,\r\n    \"activity_id\" : 0,\r\n    \"sponsorRejected\" : true,\r\n    \"externalApprovalData\" : {\r\n      \"businessPartnerId\" : 1,\r\n      \"role\" : \"role\",\r\n      \"organization\" : \"organization\",\r\n      \"name\" : \"name\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"sponsorApproved\" : true,\r\n    \"sponsorNotes\" : \"sponsorNotes\",\r\n    \"id\" : 1,\r\n    \"sponsor_form_submission_id\" : 6,\r\n    \"hasCheckedIn\" : true,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  },\r\n  \"folder_id\" : 7,\r\n  \"user\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"contactIds\" : [ 5, 5 ]\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<AdminPendingActivityData>>(exampleJson)
            : default(List<AdminPendingActivityData>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Admin</remarks>
        /// <param name="activities"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activities/admin/registrations/{activities}")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivitiesAdminRegistrationsByActivities")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ActivityRegistrationResponse>), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivitiesAdminRegistrationsByActivities([FromRoute (Name = "activities")][Required]string activities, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ActivityRegistrationResponse>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"lastName\" : \"lastName\",\r\n  \"firstName\" : \"firstName\",\r\n  \"role\" : 0,\r\n  \"school\" : \"school\",\r\n  \"form_submission_id\" : 1,\r\n  \"id\" : 6,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"email\" : \"email\"\r\n}, {\r\n  \"lastName\" : \"lastName\",\r\n  \"firstName\" : \"firstName\",\r\n  \"role\" : 0,\r\n  \"school\" : \"school\",\r\n  \"form_submission_id\" : 1,\r\n  \"id\" : 6,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"email\" : \"email\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ActivityRegistrationResponse>>(exampleJson)
            : default(List<ActivityRegistrationResponse>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Admin</remarks>
        /// <param name="userActivity"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activities/admin/submission/{user_activity}")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivitiesAdminSubmissionByUserActivity")]
        [SwaggerResponse(statusCode: 200, type: typeof(ActivityApplicationResponse), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivitiesAdminSubmissionByUserActivity([FromRoute (Name = "user_activity")][Required]string userActivity, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ActivityApplicationResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"form_submission_id\" : 0\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ActivityApplicationResponse>(exampleJson)
            : default(ActivityApplicationResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Admin</remarks>
        /// <param name="activities"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activities/admin/tags/{activities}")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivitiesAdminTagsByActivities")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Object>), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivitiesAdminTagsByActivities([FromRoute (Name = "activities")][Required]string activities, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Object>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ null, null ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Object>>(exampleJson)
            : default(List<Object>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Edit Activity</remarks>
        /// <param name="userActivity"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activities/approve/{user_activity}/external-sponsor-form")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivitiesApproveByUserActivityExternalSponsorForm")]
        [SwaggerResponse(statusCode: 200, type: typeof(ExternalFormActivityDataResponse), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivitiesApproveByUserActivityExternalSponsorForm([FromRoute (Name = "user_activity")][Required]string userActivity, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ExternalFormActivityDataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"form\" : {\r\n    \"externalToken\" : \"externalToken\",\r\n    \"description\" : \"description\",\r\n    \"canBeUsedByBusinessPartners\" : true,\r\n    \"appearsInMarketPlace\" : true,\r\n    \"premium\" : true,\r\n    \"name\" : \"name\",\r\n    \"files\" : [ {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"form_id\" : 0,\r\n      \"name\" : \"name\",\r\n      \"fileUrl\" : \"fileUrl\",\r\n      \"id\" : 6,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    }, {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"form_id\" : 0,\r\n      \"name\" : \"name\",\r\n      \"fileUrl\" : \"fileUrl\",\r\n      \"id\" : 6,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    } ],\r\n    \"id\" : 7,\r\n    \"canBeUsedInWorkflow\" : true,\r\n    \"fields\" : [ {\r\n      \"allowsOtherField\" : true,\r\n      \"studentsCanViewOnEntity\" : true,\r\n      \"values\" : [ {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      }, {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      } ],\r\n      \"showToStudentsInExperience\" : true,\r\n      \"description\" : \"description\",\r\n      \"characterLimit\" : 2,\r\n      \"type\" : 5,\r\n      \"wordLimit\" : 2,\r\n      \"availableOnExternalEntityForm\" : true,\r\n      \"required\" : true,\r\n      \"hiddenFromSchoolAdminOnStudentProfile\" : true,\r\n      \"hiddenFromStaffOnStudentProfile\" : true,\r\n      \"conditionalDisplayValue\" : 1,\r\n      \"hiddenFromStudents\" : true,\r\n      \"name\" : \"name\",\r\n      \"id\" : 5,\r\n      \"maxMultiSelect\" : 7\r\n    }, {\r\n      \"allowsOtherField\" : true,\r\n      \"studentsCanViewOnEntity\" : true,\r\n      \"values\" : [ {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      }, {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      } ],\r\n      \"showToStudentsInExperience\" : true,\r\n      \"description\" : \"description\",\r\n      \"characterLimit\" : 2,\r\n      \"type\" : 5,\r\n      \"wordLimit\" : 2,\r\n      \"availableOnExternalEntityForm\" : true,\r\n      \"required\" : true,\r\n      \"hiddenFromSchoolAdminOnStudentProfile\" : true,\r\n      \"hiddenFromStaffOnStudentProfile\" : true,\r\n      \"conditionalDisplayValue\" : 1,\r\n      \"hiddenFromStudents\" : true,\r\n      \"name\" : \"name\",\r\n      \"id\" : 5,\r\n      \"maxMultiSelect\" : 7\r\n    } ],\r\n    \"approvalWorkflow\" : 4,\r\n    \"folder_id\" : 1,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  },\r\n  \"submission\" : {\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"approvals\" : [ {\r\n      \"parent\" : {\r\n        \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n        \"lastName\" : \"lastName\",\r\n        \"firstName\" : \"firstName\",\r\n        \"approved\" : true,\r\n        \"phone\" : \"phone\",\r\n        \"student_id\" : 5,\r\n        \"id\" : 5,\r\n        \"email\" : \"email\",\r\n        \"token\" : \"token\",\r\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n      },\r\n      \"signatureImageUrl\" : \"signatureImageUrl\"\r\n    }, {\r\n      \"parent\" : {\r\n        \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n        \"lastName\" : \"lastName\",\r\n        \"firstName\" : \"firstName\",\r\n        \"approved\" : true,\r\n        \"phone\" : \"phone\",\r\n        \"student_id\" : 5,\r\n        \"id\" : 5,\r\n        \"email\" : \"email\",\r\n        \"token\" : \"token\",\r\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n      },\r\n      \"signatureImageUrl\" : \"signatureImageUrl\"\r\n    } ],\r\n    \"associatedUsers\" : [ {\r\n      \"lastName\" : \"lastName\",\r\n      \"firstName\" : \"firstName\",\r\n      \"formSubmissionId\" : 6,\r\n      \"id\" : 0\r\n    }, {\r\n      \"lastName\" : \"lastName\",\r\n      \"firstName\" : \"firstName\",\r\n      \"formSubmissionId\" : 6,\r\n      \"id\" : 0\r\n    } ],\r\n    \"id\" : 1,\r\n    \"fields\" : [ {\r\n      \"attachedValue\" : {\r\n        \"id\" : 7,\r\n        \"value\" : \"value\"\r\n      },\r\n      \"values\" : [ {\r\n        \"id\" : 7,\r\n        \"value\" : \"value\"\r\n      }, {\r\n        \"id\" : 7,\r\n        \"value\" : \"value\"\r\n      } ],\r\n      \"name\" : \"name\",\r\n      \"formSubmissionFieldId\" : 9,\r\n      \"id\" : 2,\r\n      \"type\" : 3,\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"attachedValue\" : {\r\n        \"id\" : 7,\r\n        \"value\" : \"value\"\r\n      },\r\n      \"values\" : [ {\r\n        \"id\" : 7,\r\n        \"value\" : \"value\"\r\n      }, {\r\n        \"id\" : 7,\r\n        \"value\" : \"value\"\r\n      } ],\r\n      \"name\" : \"name\",\r\n      \"formSubmissionFieldId\" : 9,\r\n      \"id\" : 2,\r\n      \"type\" : 3,\r\n      \"value\" : \"value\"\r\n    } ],\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ExternalFormActivityDataResponse>(exampleJson)
            : default(ExternalFormActivityDataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity Visibility
        /// </summary>
        /// <remarks>Activity Visibility</remarks>
        /// <param name="activities"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activities/{activities}/visibility")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivitiesByActivitiesVisibility")]
        [SwaggerResponse(statusCode: 200, type: typeof(ActivityVisibilityResponse), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivitiesByActivitiesVisibility([FromRoute (Name = "activities")][Required]string activities, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ActivityVisibilityResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"allUsers\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  } ],\r\n  \"grades\" : [ 6, 6 ],\r\n  \"clusters\" : [ {\r\n    \"name\" : \"name\",\r\n    \"id\" : 0\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"id\" : 0\r\n  } ],\r\n  \"explicitUsers\" : [ {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  } ],\r\n  \"segments\" : [ {\r\n    \"name\" : \"name\",\r\n    \"id\" : 0\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"id\" : 0\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ActivityVisibilityResponse>(exampleJson)
            : default(ActivityVisibilityResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity Visibility
        /// </summary>
        /// <remarks>Activity Visiility</remarks>
        /// <param name="activities"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activities/{activities}/visibility/teachers")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivitiesByActivitiesVisibilityTeachers")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<BasicUser>), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivitiesByActivitiesVisibilityTeachers([FromRoute (Name = "activities")][Required]string activities, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<BasicUser>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"firstName\" : \"firstName\",\r\n  \"lastName\" : \"lastName\",\r\n  \"role\" : 1,\r\n  \"school\" : \"school\",\r\n  \"grade\" : 6,\r\n  \"id\" : 5,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"email\" : \"email\"\r\n}, {\r\n  \"firstName\" : \"firstName\",\r\n  \"lastName\" : \"lastName\",\r\n  \"role\" : 1,\r\n  \"school\" : \"school\",\r\n  \"grade\" : 6,\r\n  \"id\" : 5,\r\n  \"profileImageUrl\" : \"profileImageUrl\",\r\n  \"email\" : \"email\"\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<BasicUser>>(exampleJson)
            : default(List<BasicUser>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity</remarks>
        /// <param name="userActivity"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activities/student/submission/{user_activity}")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivitiesStudentSubmissionByUserActivity")]
        [SwaggerResponse(statusCode: 200, type: typeof(ActivityApplicationResponse), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivitiesStudentSubmissionByUserActivity([FromRoute (Name = "user_activity")][Required]string userActivity, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ActivityApplicationResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"form_submission_id\" : 0\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ActivityApplicationResponse>(exampleJson)
            : default(ActivityApplicationResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Attachment</remarks>
        /// <param name="activityAttachments"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activity/attachments/{activity_attachments}/url")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivityAttachmentsByActivityAttachmentsUrl")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivityAttachmentsByActivityAttachmentsUrl([FromRoute (Name = "activity_attachments")][Required]string activityAttachments, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Attachment</remarks>
        /// <param name="activities"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activity/{activities}/attachments")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivityByActivitiesAttachments")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Object>), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivityByActivitiesAttachments([FromRoute (Name = "activities")][Required]string activities, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Object>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ null, null ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Object>>(exampleJson)
            : default(List<Object>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Verification</remarks>
        /// <param name="token"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Activity/api/consumer/v1/activity/external/search/{token}")]
        [ValidateModelState]
        [SwaggerOperation("GetActivityApiConsumerV1ActivityExternalSearchByToken")]
        [SwaggerResponse(statusCode: 200, type: typeof(ExternalActivityDataResponse), description: "OK")]
        public virtual IActionResult GetActivityApiConsumerV1ActivityExternalSearchByToken([FromRoute (Name = "token")][Required]string token)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ExternalActivityDataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"formSubmission\" : {\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"approvals\" : [ {\r\n      \"parent\" : {\r\n        \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n        \"lastName\" : \"lastName\",\r\n        \"firstName\" : \"firstName\",\r\n        \"approved\" : true,\r\n        \"phone\" : \"phone\",\r\n        \"student_id\" : 5,\r\n        \"id\" : 5,\r\n        \"email\" : \"email\",\r\n        \"token\" : \"token\",\r\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n      },\r\n      \"signatureImageUrl\" : \"signatureImageUrl\"\r\n    }, {\r\n      \"parent\" : {\r\n        \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n        \"lastName\" : \"lastName\",\r\n        \"firstName\" : \"firstName\",\r\n        \"approved\" : true,\r\n        \"phone\" : \"phone\",\r\n        \"student_id\" : 5,\r\n        \"id\" : 5,\r\n        \"email\" : \"email\",\r\n        \"token\" : \"token\",\r\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n      },\r\n      \"signatureImageUrl\" : \"signatureImageUrl\"\r\n    } ],\r\n    \"associatedUsers\" : [ {\r\n      \"lastName\" : \"lastName\",\r\n      \"firstName\" : \"firstName\",\r\n      \"formSubmissionId\" : 6,\r\n      \"id\" : 0\r\n    }, {\r\n      \"lastName\" : \"lastName\",\r\n      \"firstName\" : \"firstName\",\r\n      \"formSubmissionId\" : 6,\r\n      \"id\" : 0\r\n    } ],\r\n    \"id\" : 1,\r\n    \"fields\" : [ {\r\n      \"attachedValue\" : {\r\n        \"id\" : 7,\r\n        \"value\" : \"value\"\r\n      },\r\n      \"values\" : [ {\r\n        \"id\" : 7,\r\n        \"value\" : \"value\"\r\n      }, {\r\n        \"id\" : 7,\r\n        \"value\" : \"value\"\r\n      } ],\r\n      \"name\" : \"name\",\r\n      \"formSubmissionFieldId\" : 9,\r\n      \"id\" : 2,\r\n      \"type\" : 3,\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"attachedValue\" : {\r\n        \"id\" : 7,\r\n        \"value\" : \"value\"\r\n      },\r\n      \"values\" : [ {\r\n        \"id\" : 7,\r\n        \"value\" : \"value\"\r\n      }, {\r\n        \"id\" : 7,\r\n        \"value\" : \"value\"\r\n      } ],\r\n      \"name\" : \"name\",\r\n      \"formSubmissionFieldId\" : 9,\r\n      \"id\" : 2,\r\n      \"type\" : 3,\r\n      \"value\" : \"value\"\r\n    } ],\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  },\r\n  \"parentSignatures\" : [ \"parentSignatures\", \"parentSignatures\" ],\r\n  \"user_activity_id\" : 6,\r\n  \"description\" : \"description\",\r\n  \"sponsorSignatureUrl\" : \"sponsorSignatureUrl\",\r\n  \"externalForm\" : {\r\n    \"externalToken\" : \"externalToken\",\r\n    \"description\" : \"description\",\r\n    \"canBeUsedByBusinessPartners\" : true,\r\n    \"appearsInMarketPlace\" : true,\r\n    \"premium\" : true,\r\n    \"name\" : \"name\",\r\n    \"files\" : [ {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"form_id\" : 0,\r\n      \"name\" : \"name\",\r\n      \"fileUrl\" : \"fileUrl\",\r\n      \"id\" : 6,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    }, {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"form_id\" : 0,\r\n      \"name\" : \"name\",\r\n      \"fileUrl\" : \"fileUrl\",\r\n      \"id\" : 6,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    } ],\r\n    \"id\" : 7,\r\n    \"canBeUsedInWorkflow\" : true,\r\n    \"fields\" : [ {\r\n      \"allowsOtherField\" : true,\r\n      \"studentsCanViewOnEntity\" : true,\r\n      \"values\" : [ {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      }, {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      } ],\r\n      \"showToStudentsInExperience\" : true,\r\n      \"description\" : \"description\",\r\n      \"characterLimit\" : 2,\r\n      \"type\" : 5,\r\n      \"wordLimit\" : 2,\r\n      \"availableOnExternalEntityForm\" : true,\r\n      \"required\" : true,\r\n      \"hiddenFromSchoolAdminOnStudentProfile\" : true,\r\n      \"hiddenFromStaffOnStudentProfile\" : true,\r\n      \"conditionalDisplayValue\" : 1,\r\n      \"hiddenFromStudents\" : true,\r\n      \"name\" : \"name\",\r\n      \"id\" : 5,\r\n      \"maxMultiSelect\" : 7\r\n    }, {\r\n      \"allowsOtherField\" : true,\r\n      \"studentsCanViewOnEntity\" : true,\r\n      \"values\" : [ {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      }, {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      } ],\r\n      \"showToStudentsInExperience\" : true,\r\n      \"description\" : \"description\",\r\n      \"characterLimit\" : 2,\r\n      \"type\" : 5,\r\n      \"wordLimit\" : 2,\r\n      \"availableOnExternalEntityForm\" : true,\r\n      \"required\" : true,\r\n      \"hiddenFromSchoolAdminOnStudentProfile\" : true,\r\n      \"hiddenFromStaffOnStudentProfile\" : true,\r\n      \"conditionalDisplayValue\" : 1,\r\n      \"hiddenFromStudents\" : true,\r\n      \"name\" : \"name\",\r\n      \"id\" : 5,\r\n      \"maxMultiSelect\" : 7\r\n    } ],\r\n    \"approvalWorkflow\" : 4,\r\n    \"folder_id\" : 1,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  },\r\n  \"form\" : {\r\n    \"externalToken\" : \"externalToken\",\r\n    \"description\" : \"description\",\r\n    \"canBeUsedByBusinessPartners\" : true,\r\n    \"appearsInMarketPlace\" : true,\r\n    \"premium\" : true,\r\n    \"name\" : \"name\",\r\n    \"files\" : [ {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"form_id\" : 0,\r\n      \"name\" : \"name\",\r\n      \"fileUrl\" : \"fileUrl\",\r\n      \"id\" : 6,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    }, {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"form_id\" : 0,\r\n      \"name\" : \"name\",\r\n      \"fileUrl\" : \"fileUrl\",\r\n      \"id\" : 6,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    } ],\r\n    \"id\" : 7,\r\n    \"canBeUsedInWorkflow\" : true,\r\n    \"fields\" : [ {\r\n      \"allowsOtherField\" : true,\r\n      \"studentsCanViewOnEntity\" : true,\r\n      \"values\" : [ {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      }, {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      } ],\r\n      \"showToStudentsInExperience\" : true,\r\n      \"description\" : \"description\",\r\n      \"characterLimit\" : 2,\r\n      \"type\" : 5,\r\n      \"wordLimit\" : 2,\r\n      \"availableOnExternalEntityForm\" : true,\r\n      \"required\" : true,\r\n      \"hiddenFromSchoolAdminOnStudentProfile\" : true,\r\n      \"hiddenFromStaffOnStudentProfile\" : true,\r\n      \"conditionalDisplayValue\" : 1,\r\n      \"hiddenFromStudents\" : true,\r\n      \"name\" : \"name\",\r\n      \"id\" : 5,\r\n      \"maxMultiSelect\" : 7\r\n    }, {\r\n      \"allowsOtherField\" : true,\r\n      \"studentsCanViewOnEntity\" : true,\r\n      \"values\" : [ {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      }, {\r\n        \"id\" : 3,\r\n        \"value\" : \"value\",\r\n        \"order\" : 9\r\n      } ],\r\n      \"showToStudentsInExperience\" : true,\r\n      \"description\" : \"description\",\r\n      \"characterLimit\" : 2,\r\n      \"type\" : 5,\r\n      \"wordLimit\" : 2,\r\n      \"availableOnExternalEntityForm\" : true,\r\n      \"required\" : true,\r\n      \"hiddenFromSchoolAdminOnStudentProfile\" : true,\r\n      \"hiddenFromStaffOnStudentProfile\" : true,\r\n      \"conditionalDisplayValue\" : 1,\r\n      \"hiddenFromStudents\" : true,\r\n      \"name\" : \"name\",\r\n      \"id\" : 5,\r\n      \"maxMultiSelect\" : 7\r\n    } ],\r\n    \"approvalWorkflow\" : 4,\r\n    \"folder_id\" : 1,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    }\r\n  },\r\n  \"name\" : \"name\",\r\n  \"activity_id\" : 0,\r\n  \"sponsorRejected\" : true,\r\n  \"externalApprovalData\" : {\r\n    \"businessPartnerId\" : 1,\r\n    \"role\" : \"role\",\r\n    \"organization\" : \"organization\",\r\n    \"name\" : \"name\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"sponsorNotes\" : \"sponsorNotes\",\r\n  \"sponsorApproved\" : true,\r\n  \"locked\" : true,\r\n  \"user\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ExternalActivityDataResponse>(exampleJson)
            : default(ExternalActivityDataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Edit Activity</remarks>
        /// <param name="bulkApprovalRejectionActivityRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/approve/bulk")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesApproveBulk")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesApproveBulk([FromBody]BulkApprovalRejectionActivityRequest bulkApprovalRejectionActivityRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Edit Activity</remarks>
        /// <param name="userActivity"></param>
        /// <param name="approveRejectActivityRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/approve/{user_activity}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesApproveByUserActivity")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesApproveByUserActivity([FromRoute (Name = "user_activity")][Required]string userActivity, [FromBody]ApproveRejectActivityRequest approveRejectActivityRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Edit Activity</remarks>
        /// <param name="activities"></param>
        /// <param name="editActivityRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/{activities}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesByActivities")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesByActivities([FromRoute (Name = "activities")][Required]string activities, [FromBody]EditActivityRequest editActivityRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity Visibility
        /// </summary>
        /// <remarks>Activity Visiility</remarks>
        /// <param name="activities"></param>
        /// <param name="clusters"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/{activities}/visibility/cluster/{clusters}")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesByActivitiesVisibilityClusterByClusters")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesByActivitiesVisibilityClusterByClusters([FromRoute (Name = "activities")][Required]string activities, [FromRoute (Name = "clusters")][Required]string clusters, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity Visibility
        /// </summary>
        /// <remarks>Activity Visiility</remarks>
        /// <param name="activities"></param>
        /// <param name="grade"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/{activities}/visibility/grade/{grade}")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesByActivitiesVisibilityGradeByGrade")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesByActivitiesVisibilityGradeByGrade([FromRoute (Name = "activities")][Required]string activities, [FromRoute (Name = "grade")][Required]string grade, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity Visibility
        /// </summary>
        /// <remarks>Activity Visiility</remarks>
        /// <param name="activities"></param>
        /// <param name="segments"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/{activities}/visibility/segment/{segments}")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesByActivitiesVisibilitySegmentBySegments")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesByActivitiesVisibilitySegmentBySegments([FromRoute (Name = "activities")][Required]string activities, [FromRoute (Name = "segments")][Required]string segments, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity Visibility
        /// </summary>
        /// <remarks>Activity Visiility</remarks>
        /// <param name="activities"></param>
        /// <param name="users"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/{activities}/visibility/teacher/{users}")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesByActivitiesVisibilityTeacherByUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesByActivitiesVisibilityTeacherByUsers([FromRoute (Name = "activities")][Required]string activities, [FromRoute (Name = "users")][Required]string users, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activit Visibility
        /// </summary>
        /// <remarks>Activity Visiility</remarks>
        /// <param name="activities"></param>
        /// <param name="users"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/{activities}/visibility/user/{users}")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesByActivitiesVisibilityUserByUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesByActivitiesVisibilityUserByUsers([FromRoute (Name = "activities")][Required]string activities, [FromRoute (Name = "users")][Required]string users, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity Visibility
        /// </summary>
        /// <remarks>Activity Visiility</remarks>
        /// <param name="activities"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/{activities}/visibility/visible-for-everyone")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesByActivitiesVisibilityVisibleForEveryone")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesByActivitiesVisibilityVisibleForEveryone([FromRoute (Name = "activities")][Required]string activities, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Claim Activity</remarks>
        /// <param name="activities"></param>
        /// <param name="claimActivityRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/claim/{activities}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesClaimByActivities")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserActivityDTO), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesClaimByActivities([FromRoute (Name = "activities")][Required]string activities, [FromBody]ClaimActivityRequest claimActivityRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserActivityDTO));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"emailToken\" : \"emailToken\",\r\n  \"notes\" : \"notes\",\r\n  \"signatureUrl\" : \"signatureUrl\",\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"approved\" : true,\r\n  \"user_id\" : 5,\r\n  \"activity_id\" : 0,\r\n  \"sponsorRejected\" : true,\r\n  \"externalApprovalData\" : {\r\n    \"businessPartnerId\" : 1,\r\n    \"role\" : \"role\",\r\n    \"organization\" : \"organization\",\r\n    \"name\" : \"name\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"sponsorApproved\" : true,\r\n  \"sponsorNotes\" : \"sponsorNotes\",\r\n  \"id\" : 1,\r\n  \"sponsor_form_submission_id\" : 6,\r\n  \"hasCheckedIn\" : true,\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserActivityDTO>(exampleJson)
            : default(UserActivityDTO);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Edit Activity</remarks>
        /// <param name="userActivity"></param>
        /// <param name="claimActivityRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities-edit-sponsor/{user_activity}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesEditSponsorByUserActivity")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesEditSponsorByUserActivity([FromRoute (Name = "user_activity")][Required]string userActivity, [FromBody]ClaimActivityRequest claimActivityRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Claim Activity</remarks>
        /// <param name="activities"></param>
        /// <param name="registerForActivityRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/register/{activities}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesRegisterByActivities")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesRegisterByActivities([FromRoute (Name = "activities")][Required]string activities, [FromBody]RegisterForActivityRequest registerForActivityRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Edit Activity</remarks>
        /// <param name="bulkApprovalRejectionActivityRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/reject/bulk")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesRejectBulk")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesRejectBulk([FromBody]BulkApprovalRejectionActivityRequest bulkApprovalRejectionActivityRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Edit Activity</remarks>
        /// <param name="userActivity"></param>
        /// <param name="approveRejectActivityRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/reject/{user_activity}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesRejectByUserActivity")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesRejectByUserActivity([FromRoute (Name = "user_activity")][Required]string userActivity, [FromBody]ApproveRejectActivityRequest approveRejectActivityRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Claim Activity</remarks>
        /// <param name="activities"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Activity/api/consumer/v1/activities/unregister/{activities}")]
        [ValidateModelState]
        [SwaggerOperation("PatchActivityApiConsumerV1ActivitiesUnregisterByActivities")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchActivityApiConsumerV1ActivitiesUnregisterByActivities([FromRoute (Name = "activities")][Required]string activities, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Create Activity</remarks>
        /// <param name="createActivityRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Activity/api/consumer/v1/activities")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostActivityApiConsumerV1Activities")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostActivityApiConsumerV1Activities([FromBody]CreateActivityRequest createActivityRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Create Activity</remarks>
        /// <param name="activities"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Activity/api/consumer/v1/activities/{activities}/clone")]
        [ValidateModelState]
        [SwaggerOperation("PostActivityApiConsumerV1ActivitiesByActivitiesClone")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        public virtual IActionResult PostActivityApiConsumerV1ActivitiesByActivitiesClone([FromRoute (Name = "activities")][Required]string activities, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Edit Activity</remarks>
        /// <param name="userActivity"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Activity/api/consumer/v1/activities-resend-sponsor-email/{user_activity}")]
        [ValidateModelState]
        [SwaggerOperation("PostActivityApiConsumerV1ActivitiesResendSponsorEmailByUserActivity")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostActivityApiConsumerV1ActivitiesResendSponsorEmailByUserActivity([FromRoute (Name = "user_activity")][Required]string userActivity, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Attachment</remarks>
        /// <param name="activities"></param>
        /// <param name="uploadActivityAttachmentRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Activity/api/consumer/v1/activity/{activities}/attachments")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostActivityApiConsumerV1ActivityByActivitiesAttachments")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostActivityApiConsumerV1ActivityByActivitiesAttachments([FromRoute (Name = "activities")][Required]string activities, [FromBody]UploadActivityAttachmentRequest uploadActivityAttachmentRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Verification</remarks>
        /// <param name="token"></param>
        /// <param name="approveRejectExternalActivityRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Activity/api/consumer/v1/activity/external/approve/{token}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostActivityApiConsumerV1ActivityExternalApproveByToken")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostActivityApiConsumerV1ActivityExternalApproveByToken([FromRoute (Name = "token")][Required]string token, [FromBody]ApproveRejectExternalActivityRequest approveRejectExternalActivityRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Activity
        /// </summary>
        /// <remarks>Activity Verification</remarks>
        /// <param name="token"></param>
        /// <param name="approveRejectExternalActivityRequest"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Activity/api/consumer/v1/activity/external/reject/{token}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostActivityApiConsumerV1ActivityExternalRejectByToken")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostActivityApiConsumerV1ActivityExternalRejectByToken([FromRoute (Name = "token")][Required]string token, [FromBody]ApproveRejectExternalActivityRequest approveRejectExternalActivityRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
