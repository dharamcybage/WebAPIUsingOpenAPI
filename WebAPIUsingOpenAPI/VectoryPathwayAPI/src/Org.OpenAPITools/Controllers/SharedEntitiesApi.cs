/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SharedEntitiesApiController : ControllerBase
    { 
        /// <summary>
        /// Shared Entities
        /// </summary>
        /// <remarks>Shared Entities</remarks>
        /// <param name="shareable"></param>
        /// <param name="entityId"></param>
        /// <param name="sharingGroupIdentifier"></param>
        /// <param name="groupId"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Shared Entities/api/consumer/v1/shared-entity/{shareable}/{entityId}/{sharingGroupIdentifier}/{groupId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSharedEntitiesApiConsumerV1SharedEntityByShareableByEntityIdBySharingGroupIdentifierByGroupId")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteSharedEntitiesApiConsumerV1SharedEntityByShareableByEntityIdBySharingGroupIdentifierByGroupId([FromRoute (Name = "shareable")][Required]string shareable, [FromRoute (Name = "entityId")][Required]string entityId, [FromRoute (Name = "sharingGroupIdentifier")][Required]string sharingGroupIdentifier, [FromRoute (Name = "groupId")][Required]string groupId, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Shared Entities
        /// </summary>
        /// <remarks>Shared Entities</remarks>
        /// <param name="shareable"></param>
        /// <param name="entityId"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Shared Entities/api/consumer/v1/shared-entity/{shareable}/{entityId}")]
        [ValidateModelState]
        [SwaggerOperation("GetSharedEntitiesApiConsumerV1SharedEntityByShareableByEntityId")]
        [SwaggerResponse(statusCode: 200, type: typeof(EntitySharingDTO), description: "OK")]
        public virtual IActionResult GetSharedEntitiesApiConsumerV1SharedEntityByShareableByEntityId([FromRoute (Name = "shareable")][Required]string shareable, [FromRoute (Name = "entityId")][Required]string entityId, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EntitySharingDTO));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"schools\" : [ {\r\n    \"name\" : \"name\",\r\n    \"id\" : 0\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"id\" : 0\r\n  } ],\r\n  \"districts\" : [ {\r\n    \"name\" : \"name\",\r\n    \"id\" : 0\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"id\" : 0\r\n  } ],\r\n  \"users\" : [ {\r\n    \"name\" : \"name\",\r\n    \"id\" : 0\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"id\" : 0\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EntitySharingDTO>(exampleJson)
            : default(EntitySharingDTO);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Shared Entities
        /// </summary>
        /// <remarks>Shared Entities</remarks>
        /// <param name="shareable"></param>
        /// <param name="entityId"></param>
        /// <param name="sharingGroupIdentifier"></param>
        /// <param name="groupId"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Shared Entities/api/consumer/v1/shared-entity/{shareable}/{entityId}/{sharingGroupIdentifier}/{groupId}")]
        [ValidateModelState]
        [SwaggerOperation("PostSharedEntitiesApiConsumerV1SharedEntityByShareableByEntityIdBySharingGroupIdentifierByGroupId")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostSharedEntitiesApiConsumerV1SharedEntityByShareableByEntityIdBySharingGroupIdentifierByGroupId([FromRoute (Name = "shareable")][Required]string shareable, [FromRoute (Name = "entityId")][Required]string entityId, [FromRoute (Name = "sharingGroupIdentifier")][Required]string sharingGroupIdentifier, [FromRoute (Name = "groupId")][Required]string groupId, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
