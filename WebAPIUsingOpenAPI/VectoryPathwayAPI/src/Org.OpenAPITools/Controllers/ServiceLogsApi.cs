/*
 * Pathwayos API
 *
 * Pathwayos API description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Swashbuckle.Swagger.Annotations; using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ServiceLogsApiController : ControllerBase
    { 
        /// <summary>
        /// Service Log
        /// </summary>
        /// <remarks>Service Log</remarks>
        /// <param name="serviceLogs"></param>
        /// <param name="searchRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/Service Logs/api/consumer/v1/logs/{service_logs}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DeleteServiceLogsApiConsumerV1LogsByServiceLogs")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult DeleteServiceLogsApiConsumerV1LogsByServiceLogs([FromRoute (Name = "service_logs")][Required]string serviceLogs, [FromBody]SearchRequest searchRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Log
        /// </summary>
        /// <remarks>Service Log</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Logs/api/consumer/v1/logs")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceLogsApiConsumerV1Logs")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceLogsForStudentConsumerResponse), description: "OK")]
        public virtual IActionResult GetServiceLogsApiConsumerV1Logs([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceLogsForStudentConsumerResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"lifetimeHours\" : 6.027456183070403,\r\n  \"totalHours\" : 0.8008281904610115,\r\n  \"quickLogs\" : [ {\r\n    \"name\" : \"name\",\r\n    \"service_event_id\" : 7\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"service_event_id\" : 7\r\n  } ],\r\n  \"user\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"pendingLogs\" : [ {\r\n    \"needsRevision\" : true,\r\n    \"year\" : \"year\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"verified\" : true,\r\n    \"id\" : 2,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\",\r\n      \"time\" : \"time\",\r\n      \"id\" : 5,\r\n      \"school_year_id\" : 5\r\n    }\r\n  }, {\r\n    \"needsRevision\" : true,\r\n    \"year\" : \"year\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"verified\" : true,\r\n    \"id\" : 2,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\",\r\n      \"time\" : \"time\",\r\n      \"id\" : 5,\r\n      \"school_year_id\" : 5\r\n    }\r\n  } ],\r\n  \"needsRevisionLogs\" : [ {\r\n    \"needsRevision\" : true,\r\n    \"year\" : \"year\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"verified\" : true,\r\n    \"id\" : 2,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\",\r\n      \"time\" : \"time\",\r\n      \"id\" : 5,\r\n      \"school_year_id\" : 5\r\n    }\r\n  }, {\r\n    \"needsRevision\" : true,\r\n    \"year\" : \"year\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"verified\" : true,\r\n    \"id\" : 2,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\",\r\n      \"time\" : \"time\",\r\n      \"id\" : 5,\r\n      \"school_year_id\" : 5\r\n    }\r\n  } ],\r\n  \"approvedLogs\" : [ {\r\n    \"needsRevision\" : true,\r\n    \"year\" : \"year\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"verified\" : true,\r\n    \"id\" : 2,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\",\r\n      \"time\" : \"time\",\r\n      \"id\" : 5,\r\n      \"school_year_id\" : 5\r\n    }\r\n  }, {\r\n    \"needsRevision\" : true,\r\n    \"year\" : \"year\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"verified\" : true,\r\n    \"id\" : 2,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\",\r\n      \"time\" : \"time\",\r\n      \"id\" : 5,\r\n      \"school_year_id\" : 5\r\n    }\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceLogsForStudentConsumerResponse>(exampleJson)
            : default(ServiceLogsForStudentConsumerResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Log Information
        /// </summary>
        /// <remarks>Service Log Information</remarks>
        /// <param name="serviceLogs"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Logs/api/consumer/v1/logs/{service_logs}")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceLogsApiConsumerV1LogsByServiceLogs")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceLogDTO), description: "OK")]
        public virtual IActionResult GetServiceLogsApiConsumerV1LogsByServiceLogs([FromRoute (Name = "service_logs")][Required]string serviceLogs, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceLogDTO));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"user_id\" : 0,\r\n  \"totalHours\" : 1.4658129805029452,\r\n  \"verified\" : true,\r\n  \"service_event_id\" : 6,\r\n  \"id\" : 5,\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceLogDTO>(exampleJson)
            : default(ServiceLogDTO);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update Service Log
        /// </summary>
        /// <remarks>Update Service Log</remarks>
        /// <param name="serviceLogs"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Logs/api/consumer/v1/logs/{service_logs}/approve")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceLogsApiConsumerV1LogsByServiceLogsApprove")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult GetServiceLogsApiConsumerV1LogsByServiceLogsApprove([FromRoute (Name = "service_logs")][Required]string serviceLogs, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update Service Log
        /// </summary>
        /// <remarks>Update Service Log</remarks>
        /// <param name="serviceLogs"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Logs/api/consumer/v1/logs/{service_logs}/deny")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceLogsApiConsumerV1LogsByServiceLogsDeny")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult GetServiceLogsApiConsumerV1LogsByServiceLogsDeny([FromRoute (Name = "service_logs")][Required]string serviceLogs, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Log Information
        /// </summary>
        /// <remarks>Service Log Information</remarks>
        /// <param name="serviceLogs"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Logs/api/consumer/v1/logs/{service_logs}/full")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceLogsApiConsumerV1LogsByServiceLogsFull")]
        [SwaggerResponse(statusCode: 200, type: typeof(FullLogDataConsumerResponse), description: "OK")]
        public virtual IActionResult GetServiceLogsApiConsumerV1LogsByServiceLogsFull([FromRoute (Name = "service_logs")][Required]string serviceLogs, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FullLogDataConsumerResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"hasFiles\" : true,\r\n  \"log\" : {\r\n    \"geoCheckInLong\" : \"geoCheckInLong\",\r\n    \"sponsor\" : {\r\n      \"feedback\" : \"feedback\",\r\n      \"phone\" : \"phone\",\r\n      \"name\" : \"name\",\r\n      \"id\" : 6,\r\n      \"email\" : \"email\",\r\n      \"status\" : 0\r\n    },\r\n    \"needsRevision\" : true,\r\n    \"proposal_id\" : 1,\r\n    \"totalHours\" : 2.027123023002322,\r\n    \"signatureUrl\" : \"signatureUrl\",\r\n    \"geoCheckInLat\" : \"geoCheckInLat\",\r\n    \"verified\" : true,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"location\" : \"location\",\r\n      \"id\" : 9,\r\n      \"group\" : {\r\n        \"name\" : \"name\",\r\n        \"id\" : 3\r\n      }\r\n    },\r\n    \"tags\" : [ {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"id\" : 1,\r\n      \"sendsParentEmail\" : true,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    }, {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"id\" : 1,\r\n      \"sendsParentEmail\" : true,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    } ],\r\n    \"feedback\" : [ {\r\n      \"adminName\" : \"adminName\",\r\n      \"feedback\" : \"feedback\"\r\n    }, {\r\n      \"adminName\" : \"adminName\",\r\n      \"feedback\" : \"feedback\"\r\n    } ],\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"organization\" : \"organization\",\r\n    \"days\" : [ {\r\n      \"date\" : \"date\",\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"totalHours\" : 7.061401241503109,\r\n      \"description\" : \"description\",\r\n      \"fileUrl\" : \"fileUrl\",\r\n      \"id\" : 5,\r\n      \"service_log_id\" : 2,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    }, {\r\n      \"date\" : \"date\",\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"totalHours\" : 7.061401241503109,\r\n      \"description\" : \"description\",\r\n      \"fileUrl\" : \"fileUrl\",\r\n      \"id\" : 5,\r\n      \"service_log_id\" : 2,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    } ],\r\n    \"id\" : 5,\r\n    \"user\" : {\r\n      \"firstName\" : \"firstName\",\r\n      \"lastName\" : \"lastName\",\r\n      \"role\" : 1,\r\n      \"school\" : \"school\",\r\n      \"grade\" : 6,\r\n      \"id\" : 5,\r\n      \"profileImageUrl\" : \"profileImageUrl\",\r\n      \"email\" : \"email\"\r\n    },\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"parents\" : [ {\r\n      \"approved\" : true,\r\n      \"rejected\" : true,\r\n      \"name\" : \"name\",\r\n      \"email\" : \"email\"\r\n    }, {\r\n      \"approved\" : true,\r\n      \"rejected\" : true,\r\n      \"name\" : \"name\",\r\n      \"email\" : \"email\"\r\n    } ]\r\n  },\r\n  \"allTags\" : [ {\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"id\" : 1,\r\n    \"sendsParentEmail\" : true,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  }, {\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"id\" : 1,\r\n    \"sendsParentEmail\" : true,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  } ],\r\n  \"parents\" : [ {\r\n    \"parent\" : {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"lastName\" : \"lastName\",\r\n      \"firstName\" : \"firstName\",\r\n      \"approved\" : true,\r\n      \"phone\" : \"phone\",\r\n      \"student_id\" : 5,\r\n      \"id\" : 5,\r\n      \"email\" : \"email\",\r\n      \"token\" : \"token\",\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    },\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"emailCode\" : \"emailCode\",\r\n    \"id\" : 7,\r\n    \"service_log_id\" : 4,\r\n    \"status\" : 1,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  }, {\r\n    \"parent\" : {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"lastName\" : \"lastName\",\r\n      \"firstName\" : \"firstName\",\r\n      \"approved\" : true,\r\n      \"phone\" : \"phone\",\r\n      \"student_id\" : 5,\r\n      \"id\" : 5,\r\n      \"email\" : \"email\",\r\n      \"token\" : \"token\",\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    },\r\n    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"emailCode\" : \"emailCode\",\r\n    \"id\" : 7,\r\n    \"service_log_id\" : 4,\r\n    \"status\" : 1,\r\n    \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FullLogDataConsumerResponse>(exampleJson)
            : default(FullLogDataConsumerResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update Service Log
        /// </summary>
        /// <remarks>Update Service Log</remarks>
        /// <param name="serviceLogs"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Logs/api/consumer/v1/logs/{service_logs}/needs-revision")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceLogsApiConsumerV1LogsByServiceLogsNeedsRevision")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult GetServiceLogsApiConsumerV1LogsByServiceLogsNeedsRevision([FromRoute (Name = "service_logs")][Required]string serviceLogs, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update Service Log
        /// </summary>
        /// <remarks>UpdateService Log</remarks>
        /// <param name="serviceLogs"></param>
        /// <param name="externalServiceSponsors"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Logs/api/consumer/v1/logs/{service_logs}/sponsor/{external_service_sponsors}/email")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceLogsApiConsumerV1LogsByServiceLogsSponsorByExternalServiceSponsorsEmail")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult GetServiceLogsApiConsumerV1LogsByServiceLogsSponsorByExternalServiceSponsorsEmail([FromRoute (Name = "service_logs")][Required]string serviceLogs, [FromRoute (Name = "external_service_sponsors")][Required]string externalServiceSponsors, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add Log Information
        /// </summary>
        /// <remarks>Add Log Information</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Logs/api/consumer/v1/logs/create")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceLogsApiConsumerV1LogsCreate")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreateLogMetadataResponse), description: "OK")]
        public virtual IActionResult GetServiceLogsApiConsumerV1LogsCreate([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateLogMetadataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"serviceLogSignatureRequired\" : true,\r\n  \"hourLimit\" : 5,\r\n  \"groups\" : [ {\r\n    \"name\" : \"name\",\r\n    \"id\" : 1,\r\n    \"joinCode\" : \"joinCode\"\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"id\" : 1,\r\n    \"joinCode\" : \"joinCode\"\r\n  } ],\r\n  \"hideGroupField\" : true,\r\n  \"requirePhoneOnServe\" : true,\r\n  \"descriptionPlaceholder\" : \"descriptionPlaceholder\",\r\n  \"serviceLogSignatureAllowed\" : true,\r\n  \"numberOfWords\" : 0,\r\n  \"requiresSponsorContactInfo\" : true,\r\n  \"studentsCanAddTags\" : true,\r\n  \"organizations\" : [ {\r\n    \"name\" : \"name\",\r\n    \"id\" : 6\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"id\" : 6\r\n  } ],\r\n  \"requiresServeSponsorEmail\" : true,\r\n  \"studentsCanUploadFiles\" : true\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateLogMetadataResponse>(exampleJson)
            : default(CreateLogMetadataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add Log Information
        /// </summary>
        /// <remarks>Add Log Information</remarks>
        /// <param name="serviceEvents"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Logs/api/consumer/v1/logs/create/prefilled/{service_events}")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceLogsApiConsumerV1LogsCreatePrefilledByServiceEvents")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreatePrefilledLogMetadataResponse), description: "OK")]
        public virtual IActionResult GetServiceLogsApiConsumerV1LogsCreatePrefilledByServiceEvents([FromRoute (Name = "service_events")][Required]string serviceEvents, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreatePrefilledLogMetadataResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"serviceLogSignatureAllowed\" : true,\r\n  \"numberOfWords\" : 0,\r\n  \"serviceLogSignatureRequired\" : true,\r\n  \"days\" : [ {\r\n    \"date\" : \"date\",\r\n    \"hours\" : 6.027456183070403,\r\n    \"id\" : 1\r\n  }, {\r\n    \"date\" : \"date\",\r\n    \"hours\" : 6.027456183070403,\r\n    \"id\" : 1\r\n  } ],\r\n  \"descriptionPlaceholder\" : \"descriptionPlaceholder\",\r\n  \"serviceEvent\" : {\r\n    \"organization\" : \"organization\",\r\n    \"name\" : \"name\",\r\n    \"description\" : \"description\",\r\n    \"location\" : \"location\",\r\n    \"id\" : 5,\r\n    \"type\" : 5\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreatePrefilledLogMetadataResponse>(exampleJson)
            : default(CreatePrefilledLogMetadataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Log
        /// </summary>
        /// <remarks>Service Log</remarks>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Logs/api/consumer/v1/logs/pending")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceLogsApiConsumerV1LogsPending")]
        [SwaggerResponse(statusCode: 200, type: typeof(PendingLogsResponse), description: "OK")]
        public virtual IActionResult GetServiceLogsApiConsumerV1LogsPending([FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PendingLogsResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"logs\" : [ {\r\n    \"sponsor\" : {\r\n      \"email\" : \"email\",\r\n      \"status\" : 7\r\n    },\r\n    \"totalHours\" : 6.027456183070403,\r\n    \"verified\" : true,\r\n    \"dateString\" : \"dateString\",\r\n    \"parentsVerified\" : 0,\r\n    \"id\" : 1,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\"\r\n    },\r\n    \"user\" : {\r\n      \"lastName\" : \"lastName\",\r\n      \"firstName\" : \"firstName\",\r\n      \"role\" : 2,\r\n      \"grade\" : 5,\r\n      \"id\" : 5,\r\n      \"email\" : \"email\"\r\n    },\r\n    \"tags\" : [ {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"id\" : 1,\r\n      \"sendsParentEmail\" : true,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    }, {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"id\" : 1,\r\n      \"sendsParentEmail\" : true,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    } ]\r\n  }, {\r\n    \"sponsor\" : {\r\n      \"email\" : \"email\",\r\n      \"status\" : 7\r\n    },\r\n    \"totalHours\" : 6.027456183070403,\r\n    \"verified\" : true,\r\n    \"dateString\" : \"dateString\",\r\n    \"parentsVerified\" : 0,\r\n    \"id\" : 1,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\"\r\n    },\r\n    \"user\" : {\r\n      \"lastName\" : \"lastName\",\r\n      \"firstName\" : \"firstName\",\r\n      \"role\" : 2,\r\n      \"grade\" : 5,\r\n      \"id\" : 5,\r\n      \"email\" : \"email\"\r\n    },\r\n    \"tags\" : [ {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"id\" : 1,\r\n      \"sendsParentEmail\" : true,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    }, {\r\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"id\" : 1,\r\n      \"sendsParentEmail\" : true,\r\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n    } ]\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PendingLogsResponse>(exampleJson)
            : default(PendingLogsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Log
        /// </summary>
        /// <remarks>Service Log</remarks>
        /// <param name="grade"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Logs/api/consumer/v1/logs/report/{grade}/generate")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceLogsApiConsumerV1LogsReportByGradeGenerate")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ServeGradeReport>), description: "OK")]
        public virtual IActionResult GetServiceLogsApiConsumerV1LogsReportByGradeGenerate([FromRoute (Name = "grade")][Required]string grade, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ServeGradeReport>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"lifetimeHours\" : 6.027456183070403,\r\n  \"grade\" : 0,\r\n  \"yearHours\" : 1.4658129805029452,\r\n  \"user\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }\r\n}, {\r\n  \"lifetimeHours\" : 6.027456183070403,\r\n  \"grade\" : 0,\r\n  \"yearHours\" : 1.4658129805029452,\r\n  \"user\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  }\r\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ServeGradeReport>>(exampleJson)
            : default(List<ServeGradeReport>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Log Information
        /// </summary>
        /// <remarks>Service Log Information</remarks>
        /// <param name="users"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/Service Logs/api/consumer/v1/logs/user/{users}")]
        [ValidateModelState]
        [SwaggerOperation("GetServiceLogsApiConsumerV1LogsUserByUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceLogsForStudentConsumerResponse), description: "OK")]
        public virtual IActionResult GetServiceLogsApiConsumerV1LogsUserByUsers([FromRoute (Name = "users")][Required]string users, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceLogsForStudentConsumerResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"lifetimeHours\" : 6.027456183070403,\r\n  \"totalHours\" : 0.8008281904610115,\r\n  \"quickLogs\" : [ {\r\n    \"name\" : \"name\",\r\n    \"service_event_id\" : 7\r\n  }, {\r\n    \"name\" : \"name\",\r\n    \"service_event_id\" : 7\r\n  } ],\r\n  \"user\" : {\r\n    \"firstName\" : \"firstName\",\r\n    \"lastName\" : \"lastName\",\r\n    \"role\" : 1,\r\n    \"school\" : \"school\",\r\n    \"grade\" : 6,\r\n    \"id\" : 5,\r\n    \"profileImageUrl\" : \"profileImageUrl\",\r\n    \"email\" : \"email\"\r\n  },\r\n  \"pendingLogs\" : [ {\r\n    \"needsRevision\" : true,\r\n    \"year\" : \"year\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"verified\" : true,\r\n    \"id\" : 2,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\",\r\n      \"time\" : \"time\",\r\n      \"id\" : 5,\r\n      \"school_year_id\" : 5\r\n    }\r\n  }, {\r\n    \"needsRevision\" : true,\r\n    \"year\" : \"year\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"verified\" : true,\r\n    \"id\" : 2,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\",\r\n      \"time\" : \"time\",\r\n      \"id\" : 5,\r\n      \"school_year_id\" : 5\r\n    }\r\n  } ],\r\n  \"needsRevisionLogs\" : [ {\r\n    \"needsRevision\" : true,\r\n    \"year\" : \"year\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"verified\" : true,\r\n    \"id\" : 2,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\",\r\n      \"time\" : \"time\",\r\n      \"id\" : 5,\r\n      \"school_year_id\" : 5\r\n    }\r\n  }, {\r\n    \"needsRevision\" : true,\r\n    \"year\" : \"year\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"verified\" : true,\r\n    \"id\" : 2,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\",\r\n      \"time\" : \"time\",\r\n      \"id\" : 5,\r\n      \"school_year_id\" : 5\r\n    }\r\n  } ],\r\n  \"approvedLogs\" : [ {\r\n    \"needsRevision\" : true,\r\n    \"year\" : \"year\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"verified\" : true,\r\n    \"id\" : 2,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\",\r\n      \"time\" : \"time\",\r\n      \"id\" : 5,\r\n      \"school_year_id\" : 5\r\n    }\r\n  }, {\r\n    \"needsRevision\" : true,\r\n    \"year\" : \"year\",\r\n    \"totalHours\" : 1.4658129805029452,\r\n    \"verified\" : true,\r\n    \"id\" : 2,\r\n    \"serviceEvent\" : {\r\n      \"name\" : \"name\",\r\n      \"description\" : \"description\",\r\n      \"dateString\" : \"dateString\",\r\n      \"time\" : \"time\",\r\n      \"id\" : 5,\r\n      \"school_year_id\" : 5\r\n    }\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceLogsForStudentConsumerResponse>(exampleJson)
            : default(ServiceLogsForStudentConsumerResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// UpdateService Log
        /// </summary>
        /// <remarks>Update Service Log</remarks>
        /// <param name="serviceLogs"></param>
        /// <param name="serviceGroups"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Service Logs/api/consumer/v1/logs/{service_logs}/adjust-group/{service_groups}")]
        [ValidateModelState]
        [SwaggerOperation("PatchServiceLogsApiConsumerV1LogsByServiceLogsAdjustGroupByServiceGroups")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchServiceLogsApiConsumerV1LogsByServiceLogsAdjustGroupByServiceGroups([FromRoute (Name = "service_logs")][Required]string serviceLogs, [FromRoute (Name = "service_groups")][Required]string serviceGroups, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Log
        /// </summary>
        /// <remarks>Service Log</remarks>
        /// <param name="serviceLogs"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Service Logs/api/consumer/v1/logs/{service_logs}/resubmit")]
        [ValidateModelState]
        [SwaggerOperation("PatchServiceLogsApiConsumerV1LogsByServiceLogsResubmit")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchServiceLogsApiConsumerV1LogsByServiceLogsResubmit([FromRoute (Name = "service_logs")][Required]string serviceLogs, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Log
        /// </summary>
        /// <remarks>Service Log</remarks>
        /// <param name="serviceLogs"></param>
        /// <param name="externalServiceSponsors"></param>
        /// <param name="updateSponsorEmailRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPatch]
        [Route("/Service Logs/api/consumer/v1/logs/{service_logs}/sponsor/{external_service_sponsors}/email")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchServiceLogsApiConsumerV1LogsByServiceLogsSponsorByExternalServiceSponsorsEmail")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PatchServiceLogsApiConsumerV1LogsByServiceLogsSponsorByExternalServiceSponsorsEmail([FromRoute (Name = "service_logs")][Required]string serviceLogs, [FromRoute (Name = "external_service_sponsors")][Required]string externalServiceSponsors, [FromBody]UpdateSponsorEmailRequest updateSponsorEmailRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update Service Log
        /// </summary>
        /// <remarks>Update Service Log</remarks>
        /// <param name="approveMultipleServiceLogsRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Logs/api/consumer/v1/logs/approve/multiple")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceLogsApiConsumerV1LogsApproveMultiple")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceLogsApiConsumerV1LogsApproveMultiple([FromBody]ApproveMultipleServiceLogsRequest approveMultipleServiceLogsRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update Service Log
        /// </summary>
        /// <remarks>Update Service Log</remarks>
        /// <param name="serviceLogs"></param>
        /// <param name="postServiceLogFeedbackRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Logs/api/consumer/v1/logs/{service_logs}/feedback")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceLogsApiConsumerV1LogsByServiceLogsFeedback")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceLogFeedbackDTO), description: "OK")]
        public virtual IActionResult PostServiceLogsApiConsumerV1LogsByServiceLogsFeedback([FromRoute (Name = "service_logs")][Required]string serviceLogs, [FromBody]PostServiceLogFeedbackRequest postServiceLogFeedbackRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceLogFeedbackDTO));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"feedback\" : \"feedback\",\r\n  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"deletedAt\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"user_id\" : 1,\r\n  \"id\" : 6,\r\n  \"service_log_id\" : 0,\r\n  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceLogFeedbackDTO>(exampleJson)
            : default(ServiceLogFeedbackDTO);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create Service Log
        /// </summary>
        /// <remarks>Create Service Log</remarks>
        /// <param name="createServiceLogRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Logs/api/consumer/v1/logs/create")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceLogsApiConsumerV1LogsCreate")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceLogsApiConsumerV1LogsCreate([FromBody]CreateServiceLogRequest createServiceLogRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create External Service Log
        /// </summary>
        /// <remarks>Create External Service Log</remarks>
        /// <param name="createPrefilledServiceLogRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Logs/api/consumer/v1/logs/create/prefilled")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceLogsApiConsumerV1LogsCreatePrefilled")]
        [SwaggerResponse(statusCode: 200, type: typeof(long), description: "OK")]
        public virtual IActionResult PostServiceLogsApiConsumerV1LogsCreatePrefilled([FromBody]CreatePrefilledServiceLogRequest createPrefilledServiceLogRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(long));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<long>(exampleJson)
            : default(long);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Service Log
        /// </summary>
        /// <remarks>Service Log</remarks>
        /// <param name="searchRequest"></param>
        /// <param name="authorization"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/Service Logs/api/consumer/v1/logs/search")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostServiceLogsApiConsumerV1LogsSearch")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceLogUserSearchResponse), description: "OK")]
        public virtual IActionResult PostServiceLogsApiConsumerV1LogsSearch([FromBody]SearchRequest searchRequest, [FromHeader (Name = "Authorization")]string authorization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceLogUserSearchResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"users\" : [ {\r\n    \"lifetimeHours\" : 1.4658129805029452,\r\n    \"grade\" : 5,\r\n    \"name\" : \"name\",\r\n    \"id\" : 0,\r\n    \"yearHours\" : 6.027456183070403,\r\n    \"email\" : \"email\"\r\n  }, {\r\n    \"lifetimeHours\" : 1.4658129805029452,\r\n    \"grade\" : 5,\r\n    \"name\" : \"name\",\r\n    \"id\" : 0,\r\n    \"yearHours\" : 6.027456183070403,\r\n    \"email\" : \"email\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServiceLogUserSearchResponse>(exampleJson)
            : default(ServiceLogUserSearchResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
